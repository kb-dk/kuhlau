%!PS-Adobe-1.0
%%Creator: Mup (Version 6.1)
%%Title: music:  from kaleidakustikon_11.mup
%%CreationDate: Wed Jun 12 15:56:22 2013
%%Pages: (atend)
%%DocumentFonts: (atend)
%%BoundingBox: 0 0 612 792
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
% Mup prolog Copyright (c) 1995, 1996, 1997, 1998, 1999, 2000, 2003, 2004,
% 2008, 2009, 2012 by Arkkra Enterprises
% All rights reserved

% Mup PostScript Prolog 6.1 for use with Mup 6.1

% lwid is used as the width of a standard (thin) line in the music
% character definitions.
/lwid 70 def
/halflwid lwid 2 div def

% Define the following for use in do_upshortnote, do_dnshortnote, and
% do_shortrest; it has to be done outside of the music font definition.
/utildict 10 dict def
utildict begin
	/setnumflags	{	/numflags	exch def } def
	/sethooksm1	{	/hooksm1	exch def } def
	/setoffsets	{	/offsets	exch def } def
	/setx		{	/x		exch def } def
	/sety		{	/y		exch def } def
end

% Define a music character font.  Each music character is defined as if it
% were a normal ASCII character in a strange font where "A" looks like a
% treble clef, "B" looks like a bass clef, etc.

/mfont0 100 dict def
mfont0 begin
	/FontType 3 def
	/FontMatrix [ .001 0 0 0.001 0 0 ] def
	/FontBBox [ -2000 -4030 2000 4030 ] def
	/FontName (Mfont0) def

	% set up Encoding vector with standard names
	/Encoding 256 array def
	StandardEncoding Encoding copy
	pop

	% the following definitions are used for quarter rests
	/topx -170 def /topy 950 def
	/cor1x 250 def /cor1y 450 def
	/cor2x -300 def /cor2y 200 def
	/cor3x 250 def /cor3y -400 def

	% the following definitions are used for double sharps
	/limit 300 halflwid add def
	/off 70 def
	/inbendsmall limit 200 sub def
	/inbendbig limit 20 sub def
	/outbendsmall 100 def
	/outbendbig outbendsmall off add def

	%%%%% define routines that will be used by multiple characters %%%%%
	/do_1n {
		gsave
		newpath -10 rotate 1.6 1 scale
		0 0 325 0 360 arc		%outer ellipse
		1 1.6 div 1 scale 10 rotate	%back to original
		35 rotate 0.85 1.1 scale
		0 0 275 0 360 arc		%inner ellipse
		eofill
		grestore
	} def
	/do_upflag {
		-315 0 moveto
		-300 100 -100 480 0 600 curveto
		300 960 350 1500 200 1700 curveto
		130 1700 lineto
		350 1200 50 650 -315 600 curveto
		fill
	} def
	/do_flat {
		-250 -400 moveto	%outer edge of loop
		500 0 350 650 -250 160 curveto
		-250 160 lwid sub lineto %inner edge of loop
		100 400 300 0 -250 -400 lwid add curveto
		fill

		lwid setlinewidth	%stem
		-250 1100 moveto -250 -400 lineto stroke
	} def
	/do_diamond {
		newpath
		420 0 moveto 0 300 lineto -420 0 lineto
		0 -300 lineto closepath
		259 -29 moveto -41 185 lineto -259 29 lineto
		41 -185 lineto closepath
		eofill
	} def
	/do_2n {
		gsave
		newpath 25 rotate 1.4 1 scale
		0 0 315 0 360 arc		%outer ellipse
		1 1.4 div 1 scale		%back to original
		1.3 0.5 scale
		0 0 310 0 360 arc		%inner ellipse
		eofill
		grestore
	} def
	/do_4n {
		gsave
		newpath 25 rotate 1.35 1 scale
		0 0 310 0 360 arc fill
		grestore
	} def
	/do_com {
		newpath
		330 250 150 0 360 arc fill	%knob at upper right
		465 300 moveto			%outer boundary
		410 500 200 635 0 635 curveto
		-750 635 -750 -635 0 -635 curveto
		350 -635 480 -300 500 -100 curveto
		430 -100 lineto			%inner boundary
		380 -300 250 -565 0 -565 curveto
		-450 -565 -450 565 0 565 curveto
		200 565 370 350 395 300 curveto
		fill
	} def
	/do_ferm {
		0 0 800 lwid sub 0 180 arc	%inner arc
		-800 0 lineto
		0 270 lwid sub 800 180 0 arcn	%outer arc
		800 0 lineto fill
		0 120 120 0 360 arc fill	%the dot
	} def
	/do_mor {
		gsave
		0.7 1 scale	%scrunch the following horizontally
		45 rotate	%to pretend all lines horz or vertical
		0 1 1 {
			pop	%we don't need the loop variable
			%one half of the mordent
			0 40 moveto 350 40 lineto 350 -460 lineto
			750 -460 lineto 750 -540 lineto
			150 -540 lineto 150 -40 lineto
			0 -40 lineto fill
			180 rotate	%to do the other half
		} for
		grestore
	} def
	/do_turn {
		gsave
		0 1 1 {
			pop	%we don't need the loop variable
			0 -100 moveto	%outer boundary
			200 -400 625 -400 625 0 curveto
			625 200 500 325 300 325 curveto
			300 185 lineto	%inner boundary
			450 255 555 150 555 0 curveto
			555 -350 250 -250 0 100 curveto
			fill
			300 255 70 0 360 arc fill %knob on end
			180 rotate	%to do the other half
		} for
		grestore
	} def

	/do_upshortnote {
		utildict begin
		setnumflags		%set numflags from the stack
		gsave
		-330 0 translate	%half a flag width
		do_4n			%do a quarter note head
		lwid setlinewidth
		370 0 moveto
		370 2100 numflags 2 sub flagsep mul add lineto stroke
		670 2100 numflags 2 sub flagsep mul add translate
		1 -1 scale		%reflect across X axis
		0 1 numflags 1 sub {
			do_upflag	%do an upflag
			pop		%we don't need the loop variable
			0 flagsep translate
		} for
		grestore
		end
	} def

	/do_dnshortnote {
		utildict begin
		setnumflags		%set numflags from the stack
		do_4n			%do a quarter note head
		lwid setlinewidth
		-370 0 moveto
		-370 -2100 numflags 2 sub flagsep mul sub lineto stroke
		gsave
		-70 -2100 numflags 2 sub flagsep mul sub translate
		0 1 numflags 1 sub {
			do_upflag	%do an upflag
			pop		%we don't need the loop variable
			0 flagsep translate
		} for
		grestore
		end
	} def

	/do_shortrest {
		utildict begin
		sety setx setoffsets sethooksm1	%set variable from the stack
		gsave
		-105.8 offsets mul -600 offsets mul translate
		0 1 hooksm1 {		%loop once per hook
			newpath
			1 setlinewidth
			gsave
			1 1.2 scale
			-150 300 1.2 div 140 0 360 arc fill 	%the dot
			grestore
			lwid setlinewidth
			-50 700 550 255 315 arc		%rest of the hook
			hooksm1 lt { stroke 105.8 600 translate } if
		} for
		x y lineto stroke
		grestore
		end
	} def


	% subsidiary dictionary of character definitions
	/CharStrings 128 dict def
	CharStrings begin

		/.notdef {} def

		% Here are the definitions of the characters.  A stepsize here
		% is 300 units (assuming the character is drawn at its default
		% size).

		% gclef
		/A {
			newpath
			%start with inner curl, inside boundary
			-50 -300 moveto
			-450 600 700 700 750 0 curveto
			750 -800 -700 -800 -700 200 curveto
			-700 900 500 1400 520 2250 curveto
			520 2900 300 3000 200 3000 curveto
			100 3000 -400 2500 -200 1800 curveto
			350 -600 lineto
			720 -1600 0 -1650 -400 -1400 curveto

			%go back to start, drawing the other boundary
			-400 -1480 lineto
			0 -1700 800 -1700 430 -600 curveto
			-120 1800 lineto
			-300 2400 200 2800 250 2800 curveto
			400 2800 430 2700 430 2450 curveto
			430 1800 -900 1200 -900 300 curveto
			-750 -900 800 -900 850 0 curveto
			900 1100 -750 900 -120 -300 curveto fill

			%circle at the bottom
			-300 -1250 250 0 360 arc fill
		} def

		% fclef
		/B {
			newpath
			%start with outside boundary, at bottom
			-1000 -1700 moveto
			100 -1100 500 -600 450 0 curveto
			450 850 -1100 850 -950 0 curveto

			%go back to start, drawing the other boundary
			-880 0 lineto
			-920 400 -600 560 -300 560 curveto
			0 560 150 400 150 0 curveto
			150 -400 100 -900 -1000 -1620 curveto fill

			%circle at the left
			newpath
			-700 0 250 0 360 arc fill

			%do the two dots after the main curve
			700 -300 100 0 360 arc fill
			700 300 100 0 360 arc fill
		} def

		% cclef
		/C {
			gsave
			%do upper curved part, then scale to do mirror image
			0 1 1 {
				pop	%we don't need the loop variable
				%outer boundary of curve
				-170 0 moveto 100 300 lineto
				400 -200 750 300 750 650 curveto
				750 1100 450 1235 250 1235 curveto
				0 1235 -143 1100 -143 950 curveto

				%inner boundary of curve
				0 950 lineto
				0 1100 30 1165 250 1165 curveto
				300 1165 450 1100 450 650 curveto
				450 400 400 -100 100 400 curveto
				-270 0 lineto fill
				%stroke
				%-270 0 moveto 100 400 lineto
				%400 -100 450 400 450 650 curveto
				%450 1100 300 1165 250 1165 curveto
				%30 1165 0 1100 0 950 curveto
				%stroke

				%elliptical ball at end of curve
				gsave
				1.3 1 scale
				10 950 120 0 360 arc fill
				grestore
				1 -1 scale	%reflect across X axis
			} for
			grestore

			% two vertical lines on the left
			300 setlinewidth -600 -1200 halflwid sub moveto
			-600 1200 halflwid add lineto stroke
			lwid setlinewidth -300 -1200 halflwid sub moveto
			-300 1200 halflwid add lineto stroke
		} def

		% dblwhole
		/D {
			do_1n		%do a whole note
			lwid setlinewidth
			-490 -600 moveto -490 600 lineto stroke
			490 -600 moveto 490 600 lineto stroke
		} def

		% 1n
		/E {
			do_1n		%do a whole note
		} def

		% 2n
		/F {
			do_2n		%do a half note
		} def

		% 4n
		/G {
			do_4n		%do a quarter note head
		} def

		% upflag
		/H {
			do_upflag		%do an upflag
		} def

		% dnflag
		/I {
			gsave
			1 -1 scale	%reflect across X axis
			do_upflag		%do an upflag
			grestore
		} def

		% dwhrest
		/J {
			300 setlinewidth
			0 0 moveto 0 600 lineto stroke
		} def

		% 1rest
		/K {
			lwid setlinewidth
			-750 600 moveto 750 600 lineto stroke
			300 setlinewidth
			-400 450 moveto 400 450 lineto stroke
		} def

		% 2rest
		/L {
			lwid setlinewidth
			-750 0 moveto 750 0 lineto stroke
			300 setlinewidth
			-400 150 moveto 400 150 lineto stroke
		} def

		% 4rest
		/M {
			newpath
			cor3x cor3y halflwid add moveto
			%-400 -200 -450 -650 50 -950 lwid add curveto
			-450 -50 -450 -650 50 -950 lwid add curveto
			-150 -650 -100 -250 cor3x cor3y halflwid sub curveto
			fill

			cor1x cor1y moveto cor1x 200 sub cor1y 200 add lineto
			cor2x cor2y lineto cor2x 200 add cor2y 200 sub lineto
			fill

			lwid setlinewidth
			topx topy moveto cor1x cor1y lineto stroke
			cor2x cor2y moveto cor3x cor3y lineto stroke
		} def

		% 8rest
		/N {
			0 0 0 -600 do_shortrest
		} def

		% 16rest
		/O {
			1 1 100 -1200 do_shortrest
		} def

		% 32rest
		/P {
			2 1 0 -1800 do_shortrest
		} def

		% 64rest
		/Q {
			3 2 -80 -2100 do_shortrest
		} def

		% 128rest
		/R {
			4 2 -150 -2700 do_shortrest
		} def

		% 256rest
		/S {
			5 3 -280 -3300 do_shortrest
		} def

		% dot
		/T {
			newpath
			0 0 120 0 360 arc fill
		} def

		% nat
		/U {
			% fill crossbars so that we can do parallelograms
			-235 -470 moveto -235 -270 lineto
			235 -130 lineto 235 -330 lineto fill
			-235 130 moveto -235 330 lineto
			235 470 lineto 235 270 lineto fill

			% vertical strokes
			lwid setlinewidth
			-200 -380 moveto -200 850 lineto stroke
			200 -850 moveto 200 380 lineto stroke
		} def

		% sharp
		/V {
			% fill crossbars so that we can do parallelograms
			-325 -480 moveto -325 -280 lineto
			325 -120 lineto 325 -320 lineto fill
			-325 120 moveto -325 320 lineto
			325 480 lineto 325 280 lineto fill

			% vertical strokes
			lwid setlinewidth
			-150 -930 moveto -150 880 lineto stroke
			150 -880 moveto 150 930 lineto stroke
		} def

		% flat
		/W {
			do_flat		%do a flat
		} def

		% dblsharp
		/X {
			gsave
			0 1 3 {		%loop once for each of 4 sticks
				pop	%we don't need the loop variable
				0 off neg moveto
				outbendbig outbendsmall lineto
				inbendbig inbendsmall lineto
				limit limit lineto
				inbendsmall inbendbig lineto
				outbendsmall outbendbig lineto
				off neg 0 lineto
				fill
				-90 rotate
			} for
			grestore
		} def

		% dblflat
		/Y {
			-290 580 290 {	%loop once for each flat

				gsave
				1 setlinewidth
				0 translate	%translate left/right (loop var)
				do_flat		%do a flat
				grestore

			} for
		} def

		% xnote
		/Z {
			gsave
			1.15 1 scale 120 setlinewidth 1 setlinecap	%round
			-300 -300 moveto 300 300 lineto stroke
			-300 300 moveto 300 -300 lineto stroke
			grestore
		} def

		% dwhdiamond
		/a {
			do_diamond	%do a diamond
			lwid setlinewidth
			-420 -600 moveto -420 600 lineto stroke
			420 -600 moveto 420 600 lineto stroke
		} def

		% diamond
		/b {
			do_diamond	%do a diamond
		} def

		% filldiamond
		/c {
			420 0 moveto 0 300 lineto
			-420 0 lineto 0 -300 lineto fill
		} def

		% up2n
		/d {
			lwid setlinewidth
			380 0 moveto 380 2100 lineto stroke
			do_2n		%do a half note
		} def

		% dn2n
		/e {
			lwid setlinewidth
			-380 0 moveto -380 -2100 lineto stroke
			do_2n		%do a half note
		} def

		% up4n
		/f {
			do_4n		%do a quarter note head
			lwid setlinewidth
			370 0 moveto 370 2100 lineto stroke
		} def

		% dn4n
		/g {
			do_4n		%do a quarter note head
			lwid setlinewidth
			-370 0 moveto -370 -2100 lineto stroke
		} def

		% up8n
		/h {
			gsave
			-330 0 translate	% half a flag width
			do_4n		%do a quarter note head
			lwid setlinewidth
			370 0 moveto 370 2100 lineto stroke
			670 2100 translate
			1 -1 scale	%reflect across X axis
			do_upflag		%do an upflag
			grestore
		} def

		% dn8n
		/i {
			do_4n		%do a quarter note head
			lwid setlinewidth
			-370 0 moveto -370 -2100 lineto stroke
			gsave
			-70 -2100 translate
			do_upflag		%do an upflag
			grestore
		} def

		% up16n
		/j {
			2 do_upshortnote
		} def

		% dn16n
		/k {
			2 do_dnshortnote
		} def

		% up32n
		/l {
			3 do_upshortnote
		} def

		% dn32n
		/m {
			3 do_dnshortnote
		} def

		% up64n
		/n {
			4 do_upshortnote
		} def

		% dn64n
		/o {
			4 do_dnshortnote
		} def

		% up128n
		/p {
			5 do_upshortnote
		} def

		% dn128n
		/q {
			5 do_dnshortnote
		} def

		% up256n
		/r {
			6 do_upshortnote
		} def

		% dn256n
		/s {
			6 do_dnshortnote
		} def

		% com
		/t {
			do_com		%do a common time symbol
		} def

		% cut
		/u {
			do_com		%do a common time symbol
			lwid setlinewidth
			0 -900 moveto 0 900 lineto stroke
		} def

		% begped
		/v {
			lwid setlinewidth
			-200 600 moveto -200 0 lineto 200 0 lineto stroke
		} def

		% pedal
		/w {
			lwid setlinewidth
			-500 0 moveto -450 0 lineto 0 600 lineto
			450 0 lineto 500 0 lineto stroke
		} def

		% endped
		/x {
			lwid setlinewidth
			200 600 moveto 200 0 lineto -200 0 lineto stroke
		} def

		% dnbow
		/y {
			lwid setlinewidth
			-350 0 moveto -350 900 lineto stroke
			350 0 moveto 350 900 lineto stroke
			200 setlinewidth
			-350 800 moveto 350 800 lineto stroke
		} def

		% upbow
		/z {
			lwid setlinewidth
			-300 900 moveto 0 0 lineto 300 900 lineto stroke
		} def

		% wedge
		/one {
			0 0 moveto -150 500 lineto 150 500 lineto fill
		} def

		% uwedge
		/two {
			-150 0 moveto 150 0 lineto 0 500 lineto fill
		} def

		% ferm
		/three {
			newpath
			do_ferm		%do a right side up fermata
		} def

		% uferm
		/four {
			newpath
			gsave
			0 270 lwid sub 800 add translate %baseline at bottom
			180 rotate			%upside down
			do_ferm		%do a right side up fermata
			grestore
		} def

		% sign
		/five {
			gsave
			%do upper left curved part, upper right dot;
			%then rotate 180 to do other half
			0 1 1 {
				pop	%we don't need the loop variable
				0 100 moveto		%inner boundary
				-1000 300 -400 750 -200 700 curveto
				-200 800 lineto		%outer boundary
				-550 900 -1100 100 0 -100 curveto
				fill
				%dot at end of curve
				-200 700 100 0 360 arc fill
				%dot in upper right quadrant
				500 200 70 0 360 arc fill
				180 rotate
			} for
			grestore

			%slash through middle
			lwid setlinewidth
			-400 -800 moveto 400 800 lineto stroke
		} def

		% coda
		/six {
			newpath
			gsave
			0.6 1 scale
			0 0 550 0 360 arc	%outside boundary
			1 0.6 div 1 scale	%back to original
			0.9 1 scale
			0 0 650 0 360 arc	%inside boundary
			eofill
			grestore
			lwid setlinewidth
			0 -850 moveto 0 850 lineto stroke
			-800 0 moveto 800 0 lineto stroke
		} def

		% mor
		/seven {
			do_mor		%do a mordent
		} def

		% invmor
		/eight {
			do_mor		%do a mordent
			lwid setlinewidth
			0 -450 moveto 0 450 lineto stroke
		} def

		% turn
		/nine {
			do_turn		%do a turn
		} def

		% invturn
		/zero {
			gsave
			1 -1 scale	%reflect across X axis
			do_turn		%do a turn
			grestore
		} def

		% acc_gt
		/numbersign {
			lwid setlinewidth
			-500 300 moveto 500 0 lineto -500 -300 lineto stroke
		} def

		% acc_hat
		/dollar {
			newpath
			-365 0 moveto 0 860 lineto 365 0 lineto
			150 0 lineto -75 530 lineto -300 0 lineto fill
		} def

		% acc_uhat
		/quotedbl {
			newpath
			365 860 moveto 0 0 lineto -365 860 lineto
			-150 860 lineto 75 330 lineto 300 860 lineto fill
		} def

		% tr
		/asterisk {
			%vertical bar of t
			-350 1000 moveto -550 200 lineto
			-612.5 -50 -212.5 -50 -160 200 curveto
			-230 200 lineto
			-300 50 -420 50 -400 200 curveto
			-200 1000 lineto fill

			%crossbar of t and vertical bar of r
			-700 600 moveto -160 600 lineto
			20 600 30 520 60 440 curveto
			-50 0 lineto 70 0 lineto 180 440 lineto
			190 480 100 670 -150 670 curveto
			-690 670 lineto fill

			%horizontal curve of r
			100 480 moveto
			300 630 450 700 650 550 curveto
			560 480 lineto
			450 630 300 560 100 390 curveto
			fill

			%knob at end of r
			600 460 100 0 360 arc fill
		} def

		% leg
		/comma {
			100 setlinewidth
			-400 0 moveto 400 0 lineto stroke
		} def

		% rr
		/hyphen {
			100 setlinewidth
			-400 0 moveto 0 1000 lineto stroke
			0 0 moveto 400 1000 lineto stroke
		} def

		% measrpt
		/period {
			newpath -450 400 150 0 360 arc fill
			newpath 450 -400 150 0 360 arc fill
			200 setlinewidth
			-550 -600 moveto 550 600 lineto stroke
		} def

		% copyright
		/slash {
			lwid setlinewidth
			newpath 0 400 400 0 360 arc stroke
			newpath 0 400 200 45 315 arc stroke
		} def

		% dim
		/quoteleft {
			50 setlinewidth
			newpath 0 640 220 0 360 arc stroke
		} def

		% halfdim
		/quoteright {
			50 setlinewidth
			newpath 0 640 220 0 360 arc stroke
			newpath -340 300 moveto 340 980 lineto stroke
		} def

		% triangle
		/asciicircum {
			50 setlinewidth
			newpath -340 -10 moveto 0 710 lineto
			340 -10 lineto closepath stroke
		} def

		% qwhrest
		/ampersand {
			300 setlinewidth
			0 -600 moveto 0 600 lineto stroke
		} def

		% ll1rest
		/exclam {
			310 setlinewidth
			-400 455 moveto 400 450 lineto stroke
		} def

		% ll2rest
		/at {
			310 setlinewidth
			-400 145 moveto 400 150 lineto stroke
		} def
	end

	/BuildChar {

		exch begin
		Encoding exch get

		dup
		Mcbbox0 exch get
		aload pop setcachedevice

		CharStrings exch get
		exec
		end
	} def
end


% Define another music character font, since there are too many to fit in one
% font.  It works the same way as the first one.

/mfont1 100 dict def
mfont1 begin
	/FontType 3 def
	/FontMatrix [ .001 0 0 0.001 0 0 ] def
	/FontBBox [ -2000 -4030 2000 4030 ] def
	/FontName (Mfont1) def

	% set up Encoding vector with standard names
	/Encoding 256 array def
	StandardEncoding Encoding copy
	pop

	%%%%% define routines that will be used by multiple characters %%%%%

	/do_dwh_bars {
		% the two bars surrounding a double whole note
		lwid setlinewidth
		-420 -600 moveto -420 600 lineto stroke
		420 -600 moveto 420 600 lineto stroke
	} def
	/do_righttriangle {
		newpath
		420 270 moveto -420 270 lineto 350 -300 lineto 420 -300 lineto
		350 150 moveto -140 150 lineto 350 -213 lineto
		eofill
	} def
	/do_fillrighttriangle {
		newpath
		420 270 moveto -420 270 lineto 350 -300 lineto 420 -300 lineto
		fill
	} def
	/do_rectangle {
		newpath
		420 270 moveto -420 270 lineto -420 -270 lineto 420 -270 lineto
		350 150 moveto -350 150 lineto -350 -150 lineto 350 -150 lineto
		eofill
	} def
	/do_isostriangle {
		newpath
		0 300 moveto -420 -270 lineto 420 -270 lineto
		0 182 moveto -245 -150 lineto 245 -150 lineto
		eofill
	} def
	/do_piewedge {
		newpath
		0 -300 moveto 0 -244 514 35 145 arc
		0 -209 moveto 0 -244 394 43 137 arc
		eofill
	} def
	/do_semicircle {
		newpath
		gsave
		1 1.357 scale 420 199 moveto 0 199 420 180 360 arc
		1 1.09 scale 350 111 moveto 0 199 350 194.1 345.9 arc
		eofill
		grestore
	} def
	/do_slashhead {
		newpath
		lwid setlinewidth
		-620 -530 moveto -480 -670 lineto 620 530 lineto 480 670 lineto
		closepath stroke
	} def

	% subsidiary dictionary of character definitions
	/CharStrings 128 dict def
	CharStrings begin

		/.notdef {} def

		% Here are the definitions of the characters.  A stepsize here
		% is 300 units (assuming the character is drawn at its default
		% size).

		% dwhrighttriangle
		/A {
			do_righttriangle
			do_dwh_bars
		} def

		% righttriangle
		/B {
			do_righttriangle
		} def

		% fillrighttriangle
		/C {
			newpath
			420 270 moveto -420 270 lineto 350 -300 lineto
			420 -300 lineto
			fill
		} def

		% udwhrighttriangle
		/D {
			gsave
			180 rotate
			do_righttriangle
			do_dwh_bars
			grestore
		} def

		% urighttriangle
		/E {
			gsave
			180 rotate
			do_righttriangle
			grestore
		} def

		% ufillrighttriangle
		/F {
			gsave
			180 rotate
			do_fillrighttriangle
			grestore
		} def

		% dwhrectangle
		/G {
			do_rectangle
			do_dwh_bars
		} def

		% rectangle
		/H {
			do_rectangle
		} def

		% fillrectangle
		/I {
			newpath
			420 270 moveto -420 270 lineto -420 -270 lineto
			420 -270 lineto
			fill
		} def

		% dwhisostriangle
		/J {
			do_isostriangle
			do_dwh_bars
		} def

		% isostriangle
		/K {
			do_isostriangle
		} def

		% fillisostriangle
		/L {
			newpath
			0 300 moveto -420 -270 lineto 420 -270 lineto
			fill
		} def

		% dwhpiewedge
		/M {
			do_piewedge
			do_dwh_bars
		} def

		% piewedge
		/N {
			do_piewedge
		} def

		% fillpiewedge
		/O {
			newpath
			0 -300 moveto 0 -244 514 35 145 arc
			fill
		} def

		% dwhsemicircle
		/P {
			do_semicircle
			do_dwh_bars
		} def

		% semicircle
		/Q {
			do_semicircle
		} def

		% fillsemicircle
		/R {
			newpath
			gsave
			1 570 420 div scale
			420 199 moveto 0 199 420 180 360 arc
			fill
			grestore
		} def

		% dwhslashhead
		/S {
			do_slashhead
			lwid setlinewidth
			-650 -600 moveto -650 600 lineto stroke
			650 -600 moveto 650 600 lineto stroke
		} def

		% slashhead
		/T {
			do_slashhead
		} def

		% fillslashhead
		/U {
			newpath
			200 setlinewidth
			-550 -600 moveto 550 600 lineto stroke
		} def

		% blankhead
		/V {
			%print nothing
		} def
	end

	/BuildChar {

		exch begin
		Encoding exch get

		dup
		Mcbbox1 exch get
		aload pop setcachedevice

		CharStrings exch get
		exec
		end
	} def
end


% General routines for printing any music character, invoked by each music
% character's specific routine below.  The scaling factor (default 1) needs
% to be multiplied by 10 to get the actual size.  These routines restore the
% preexisting current font when they are done.

/printmchar0 {
	gsave
	/musicchar exch def
	/Mfont0 findfont exch 10 mul scalefont setfont moveto 
	musicchar show
	grestore
} def
/printmchar1 {
	gsave
	/musicchar exch def
	/Mfont1 findfont exch 10 mul scalefont setfont moveto 
	musicchar show
	grestore
} def

% Define each music character name to be a routine that prints the character.
% Each character is to be invoked as in this example:
%	100 200 1 gclef		% at (100, 200), scale to default size & print

/gclef			{ (A) printmchar0 } def
/fclef			{ (B) printmchar0 } def
/cclef			{ (C) printmchar0 } def
/dblwhole		{ (D) printmchar0 } def
/1n			{ (E) printmchar0 } def
/2n			{ (F) printmchar0 } def
/4n			{ (G) printmchar0 } def
/upflag			{ (H) printmchar0 } def
/dnflag			{ (I) printmchar0 } def
/dwhrest		{ (J) printmchar0 } def
/1rest			{ (K) printmchar0 } def
/2rest			{ (L) printmchar0 } def
/4rest			{ (M) printmchar0 } def
/8rest			{ (N) printmchar0 } def
/16rest			{ (O) printmchar0 } def
/32rest			{ (P) printmchar0 } def
/64rest			{ (Q) printmchar0 } def
/128rest		{ (R) printmchar0 } def
/256rest		{ (S) printmchar0 } def
/dot			{ (T) printmchar0 } def
/nat			{ (U) printmchar0 } def
/sharp			{ (V) printmchar0 } def
/flat			{ (W) printmchar0 } def
/dblsharp		{ (X) printmchar0 } def
/dblflat		{ (Y) printmchar0 } def
/xnote			{ (Z) printmchar0 } def
/dwhdiamond		{ (a) printmchar0 } def
/diamond		{ (b) printmchar0 } def
/filldiamond		{ (c) printmchar0 } def
/up2n			{ (d) printmchar0 } def
/dn2n			{ (e) printmchar0 } def
/up4n			{ (f) printmchar0 } def
/dn4n			{ (g) printmchar0 } def
/up8n			{ (h) printmchar0 } def
/dn8n			{ (i) printmchar0 } def
/up16n			{ (j) printmchar0 } def
/dn16n			{ (k) printmchar0 } def
/up32n			{ (l) printmchar0 } def
/dn32n			{ (m) printmchar0 } def
/up64n			{ (n) printmchar0 } def
/dn64n			{ (o) printmchar0 } def
/up128n			{ (p) printmchar0 } def
/dn128n			{ (q) printmchar0 } def
/up256n			{ (r) printmchar0 } def
/dn256n			{ (s) printmchar0 } def
/com			{ (t) printmchar0 } def
/cut			{ (u) printmchar0 } def
/begped			{ (v) printmchar0 } def
/pedal			{ (w) printmchar0 } def
/endped			{ (x) printmchar0 } def
/dnbow			{ (y) printmchar0 } def
/upbow			{ (z) printmchar0 } def
/wedge			{ (1) printmchar0 } def
/uwedge			{ (2) printmchar0 } def
/ferm			{ (3) printmchar0 } def
/uferm			{ (4) printmchar0 } def
/sign			{ (5) printmchar0 } def
/coda			{ (6) printmchar0 } def
/mor			{ (7) printmchar0 } def
/invmor			{ (8) printmchar0 } def
/turn			{ (9) printmchar0 } def
/invturn		{ (0) printmchar0 } def
/acc_gt			{ (#) printmchar0 } def
/acc_hat		{ ($) printmchar0 } def
/acc_uhat		{ (") printmchar0 } def
/tr			{ (*) printmchar0 } def
/leg			{ (,) printmchar0 } def
/rr			{ (-) printmchar0 } def
/measrpt		{ (.) printmchar0 } def
/copyright		{ (/) printmchar0 } def
/dim			{ (`) printmchar0 } def
/halfdim		{ (') printmchar0 } def
/triangle		{ (^) printmchar0 } def
/qwhrest		{ (&) printmchar0 } def
/ll1rest		{ (!) printmchar0 } def
/ll2rest		{ (@) printmchar0 } def
/dwhrighttriangle	{ (A) printmchar1 } def
/righttriangle		{ (B) printmchar1 } def
/fillrighttriangle	{ (C) printmchar1 } def
/udwhrighttriangle	{ (D) printmchar1 } def
/urighttriangle		{ (E) printmchar1 } def
/ufillrighttriangle	{ (F) printmchar1 } def
/dwhrectangle		{ (G) printmchar1 } def
/rectangle		{ (H) printmchar1 } def
/fillrectangle		{ (I) printmchar1 } def
/dwhisostriangle	{ (J) printmchar1 } def
/isostriangle		{ (K) printmchar1 } def
/fillisostriangle	{ (L) printmchar1 } def
/dwhpiewedge		{ (M) printmchar1 } def
/piewedge		{ (N) printmchar1 } def
/fillpiewedge		{ (O) printmchar1 } def
/dwhsemicircle		{ (P) printmchar1 } def
/semicircle		{ (Q) printmchar1 } def
/fillsemicircle		{ (R) printmchar1 } def
/dwhslashhead		{ (S) printmchar1 } def
/slashhead		{ (T) printmchar1 } def
/fillslashhead		{ (U) printmchar1 } def
/blankhead		{ (V) printmchar1 } def


% Define routines for Mup output other than music characters.

/stepsize 3 def	   % define a step size as 3 points (at default magnification)

% x1 y1 x2 lines dist staffscale staff
%		draw a staff starting at x1, y1 and extending to x2 with "lines"
%		lines, 2*dist*stepsize apart, scaled by staffscale
/staff {
	/staffscale exch def
	/dist exch def
	/lines exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	0.7 staffscale mul setlinewidth
	1 lines sub  2  lines 1 sub {	% loop from bottom line to top line
		dup stepsize mul staffscale mul dist mul y1 add x1 exch moveto
		stepsize mul staffscale mul dist mul y1 add x2 exch lineto stroke
	} for
} def

% x y1 y2 bracket	draw a bracket; y1 is the top
/bracket {
	/y2 exch def
	/y1 exch def
	/x exch def
	gsave
	3 setlinewidth
	x 2 sub y1 1 add moveto
	x 2 sub y2 1 sub lineto
	stroke
	x 2 sub y1 1 add moveto
	x 1 sub y1 1 add   x 3 add y1 1 add   x 5 add y1 6 add   curveto
	x 6 add y1 5 add lineto
	x 5 add y1 2 add   x 1 add y1 2 sub   x 2 sub y1 2 sub   curveto
	fill
	x 2 sub y2 1 sub moveto
	x 1 sub y2 1 sub   x 3 add y2 1 sub   x 5 add y2 6 sub   curveto
	x 6 add y2 5 sub lineto
	x 5 add y2 2 sub   x 1 add y2 2 add   x 2 sub y2 2 add   curveto
	fill
	grestore
} def

% x y1 y2 right repeatbracket	draw a bracket for a repeat; y1 is the top,
%				right==1 means facing to the right
/repeatbracket {
	/right exch def
	/y2 exch def
	/y1 exch def
	/x exch def
	gsave
	right 0 eq {
		x y1 y2 add 2 div translate
		180 rotate
		0 x sub 0 y1 y2 add 2 div sub translate
	} if
	x 4.5 sub y1 1 add moveto
	x 0 sub y1 1 add   x 2 add y1 1 add   x 6 add y1 5 add   curveto
	x 6 add y1 4 add lineto
	x 6 add y1 2 add   x 1 add y1 2 sub   x 4.5 sub y1 1.5 sub   curveto
	fill
	x 4.5 sub y2 1 sub moveto
	x 0 sub y2 1 sub   x 2 add y2 1 sub   x 6 add y2 5 sub   curveto
	x 6 add y2 4 sub lineto
	x 6 add y2 2 sub   x 1 add y2 2 add   x 4.5 sub y2 1.5 add   curveto
	fill
	grestore
} def

% x y1 y2 brace		draw a brace; y1 is the top
/brace {
	/y2 exch def
	/y1 exch def
	/x exch def
	gsave
	x 6 sub y1 y2 add 2 div translate
	/topy y1 y2 sub 2 div 1 sub def
	0.667 1 scale
	0 1 1 {
		pop
		%0 topy moveto 0 0 lineto stroke
		0 0 moveto
		16 topy 0.2 mul   -11 topy 0.6 mul   8 topy   curveto
		8.7 topy lineto
		-7 topy 0.7 mul   20 topy 0.3 mul   1 0   curveto
		fill
		1 -1 scale	% flip to do bottom half
	} for
	grestore
} def

% endx endy wavy staffscale	draw a wavy line from current point to here,
%				scaled by staffscale
/wavy {
	/staffscale exch def
	/endy exch def		% define the end point of the line
	/endx exch def
	currentpoint		% line starts at current point
	/begy exch def		% define the beginning point of the line
	/begx exch def
	gsave
	/dx endx begx sub def	% find delta x and delta y
	/dy endy begy sub def
	/r dx dx mul dy dy mul add sqrt def	% hypotenuse
	/theta dy dx atan def			% angle with positive x axis
	begx begy translate	% change axes so that we can draw the line
	theta rotate		%   from (0, 0) to (r, 0)
	staffscale staffscale scale	% scale everything by staffscale
	/scaledr r staffscale div def	% but scale r in reverse to keep length

	% Each outer loop draws one cycle of the squiggle.  It continues until
	% we are at or beyond the desired end point.
	0 0 moveto
	0 6 scaledr {
		gsave
		% first loop draws left half of squiggle; second draws right
		0 1 1 {
			0.0 0.4 moveto
			2.0 1.9 3.4 2.3 3.9 0.0 curveto
			2.1 0.0 lineto
			1.9 0.8 1.4 0.7 0.0 -0.4 curveto
			fill
			pop 180 rotate -6 0 translate
		} for
		grestore

		pop 6 0 translate	% shift axes right one squiggle
	} for

	grestore
} def

% x y space frets fretno numvert curvel curver [ f1 f2 f3 ... ] grid
%				print a guitar grid diagram
/grid {
	/grid_positions exch def % 0="o", -1="x", -2=nothing, positive=dot
	/curver exch def	% right string for curve, 0 if none
	/curvel exch def	% left string for curve, 0 if none
	/numvert exch def	% vertical position to print fretno, 0 if none
	/fretno exch def	% fret no. to print at right, 0 if none
	/frets exch def		% number of fret lines
	/space exch def		% points between two neighboring lines
	/y exch def		% y coord of top fret line
	/x exch def		% x coord of left strings

	gsave
	/strings grid_positions length def	% number of strings
	/lmarky 0.4 space mul y add def		% lowest Y of a "o" or "x"
	space 10 div setlinewidth
	2 setlinecap

	% draw the lines of the grid
	0  1  strings 1 sub {	% loop from left string to right string
		dup space mul x add y moveto
		space mul x add frets 1 sub space mul y exch sub lineto stroke
	} for
	0  -1  1 frets sub {	% loop from top fret (nut) to bottom fret
		dup space mul y add x exch moveto
		space mul y add strings 1 sub space mul x add exch lineto stroke
	} for

	% draw the curved line if there is one
	curvel 0 gt {
		% within strings curvel to curver, find smallest positive fret
		/minfret 1000 def
		curvel 1 curver {
			/strno exch def
			/grid_p grid_positions strno 1 sub get def
			grid_p 0 gt grid_p minfret lt and {
				/minfret grid_p def
			} if
		} for

		% if curve goes above top fret, other marks must be higher
		minfret 1 eq {
			/hmarky 1.2 space mul y add def
		} {
			/hmarky lmarky def
		} ifelse

		/strdiff curver curvel sub def
		space 8 div setlinewidth

		% set endpoint coords of curve; higher if curve is short
		/curvex1 curvel 1 sub space mul x add def
		/curvex2 curver 1 sub space mul x add def
		/curvey 1 minfret sub space mul y add def
		strdiff 3 lt {
			/curvey 0.2 strdiff div space mul curvey add def
		} if

		% move to left end, set other points, draw curve
		curvex1 curvey moveto

		curvex1 curvex2 curvex1 sub 3 div add
		curvey space 0.4 strdiff sqrt mul mul add

		curvex2 curvex2 curvex1 sub 3 div sub
		curvey space 0.4 strdiff sqrt mul mul add

		curvex2 curvey curveto stroke
	} if

	space 10 div setlinewidth

	% draw dots and x and o marks
	0  1  strings 1 sub {	% loop from left string to right string
		/strno exch def	% first string is 0
		/grid_p grid_positions strno get def
		/strx strno space mul x add def

		% set Y of mark higher if curved line covers this string
		strno 1 add curvel ge  strno 1 add curver le  and {
			/marky hmarky def
		} {
			/marky lmarky def
		} ifelse

		grid_p -1 eq {		% draw an X above the string
			/xhwid space 3 div def
			strx xhwid sub marky xhwid sub moveto
			strx xhwid add marky xhwid add lineto stroke
			strx xhwid sub marky xhwid add moveto
			strx xhwid add marky xhwid sub lineto stroke
		} if
		grid_p 0 eq {		% draw a circle above the string
			strx marky space 0.3 mul 0 360 arc stroke
		} if
		grid_p 1 ge {		% draw a dot by the proper fret
			strx y grid_p space mul sub space 3 div add
			space 3 div 0 360 arc fill
		} if
	} for

	% print "X fr" if requested
	fretno 0 gt {
		/Palatino-Roman findfont space 1.9 mul scalefont setfont
		x strings 0.5 sub space mul add
		y space numvert 0.3 add mul sub moveto
		fretno 2 string cvs show ( fr) show
	} if
	grestore
} def

% x1 y1 x2 y2 whitebox		draw a white rectangle with opposite
%				corners of (x1,y1) and (x2,y2)
/whitebox {
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	1.0 setgray
	newpath
	x1 y1 moveto
	x1 y2 lineto
	x2 y2 lineto
	x2 y1 lineto
	closepath
	fill
	stroke
	0.0 setgray
} def


/LineNum 0 def
/InputFile (unknown) def

% n linenum
/linenum {
	/LineNum exch def
} def

% (inputfilename) inputfile
/inputfile {
	/InputFile exch def
} def

% find size of Encoding and make a dictionary
% that size for bounding box information
mfont0 begin
/dictsize Encoding length def
mfont0 /Mcbbox0 dictsize dict put

% temporarily redefine printmchar0 to get code
5 dict begin
/printmchar0 { {} forall } def

Mcbbox0 Encoding gclef get [ 1790.0 0 -915.0 -1605.0 865.0 3015.0 ] put
Mcbbox0 Encoding fclef get [ 1840.0 0 -1015.0 -1705.0 815.0 655.0 ] put
Mcbbox0 Encoding cclef get [ 1540.0 0 -765.0 -1245.0 765.0 1255.0 ] put
Mcbbox0 Encoding dblwhole get [ 1090.0 0 -535.0 -605.0 545.0 615.0 ] put
Mcbbox0 Encoding 1n get [ 1080.0 0 -535.0 -335.0 535.0 345.0 ] put
Mcbbox0 Encoding 2n get [ 880.0 0 -435.0 -345.0 435.0 355.0 ] put
Mcbbox0 Encoding 4n get [ 840.0 0 -415.0 -335.0 415.0 345.0 ] put
Mcbbox0 Encoding upflag get [ 640.0 0 -335.0 -5.0 295.0 1715.0 ] put
Mcbbox0 Encoding dnflag get [ 640.0 0 -335.0 -1705.0 295.0 15.0 ] put
Mcbbox0 Encoding qwhrest get [ 340.0 0 -165.0 -605.0 165.0 615.0 ] put
Mcbbox0 Encoding dwhrest get [ 340.0 0 -165.0 -5.0 165.0 615.0 ] put
Mcbbox0 Encoding 1rest get [ 1540.0 0 -765.0 -15.0 765.0 645.0 ] put
Mcbbox0 Encoding 2rest get [ 1540.0 0 -765.0 -45.0 765.0 315.0 ] put
Mcbbox0 Encoding 4rest get [ 650.0 0 -345.0 -885.0 295.0 995.0 ] put
Mcbbox0 Encoding 8rest get [ 750.0 0 -305.0 -625.0 435.0 485.0 ] put
Mcbbox0 Encoding 16rest get [ 830.0 0 -415.0 -1215.0 405.0 485.0 ] put
Mcbbox0 Encoding 32rest get [ 940.0 0 -415.0 -1215.0 515.0 1085.0 ] put
Mcbbox0 Encoding 64rest get [ 1040.0 0 -515.0 -1515.0 515.0 1085.0 ] put
Mcbbox0 Encoding 128rest get [ 1140.0 0 -515.0 -1515.0 615.0 1685.0 ] put
Mcbbox0 Encoding 256rest get [ 1250.0 0 -625.0 -2115.0 615.0 1685.0 ] put
Mcbbox0 Encoding ll1rest get [ 840.0 0 -415.0 -15.0 415.0 625.0 ] put
Mcbbox0 Encoding ll2rest get [ 840.0 0 -415.0 -15.0 415.0 325.0 ] put
Mcbbox0 Encoding dot get [ 280.0 0 -135.0 -125.0 135.0 135.0 ] put
Mcbbox0 Encoding nat get [ 520.0 0 -255.0 -855.0 255.0 865.0 ] put
Mcbbox0 Encoding sharp get [ 700.0 0 -345.0 -935.0 345.0 945.0 ] put
Mcbbox0 Encoding flat get [ 580.0 0 -295.0 -405.0 275.0 1115.0 ] put
Mcbbox0 Encoding dblsharp get [ 720.0 0 -355.0 -345.0 355.0 355.0 ] put
Mcbbox0 Encoding dblflat get [ 1160.0 0 -585.0 -405.0 565.0 1115.0 ] put
Mcbbox0 Encoding xnote get [ 880.0 0 -435.0 -365.0 435.0 375.0 ] put
Mcbbox0 Encoding dwhdiamond get [ 950.0 0 -465.0 -605.0 475.0 615.0 ] put
Mcbbox0 Encoding diamond get [ 880.0 0 -435.0 -305.0 435.0 315.0 ] put
Mcbbox0 Encoding filldiamond get [ 880.0 0 -435.0 -305.0 435.0 315.0 ] put
Mcbbox0 Encoding up2n get [ 880.0 0 -435.0 -345.0 435.0 2115.0 ] put
Mcbbox0 Encoding dn2n get [ 880.0 0 -435.0 -2105.0 435.0 355.0 ] put
Mcbbox0 Encoding up4n get [ 850.0 0 -415.0 -335.0 425.0 2115.0 ] put
Mcbbox0 Encoding dn4n get [ 840.0 0 -415.0 -2105.0 415.0 345.0 ] put
Mcbbox0 Encoding com get [ 1110.0 0 -585.0 -645.0 515.0 655.0 ] put
Mcbbox0 Encoding cut get [ 1110.0 0 -585.0 -905.0 515.0 915.0 ] put
Mcbbox0 Encoding begped get [ 470.0 0 -245.0 -45.0 215.0 615.0 ] put
Mcbbox0 Encoding pedal get [ 1040.0 0 -515.0 -45.0 515.0 675.0 ] put
Mcbbox0 Encoding endped get [ 480.0 0 -215.0 -45.0 255.0 615.0 ] put
Mcbbox0 Encoding dnbow get [ 810.0 0 -395.0 -5.0 405.0 915.0 ] put
Mcbbox0 Encoding upbow get [ 720.0 0 -355.0 -115.0 355.0 925.0 ] put
Mcbbox0 Encoding wedge get [ 340.0 0 -165.0 -5.0 165.0 515.0 ] put
Mcbbox0 Encoding uwedge get [ 340.0 0 -165.0 -5.0 165.0 515.0 ] put
Mcbbox0 Encoding ferm get [ 1640.0 0 -815.0 -5.0 815.0 1015.0 ] put
Mcbbox0 Encoding uferm get [ 1640.0 0 -815.0 -5.0 815.0 1015.0 ] put
Mcbbox0 Encoding sign get [ 1340.0 0 -665.0 -825.0 665.0 835.0 ] put
Mcbbox0 Encoding coda get [ 1640.0 0 -815.0 -855.0 815.0 865.0 ] put
Mcbbox0 Encoding mor get [ 1320.0 0 -655.0 -285.0 655.0 295.0 ] put
Mcbbox0 Encoding invmor get [ 1320.0 0 -655.0 -455.0 655.0 465.0 ] put
Mcbbox0 Encoding turn get [ 1300.0 0 -645.0 -335.0 645.0 345.0 ] put
Mcbbox0 Encoding invturn get [ 1300.0 0 -645.0 -335.0 645.0 345.0 ] put
Mcbbox0 Encoding acc_gt get [ 1170.0 0 -525.0 -345.0 635.0 355.0 ] put
Mcbbox0 Encoding acc_hat get [ 780.0 0 -385.0 -5.0 385.0 875.0 ] put
Mcbbox0 Encoding acc_uhat get [ 780.0 0 -385.0 -5.0 385.0 875.0 ] put
Mcbbox0 Encoding tr get [ 1440.0 0 -715.0 -5.0 715.0 1015.0 ] put
Mcbbox0 Encoding leg get [ 840.0 0 -415.0 -55.0 415.0 65.0 ] put
Mcbbox0 Encoding rr get [ 940.0 0 -465.0 -25.0 465.0 1035.0 ] put
Mcbbox0 Encoding dim get [ 540.0 0 -265.0 -15.0 265.0 905.0 ] put
Mcbbox0 Encoding halfdim get [ 760.0 0 -375.0 -15.0 375.0 1015.0 ] put
Mcbbox0 Encoding triangle get [ 800.0 0 -395.0 -45.0 395.0 785.0 ] put
Mcbbox0 Encoding measrpt get [ 1300.0 0 -645.0 -675.0 645.0 685.0 ] put
Mcbbox0 Encoding copyright get [ 920.0 0 -455.0 -45.0 455.0 855.0 ] put
Mcbbox0 Encoding up8n get [ 1390.0 0 -745.0 -335.0 635.0 2115.0 ] put
Mcbbox0 Encoding dn8n get [ 840.0 0 -415.0 -2105.0 415.0 345.0 ] put
Mcbbox0 Encoding up16n get [ 1390.0 0 -745.0 -335.0 635.0 2115.0 ] put
Mcbbox0 Encoding dn16n get [ 840.0 0 -415.0 -2105.0 415.0 345.0 ] put
Mcbbox0 Encoding up32n get [ 1390.0 0 -745.0 -335.0 635.0 2595.0 ] put
Mcbbox0 Encoding dn32n get [ 840.0 0 -415.0 -2585.0 415.0 345.0 ] put
Mcbbox0 Encoding up64n get [ 1390.0 0 -745.0 -335.0 635.0 3075.0 ] put
Mcbbox0 Encoding dn64n get [ 840.0 0 -415.0 -3065.0 415.0 345.0 ] put
Mcbbox0 Encoding up128n get [ 1390.0 0 -745.0 -335.0 635.0 3555.0 ] put
Mcbbox0 Encoding dn128n get [ 840.0 0 -415.0 -3545.0 415.0 345.0 ] put
Mcbbox0 Encoding up256n get [ 1390.0 0 -745.0 -335.0 635.0 3975.0 ] put
Mcbbox0 Encoding dn256n get [ 840.0 0 -415.0 -3965.0 415.0 345.0 ] put

end
end

/Mfont0 mfont0 definefont


% find size of Encoding and make a dictionary
% that size for bounding box information
mfont1 begin
/dictsize Encoding length def
mfont1 /Mcbbox1 dictsize dict put

% temporarily redefine printmchar1 to get code
5 dict begin
/printmchar1 { {} forall } def

Mcbbox1 Encoding dwhrighttriangle get [ 950.0 0 -465.0 -605.0 475.0 615.0 ] put
Mcbbox1 Encoding righttriangle get [ 880.0 0 -435.0 -305.0 435.0 285.0 ] put
Mcbbox1 Encoding fillrighttriangle get [ 880.0 0 -435.0 -305.0 435.0 285.0 ] put
Mcbbox1 Encoding udwhrighttriangle get [ 950.0 0 -465.0 -605.0 475.0 615.0 ] put
Mcbbox1 Encoding urighttriangle get [ 880.0 0 -435.0 -275.0 435.0 315.0 ] put
Mcbbox1 Encoding ufillrighttriangle get [ 880.0 0 -435.0 -275.0 435.0 315.0 ] put
Mcbbox1 Encoding dwhrectangle get [ 950.0 0 -465.0 -605.0 475.0 615.0 ] put
Mcbbox1 Encoding rectangle get [ 880.0 0 -435.0 -275.0 435.0 285.0 ] put
Mcbbox1 Encoding fillrectangle get [ 880.0 0 -435.0 -275.0 435.0 285.0 ] put
Mcbbox1 Encoding dwhisostriangle get [ 950.0 0 -465.0 -605.0 475.0 615.0 ] put
Mcbbox1 Encoding isostriangle get [ 880.0 0 -435.0 -275.0 435.0 315.0 ] put
Mcbbox1 Encoding fillisostriangle get [ 880.0 0 -435.0 -275.0 435.0 315.0 ] put
Mcbbox1 Encoding dwhpiewedge get [ 950.0 0 -465.0 -605.0 475.0 615.0 ] put
Mcbbox1 Encoding piewedge get [ 880.0 0 -435.0 -305.0 435.0 285.0 ] put
Mcbbox1 Encoding fillpiewedge get [ 880.0 0 -435.0 -305.0 435.0 285.0 ] put
Mcbbox1 Encoding dwhsemicircle get [ 950.0 0 -465.0 -605.0 475.0 615.0 ] put
Mcbbox1 Encoding semicircle get [ 880.0 0 -435.0 -305.0 435.0 285.0 ] put
Mcbbox1 Encoding fillsemicircle get [ 880.0 0 -435.0 -305.0 435.0 285.0 ] put
Mcbbox1 Encoding dwhslashhead get [ 1410.0 0 -695.0 -725.0 705.0 735.0 ] put
Mcbbox1 Encoding slashhead get [ 1380.0 0 -685.0 -725.0 685.0 735.0 ] put
Mcbbox1 Encoding fillslashhead get [ 1300.0 0 -645.0 -675.0 645.0 685.0 ] put
Mcbbox1 Encoding blankhead get [ 880.0 0 -435.0 -275.0 435.0 285.0 ] put

end
end

/Mfont1 mfont1 definefont

/flagsep 1.60 300 mul def	 % 1.60 stepsizes
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] >> setpagedevice
%%EndFeature
%%EndProlog
%%Page: 1 1
save
0.750000 0.750000 scale
%  S_SSV
(kaleidakustikon_11.mup) inputfile
7 linenum
%  S_SSV
15 linenum
%  S_SSV
18 linenum
%  S_SSV
21 linenum
%  S_FEED
27 linenum
88.79 941.83 768.00 5 1.000000 1.000000 staff
88.79 866.87 768.00 5 1.000000 1.000000 staff
87.79 953.83 854.87 brace
0.70 setlinewidth
88.79 953.83 moveto
88.79 854.87 lineto stroke
%  S_CLEFSIG
27 linenum
100.58 935.83 1.000000 gclef
100.83 872.87 1.000000 fclef
116.62 941.83 1.000000 flat
116.62 860.87 1.000000 flat
/NewCenturySchlbk-Bold findfont
16 scalefont
setfont
122.36 941.83 moveto
(3) show
/NewCenturySchlbk-Bold findfont
16 scalefont
setfont
122.36 929.91 moveto
(4) show
/NewCenturySchlbk-Bold findfont
16 scalefont
setfont
122.36 866.87 moveto
(3) show
/NewCenturySchlbk-Bold findfont
16 scalefont
setfont
122.36 854.95 moveto
(4) show
%  S_CHHEAD
27 linenum
%  S_STAFF
% staff 1
save
145.61 923.83 1.000000 4n
154.88 926.83 1.000000 dot
139.38 923.83 moveto
151.84 923.83 lineto stroke
149.29 924.58 moveto
149.29 943.33 lineto stroke
164.19 923.83 1.000000 4n
157.96 923.83 moveto
170.42 923.83 lineto stroke
167.87 924.58 moveto
167.87 943.33 lineto stroke
newpath
148.94 944.83 moveto
168.22 944.83 lineto
168.22 941.83 lineto
148.94 941.83 lineto
closepath
fill
newpath
167.52 939.83 moveto
159.46 939.83 lineto
159.46 936.83 lineto
167.52 936.83 lineto
closepath
fill
restore
%  S_STAFF
% staff 2
save
145.61 866.87 1.000000 4rest
restore
%  S_BAR
29 linenum
0.70 setlinewidth
174.12 953.83 moveto
174.12 929.83 lineto stroke
174.12 878.87 moveto
174.12 854.87 lineto stroke
%  S_CHHEAD
32 linenum
%  S_STAFF
% staff 1
save
184.36 932.83 1.000000 4n
193.62 932.83 1.000000 dot
188.04 933.58 moveto
188.04 953.83 lineto stroke
214.93 938.83 1.000000 4n
211.25 938.08 moveto
211.25 920.84 lineto stroke
226.61 944.83 1.000000 4n
222.93 944.08 moveto
222.93 925.09 lineto stroke
239.13 953.83 1.000000 4n
235.45 953.08 moveto
235.45 929.65 lineto stroke
newpath
210.90 922.34 moveto
235.80 931.15 lineto
235.80 928.15 lineto
210.90 919.34 lineto
closepath
fill
restore
%  S_STAFF
% staff 2
save
184.36 851.87 1.000000 4n
0.70 setlinewidth
188.04 852.62 moveto
188.04 872.87 lineto stroke
203.43 884.87 1.000000 4n
197.20 884.87 moveto
209.66 884.87 lineto stroke
203.43 878.87 1.000000 4n
203.43 872.87 1.000000 4n
199.75 884.12 moveto
199.75 851.87 lineto stroke
226.61 884.87 1.000000 4n
220.38 884.87 moveto
232.85 884.87 lineto stroke
226.61 878.87 1.000000 4n
226.61 872.87 1.000000 4n
222.93 884.12 moveto
222.93 851.87 lineto stroke
restore
%  S_BAR
34 linenum
0.70 setlinewidth
253.21 953.83 moveto
253.21 929.83 lineto stroke
253.21 878.87 moveto
253.21 854.87 lineto stroke
%  S_CHHEAD
38 linenum
%  S_STAFF
% staff 1
save
262.01 959.83 1.000000 4n
255.78 959.83 moveto
268.24 959.83 lineto stroke
258.33 959.08 moveto
258.33 935.72 lineto stroke
273.69 953.83 1.000000 4n
270.01 953.08 moveto
270.01 935.72 lineto stroke
285.37 974.83 1.000000 4n
279.14 971.83 moveto
291.60 971.83 lineto stroke
279.14 965.83 moveto
289.71 965.83 lineto stroke
279.14 959.83 moveto
289.71 959.83 lineto stroke
281.69 974.08 moveto
281.69 935.72 lineto stroke
297.05 965.83 1.000000 4n
292.21 965.83 moveto
303.28 965.83 lineto stroke
292.71 959.83 moveto
301.39 959.83 lineto stroke
293.37 965.08 moveto
293.37 935.72 lineto stroke
308.73 959.83 1.000000 4n
303.89 959.83 moveto
314.96 959.83 lineto stroke
305.05 959.08 moveto
305.05 935.72 lineto stroke
321.25 953.83 1.000000 4n
317.56 953.08 moveto
317.56 935.72 lineto stroke
newpath
257.97 937.22 moveto
317.91 937.22 lineto
317.91 934.22 lineto
257.97 934.22 lineto
closepath
fill
restore
%  S_STAFF
% staff 2
save
262.01 851.87 1.000000 4n
0.70 setlinewidth
265.69 852.62 moveto
265.69 872.87 lineto stroke
285.37 884.87 1.000000 4n
279.14 884.87 moveto
291.60 884.87 lineto stroke
285.37 878.87 1.000000 4n
285.37 872.87 1.000000 4n
281.69 884.12 moveto
281.69 851.87 lineto stroke
308.73 884.87 1.000000 4n
302.50 884.87 moveto
314.96 884.87 lineto stroke
308.73 878.87 1.000000 4n
308.73 872.87 1.000000 4n
305.05 884.12 moveto
305.05 851.87 lineto stroke
restore
%  S_BAR
40 linenum
0.70 setlinewidth
335.32 953.83 moveto
335.32 929.83 lineto stroke
335.32 878.87 moveto
335.32 854.87 lineto stroke
%  S_CHHEAD
44 linenum
%  S_STAFF
% staff 1
save
344.12 950.83 1.000000 4n
340.44 950.08 moveto
340.44 934.18 lineto stroke
355.80 956.83 1.000000 4n
352.12 956.08 moveto
352.12 933.10 lineto stroke
367.48 962.83 1.000000 4n
361.25 959.83 moveto
373.71 959.83 lineto stroke
363.80 962.08 moveto
363.80 932.02 lineto stroke
379.16 956.83 1.000000 4n
375.48 956.08 moveto
375.48 930.94 lineto stroke
390.84 950.83 1.000000 4n
387.16 950.08 moveto
387.16 929.86 lineto stroke
403.36 944.83 1.000000 4n
399.68 944.08 moveto
399.68 928.70 lineto stroke
newpath
340.09 935.68 moveto
400.03 930.20 lineto
400.03 927.20 lineto
340.09 932.68 lineto
closepath
fill
restore
%  S_STAFF
% staff 2
save
344.12 863.87 1.000000 4n
0.70 setlinewidth
347.80 864.62 moveto
347.80 884.87 lineto stroke
367.48 884.87 1.000000 4n
361.25 884.87 moveto
373.71 884.87 lineto stroke
360.12 881.87 1.000000 4n
367.48 875.87 1.000000 4n
363.80 884.12 moveto
363.80 854.87 lineto stroke
390.84 884.87 1.000000 4n
384.61 884.87 moveto
397.07 884.87 lineto stroke
383.48 881.87 1.000000 4n
390.84 875.87 1.000000 4n
387.16 884.12 moveto
387.16 854.87 lineto stroke
restore
%  S_BAR
46 linenum
0.70 setlinewidth
417.43 953.83 moveto
417.43 929.83 lineto stroke
417.43 878.87 moveto
417.43 854.87 lineto stroke
%  S_CHHEAD
50 linenum
%  S_STAFF
% staff 1
save
427.68 941.83 1.000000 4n
436.94 944.83 1.000000 dot
423.99 941.08 moveto
423.99 920.83 lineto stroke
461.64 941.83 1.000000 4n
453.19 941.83 1.000000 nat
457.96 941.08 moveto
457.96 923.33 lineto stroke
473.05 944.83 1.000000 4n
469.37 944.08 moveto
469.37 923.33 lineto stroke
491.71 941.83 1.000000 4n
482.94 941.83 1.000000 flat
488.03 941.08 moveto
488.03 923.33 lineto stroke
newpath
457.61 924.83 moveto
488.38 924.83 lineto
488.38 921.83 lineto
457.61 921.83 lineto
closepath
fill
restore
%  S_STAFF
% staff 2
save
427.68 863.87 1.000000 4n
0.70 setlinewidth
431.36 864.62 moveto
431.36 884.87 lineto stroke
446.30 884.87 1.000000 4n
440.07 884.87 moveto
452.53 884.87 lineto stroke
446.30 875.87 1.000000 4n
446.30 869.87 1.000000 4n
442.62 884.12 moveto
442.62 848.87 lineto stroke
473.05 884.87 1.000000 4n
466.82 884.87 moveto
479.28 884.87 lineto stroke
473.05 875.87 1.000000 4n
473.05 869.87 1.000000 4n
469.37 884.12 moveto
469.37 848.87 lineto stroke
restore
%  S_BAR
52 linenum
0.70 setlinewidth
505.78 953.83 moveto
505.78 929.83 lineto stroke
505.78 878.87 moveto
505.78 854.87 lineto stroke
%  S_CHHEAD
56 linenum
%  S_STAFF
% staff 1
save
514.59 938.83 1.000000 4n
510.90 938.08 moveto
510.90 921.77 lineto stroke
526.27 953.83 1.000000 4n
522.58 953.08 moveto
522.58 923.38 lineto stroke
537.95 950.83 1.000000 4n
534.26 950.08 moveto
534.26 924.98 lineto stroke
549.63 953.83 1.000000 4n
545.94 953.08 moveto
545.94 926.58 lineto stroke
561.31 956.83 1.000000 4n
557.62 956.08 moveto
557.62 928.19 lineto stroke
573.83 953.83 1.000000 4n
570.14 953.08 moveto
570.14 929.90 lineto stroke
newpath
510.55 923.27 moveto
570.49 931.40 lineto
570.49 928.40 lineto
510.55 920.27 lineto
closepath
fill
restore
%  S_STAFF
% staff 2
save
514.59 851.87 1.000000 4n
0.70 setlinewidth
518.27 852.62 moveto
518.27 872.87 lineto stroke
537.95 884.87 1.000000 4n
531.71 884.87 moveto
544.18 884.87 lineto stroke
537.95 878.87 1.000000 4n
537.95 872.87 1.000000 4n
534.26 884.12 moveto
534.26 851.87 lineto stroke
561.31 884.87 1.000000 4n
555.07 884.87 moveto
567.54 884.87 lineto stroke
561.31 878.87 1.000000 4n
561.31 872.87 1.000000 4n
557.62 884.12 moveto
557.62 851.87 lineto stroke
restore
%  S_BAR
58 linenum
0.70 setlinewidth
587.90 953.83 moveto
587.90 929.83 lineto stroke
587.90 878.87 moveto
587.90 854.87 lineto stroke
%  S_CHHEAD
62 linenum
%  S_STAFF
% staff 1
save
596.92 935.83 1.000000 4n
593.23 935.08 moveto
593.23 909.94 lineto stroke
608.60 941.83 1.000000 4n
604.91 941.08 moveto
604.91 911.12 lineto stroke
620.28 947.83 1.000000 4n
616.59 947.08 moveto
616.59 912.30 lineto stroke
631.96 956.83 1.000000 4n
628.27 956.08 moveto
628.27 913.48 lineto stroke
643.64 962.83 1.000000 4n
637.40 959.83 moveto
649.87 959.83 lineto stroke
639.95 962.08 moveto
639.95 914.66 lineto stroke
656.15 932.83 1.000000 4n
652.47 932.08 moveto
652.47 915.92 lineto stroke
newpath
592.88 911.44 moveto
652.82 917.42 lineto
652.82 914.42 lineto
592.88 908.44 lineto
closepath
fill
restore
%  S_STAFF
% staff 2
save
596.92 887.87 1.000000 2n
606.40 887.87 1.000000 dot
0.70 setlinewidth
590.47 884.87 moveto
603.36 884.87 lineto stroke
596.92 881.87 1.000000 2n
606.40 881.87 1.000000 dot
593.02 887.12 moveto
593.02 860.87 lineto stroke
restore
%  S_BAR
64 linenum
0.70 setlinewidth
670.23 953.83 moveto
670.23 929.83 lineto stroke
670.23 878.87 moveto
670.23 854.87 lineto stroke
%  S_CHHEAD
68 linenum
%  S_STAFF
% staff 1
save
683.01 929.83 1.000000 4n
686.70 930.58 moveto
686.70 950.83 lineto stroke
694.58 932.83 0.583333 4n
696.58 933.32 moveto
696.58 947.83 lineto stroke
698.35 947.83 0.583333 dnflag
newpath
693.33 938.08 moveto
699.83 945.08 lineto
699.83 943.58 lineto
693.33 936.58 lineto
closepath
fill
706.29 929.83 1.000000 4n
715.55 932.83 1.000000 dot
709.97 930.58 moveto
709.97 948.60 lineto stroke
726.70 926.83 1.000000 4n
730.38 927.58 moveto
730.38 947.16 lineto stroke
737.03 929.83 1.000000 4n
746.29 932.83 1.000000 dot
740.71 930.58 moveto
740.71 946.43 lineto stroke
757.72 923.83 1.000000 4n
751.49 923.83 moveto
763.95 923.83 lineto stroke
761.40 924.58 moveto
761.40 944.97 lineto stroke
newpath
709.62 950.10 moveto
761.75 946.47 lineto
761.75 943.47 lineto
709.62 947.10 lineto
closepath
fill
newpath
730.03 943.66 moveto
721.97 944.23 lineto
721.97 941.23 lineto
730.03 940.66 lineto
closepath
fill
newpath
761.05 941.47 moveto
752.99 942.04 lineto
752.99 939.04 lineto
761.05 938.47 lineto
closepath
fill
restore
%  S_STAFF
% staff 2
save
679.12 863.87 1.000000 4n
0.70 setlinewidth
682.80 864.62 moveto
682.80 896.58 lineto stroke
694.52 875.87 1.000000 4n
698.21 876.62 moveto
698.21 897.77 lineto stroke
706.29 881.87 1.000000 4n
709.97 882.62 moveto
709.97 898.68 lineto stroke
717.70 875.87 1.000000 4n
721.38 876.62 moveto
721.38 899.56 lineto stroke
737.03 881.87 1.000000 4n
740.71 882.62 moveto
740.71 901.06 lineto stroke
748.44 875.87 1.000000 4n
752.12 876.62 moveto
752.12 901.94 lineto stroke
newpath
682.45 898.08 moveto
752.47 903.44 lineto
752.47 900.44 lineto
682.45 895.08 lineto
closepath
fill
686.91 863.87 1.000000 2n
696.39 863.87 1.000000 dot
683.01 863.12 moveto
683.01 843.87 lineto stroke
restore
%  S_BAR
71 linenum
0.70 setlinewidth
767.65 953.83 moveto
767.65 929.83 lineto stroke
767.65 878.87 moveto
767.65 854.87 lineto stroke
%  S_FEED
74 linenum
50.50 782.87 768.00 5 1.000000 1.000000 staff
/Times-Roman findfont
11 scalefont
setfont
55.00 809.99 moveto
(9) show
50.50 725.72 768.00 5 1.000000 1.000000 staff
49.50 794.87 713.72 brace
50.50 794.87 moveto
50.50 713.72 lineto stroke
%  S_CLEFSIG
74 linenum
62.29 776.87 1.000000 gclef
62.54 731.72 1.000000 fclef
78.33 782.87 1.000000 flat
78.33 719.72 1.000000 flat
%  S_CHHEAD
74 linenum
%  S_STAFF
% staff 1
save
97.04 773.87 1.000000 4n
100.72 774.62 moveto
100.72 794.87 lineto stroke
113.53 782.87 1.000000 4rest
restore
%  S_STAFF
% staff 2
save
97.04 737.72 1.000000 4n
97.04 731.72 1.000000 4n
0.70 setlinewidth
93.36 736.97 moveto
93.36 710.72 lineto stroke
113.53 710.72 1.000000 4n
117.22 711.47 moveto
117.22 731.72 lineto stroke
restore
%  S_BAR
76 linenum
143.92 785.87 1.000000 dot
143.92 779.87 1.000000 dot
129.92 785.87 1.000000 dot
129.92 779.87 1.000000 dot
3.00 setlinewidth
134.42 794.87 moveto
134.42 770.87 lineto stroke
139.42 794.87 moveto
139.42 770.87 lineto stroke
0.70 setlinewidth
143.92 728.72 1.000000 dot
143.92 722.72 1.000000 dot
129.92 728.72 1.000000 dot
129.92 722.72 1.000000 dot
3.00 setlinewidth
134.42 737.72 moveto
134.42 713.72 lineto stroke
139.42 737.72 moveto
139.42 713.72 lineto stroke
0.70 setlinewidth
%  S_SSV
78 linenum
%  S_CLEFSIG
84 linenum
150.16 782.87 1.000000 flat
155.65 791.87 1.000000 flat
161.14 779.87 1.000000 flat
166.63 788.87 1.000000 flat
150.16 719.72 1.000000 flat
155.65 728.72 1.000000 flat
161.14 716.72 1.000000 flat
166.63 725.72 1.000000 flat
%  S_CHHEAD
84 linenum
%  S_STAFF
% staff 1
save
177.40 782.87 1.000000 4rest
restore
%  S_STAFF
% staff 2
save
177.40 743.72 1.000000 4n
186.67 746.72 1.000000 dot
0.70 setlinewidth
171.17 743.72 moveto
183.63 743.72 lineto stroke
173.72 742.97 moveto
173.72 724.22 lineto stroke
195.72 743.72 1.000000 4n
189.49 743.72 moveto
201.95 743.72 lineto stroke
192.04 742.97 moveto
192.04 724.22 lineto stroke
newpath
173.37 725.72 moveto
192.39 725.72 lineto
192.39 722.72 lineto
173.37 722.72 lineto
closepath
fill
newpath
191.69 730.72 moveto
183.62 730.72 lineto
183.62 727.72 lineto
191.69 727.72 lineto
closepath
fill
restore
%  S_BAR
86 linenum
0.70 setlinewidth
204.36 794.87 moveto
204.36 770.87 lineto stroke
204.36 737.72 moveto
204.36 713.72 lineto stroke
%  S_CHHEAD
89 linenum
%  S_STAFF
% staff 1
save
253.15 785.87 1.000000 4n
262.42 785.87 1.000000 dot
249.47 785.12 moveto
249.47 766.37 lineto stroke
272.24 785.87 1.000000 4n
268.56 785.12 moveto
268.56 766.37 lineto stroke
newpath
249.12 767.87 moveto
268.91 767.87 lineto
268.91 764.87 lineto
249.12 764.87 lineto
closepath
fill
newpath
268.21 772.87 moveto
260.14 772.87 lineto
260.14 769.87 lineto
268.21 769.87 lineto
closepath
fill
restore
%  S_STAFF
% staff 2
save
212.90 785.87 1.000000 4n
/Times-Roman findfont
12 scalefont
setfont
206.98 742.74 moveto
209.21 742.74 1.000000 dot
211.45 742.74 moveto
0.70 setlinewidth
209.21 785.12 moveto
209.21 747.00 lineto stroke
222.96 776.87 1.000000 4n
/Times-Roman findfont
12 scalefont
setfont
217.05 741.32 moveto
219.28 741.32 1.000000 dot
221.51 741.32 moveto
219.28 776.12 moveto
219.28 744.48 lineto stroke
233.02 770.87 1.000000 4n
/Times-Roman findfont
12 scalefont
setfont
227.11 736.58 moveto
229.34 736.58 1.000000 dot
231.57 736.58 moveto
229.34 770.12 moveto
229.34 741.95 lineto stroke
243.09 743.72 1.000000 4n
236.86 743.72 moveto
249.32 743.72 lineto stroke
/Times-Roman findfont
12 scalefont
setfont
240.86 750.33 moveto
243.09 750.33 1.000000 dot
245.32 750.33 moveto
239.41 742.97 moveto
239.41 718.28 lineto stroke
253.15 734.72 1.000000 4n
/Times-Roman findfont
12 scalefont
setfont
250.92 741.33 moveto
253.15 741.33 1.000000 dot
255.38 741.33 moveto
249.47 733.97 moveto
249.47 715.75 lineto stroke
263.22 728.72 1.000000 4n
/Times-Roman findfont
12 scalefont
setfont
260.98 734.22 moveto
263.22 734.22 1.000000 dot
265.45 734.22 moveto
259.53 727.97 moveto
259.53 713.23 lineto stroke
newpath
208.86 748.50 moveto
259.88 714.73 lineto
259.88 711.73 lineto
208.86 745.50 lineto
closepath
fill
restore
%  S_BAR
91 linenum
0.70 setlinewidth
280.88 794.87 moveto
280.88 770.87 lineto stroke
280.88 737.72 moveto
280.88 713.72 lineto stroke
%  S_CHHEAD
95 linenum
%  S_STAFF
% staff 1
save
289.41 806.87 1.000000 4n
283.18 806.87 moveto
295.64 806.87 lineto stroke
283.18 800.87 moveto
293.64 800.87 lineto stroke
285.73 806.12 moveto
285.73 784.37 lineto stroke
299.48 803.87 1.000000 4n
294.74 800.87 moveto
304.21 800.87 lineto stroke
295.79 803.12 moveto
295.79 782.75 lineto stroke
309.54 803.87 1.000000 4n
304.81 800.87 moveto
315.77 800.87 lineto stroke
305.86 803.12 moveto
305.86 781.12 lineto stroke
319.60 797.87 1.000000 4n
315.92 797.12 moveto
315.92 779.50 lineto stroke
329.67 797.87 1.000000 4n
325.99 797.12 moveto
325.99 777.88 lineto stroke
340.39 791.87 1.000000 4n
336.71 791.12 moveto
336.71 776.15 lineto stroke
newpath
285.38 785.87 moveto
337.06 777.65 lineto
337.06 774.65 lineto
285.38 782.87 lineto
closepath
fill
restore
%  S_STAFF
% staff 2
save
289.41 722.72 1.000000 4n
0.70 setlinewidth
285.73 721.97 moveto
285.73 705.57 lineto stroke
299.48 743.72 1.000000 4n
293.24 743.72 moveto
305.71 743.72 lineto stroke
295.79 742.97 moveto
295.79 707.18 lineto stroke
309.54 740.72 1.000000 4n
309.54 734.72 1.000000 4n
305.86 739.97 moveto
305.86 708.79 lineto stroke
319.60 743.72 1.000000 4n
313.37 743.72 moveto
325.84 743.72 lineto stroke
315.92 742.97 moveto
315.92 710.40 lineto stroke
329.67 740.72 1.000000 4n
329.67 734.72 1.000000 4n
325.99 739.97 moveto
325.99 712.02 lineto stroke
340.39 743.72 1.000000 4n
334.16 743.72 moveto
346.62 743.72 lineto stroke
336.71 742.97 moveto
336.71 713.73 lineto stroke
newpath
285.38 707.07 moveto
337.06 715.23 lineto
337.06 712.23 lineto
285.38 704.07 lineto
closepath
fill
restore
%  S_BAR
97 linenum
0.70 setlinewidth
352.22 794.87 moveto
352.22 770.87 lineto stroke
352.22 737.72 moveto
352.22 713.72 lineto stroke
%  S_CHHEAD
101 linenum
%  S_STAFF
% staff 1
save
360.76 794.87 1.000000 4n
357.07 794.12 moveto
357.07 773.87 lineto stroke
360.10 773.87 1.000000 upflag
370.82 800.87 1.000000 4n
364.59 800.87 moveto
377.05 800.87 lineto stroke
367.14 800.12 moveto
367.14 779.87 lineto stroke
390.95 794.87 1.000000 4n
387.27 794.12 moveto
387.27 777.37 lineto stroke
401.01 800.87 1.000000 4n
394.78 800.87 moveto
407.24 800.87 lineto stroke
397.33 800.12 moveto
397.33 777.37 lineto stroke
411.73 794.87 1.000000 4n
408.05 794.12 moveto
408.05 777.37 lineto stroke
newpath
386.92 778.87 moveto
408.40 778.87 lineto
408.40 775.87 lineto
386.92 775.87 lineto
closepath
fill
restore
%  S_STAFF
% staff 2
save
360.76 722.72 1.000000 4n
0.70 setlinewidth
357.07 721.97 moveto
357.07 704.75 lineto stroke
370.82 743.72 1.000000 4n
364.59 743.72 moveto
377.05 743.72 lineto stroke
367.14 742.97 moveto
367.14 708.41 lineto stroke
380.88 737.72 1.000000 4n
380.88 731.72 1.000000 4n
377.20 736.97 moveto
377.20 715.22 lineto stroke
390.95 743.72 1.000000 4n
384.71 743.72 moveto
397.18 743.72 lineto stroke
387.27 742.97 moveto
387.27 715.22 lineto stroke
401.01 737.72 1.000000 4n
401.01 731.72 1.000000 4n
397.33 736.97 moveto
397.33 715.22 lineto stroke
411.73 743.72 1.000000 4n
405.50 743.72 moveto
417.97 743.72 lineto stroke
408.05 742.97 moveto
408.05 715.22 lineto stroke
newpath
356.72 706.25 moveto
367.49 709.91 lineto
367.49 706.91 lineto
356.72 703.25 lineto
closepath
fill
newpath
376.85 716.72 moveto
408.40 716.72 lineto
408.40 713.72 lineto
376.85 713.72 lineto
closepath
fill
restore
%  S_BAR
103 linenum
0.70 setlinewidth
423.57 794.87 moveto
423.57 770.87 lineto stroke
423.57 737.72 moveto
423.57 713.72 lineto stroke
%  S_CHHEAD
107 linenum
%  S_STAFF
% staff 1
save
432.10 785.87 1.000000 4n
441.36 785.87 1.000000 dot
428.42 785.12 moveto
428.42 764.87 lineto stroke
462.29 773.87 1.000000 4n
465.97 774.62 moveto
465.97 796.37 lineto stroke
472.35 779.87 1.000000 4n
476.04 780.62 moveto
476.04 796.37 lineto stroke
483.08 773.87 1.000000 4n
486.76 774.62 moveto
486.76 796.37 lineto stroke
newpath
465.62 797.87 moveto
487.11 797.87 lineto
487.11 794.87 lineto
465.62 794.87 lineto
closepath
fill
restore
%  S_STAFF
% staff 2
save
432.10 722.72 1.000000 4n
0.70 setlinewidth
428.42 721.97 moveto
428.42 704.75 lineto stroke
442.16 743.72 1.000000 4n
435.93 743.72 moveto
448.39 743.72 lineto stroke
438.48 742.97 moveto
438.48 708.41 lineto stroke
452.23 737.72 1.000000 4n
452.23 731.72 1.000000 4n
448.54 736.97 moveto
448.54 715.22 lineto stroke
462.29 743.72 1.000000 4n
456.06 743.72 moveto
468.52 743.72 lineto stroke
458.61 742.97 moveto
458.61 715.22 lineto stroke
472.35 737.72 1.000000 4n
472.35 731.72 1.000000 4n
468.67 736.97 moveto
468.67 715.22 lineto stroke
483.08 743.72 1.000000 4n
476.85 743.72 moveto
489.31 743.72 lineto stroke
479.40 742.97 moveto
479.40 715.22 lineto stroke
newpath
428.07 706.25 moveto
438.83 709.91 lineto
438.83 706.91 lineto
428.07 703.25 lineto
closepath
fill
newpath
448.19 716.72 moveto
479.75 716.72 lineto
479.75 713.72 lineto
448.19 713.72 lineto
closepath
fill
restore
%  S_BAR
109 linenum
0.70 setlinewidth
494.91 794.87 moveto
494.91 770.87 lineto stroke
494.91 737.72 moveto
494.91 713.72 lineto stroke
%  S_CHHEAD
113 linenum
%  S_STAFF
% staff 1
save
503.44 770.87 1.000000 4n
507.12 771.62 moveto
507.12 805.37 lineto stroke
513.51 788.87 1.000000 4n
517.19 789.62 moveto
517.19 805.37 lineto stroke
523.57 785.87 1.000000 4n
527.25 786.62 moveto
527.25 805.37 lineto stroke
533.63 782.87 1.000000 4n
537.32 783.62 moveto
537.32 805.37 lineto stroke
543.70 776.87 1.000000 4n
547.38 777.62 moveto
547.38 805.37 lineto stroke
554.42 770.87 1.000000 4n
558.10 771.62 moveto
558.10 805.37 lineto stroke
newpath
506.77 806.87 moveto
558.45 806.87 lineto
558.45 803.87 lineto
506.77 803.87 lineto
closepath
fill
restore
%  S_STAFF
% staff 2
save
503.44 722.72 1.000000 4n
0.70 setlinewidth
499.76 721.97 moveto
499.76 704.75 lineto stroke
513.51 743.72 1.000000 4n
507.27 743.72 moveto
519.74 743.72 lineto stroke
509.82 742.97 moveto
509.82 708.41 lineto stroke
523.57 740.72 1.000000 4n
523.57 734.72 1.000000 4n
519.89 739.97 moveto
519.89 718.22 lineto stroke
533.63 743.72 1.000000 4n
527.40 743.72 moveto
539.87 743.72 lineto stroke
529.95 742.97 moveto
529.95 718.22 lineto stroke
543.70 740.72 1.000000 4n
543.70 734.72 1.000000 4n
540.02 739.97 moveto
540.02 718.22 lineto stroke
554.42 743.72 1.000000 4n
548.19 743.72 moveto
560.65 743.72 lineto stroke
550.74 742.97 moveto
550.74 718.22 lineto stroke
newpath
499.41 706.25 moveto
510.17 709.91 lineto
510.17 706.91 lineto
499.41 703.25 lineto
closepath
fill
newpath
519.54 719.72 moveto
551.09 719.72 lineto
551.09 716.72 lineto
519.54 716.72 lineto
closepath
fill
restore
%  S_BAR
115 linenum
0.70 setlinewidth
566.25 794.87 moveto
566.25 770.87 lineto stroke
566.25 737.72 moveto
566.25 713.72 lineto stroke
%  S_CHHEAD
119 linenum
%  S_STAFF
% staff 1
save
574.79 773.87 1.000000 4n
578.47 774.62 moveto
578.47 798.34 lineto stroke
584.85 773.87 1.000000 4n
588.53 774.62 moveto
588.53 799.46 lineto stroke
594.91 779.87 1.000000 4n
598.60 780.62 moveto
598.60 800.58 lineto stroke
604.98 773.87 1.000000 4n
608.66 774.62 moveto
608.66 801.70 lineto stroke
615.04 785.87 1.000000 4n
618.72 786.62 moveto
618.72 802.82 lineto stroke
625.77 779.87 1.000000 4n
629.45 780.62 moveto
629.45 804.01 lineto stroke
newpath
578.12 799.84 moveto
629.80 805.51 lineto
629.80 802.51 lineto
578.12 796.84 lineto
closepath
fill
restore
%  S_STAFF
% staff 2
save
574.79 722.72 1.000000 4n
0.70 setlinewidth
571.10 721.97 moveto
571.10 704.75 lineto stroke
584.85 743.72 1.000000 4n
578.62 743.72 moveto
591.08 743.72 lineto stroke
581.17 742.97 moveto
581.17 708.41 lineto stroke
594.91 737.72 1.000000 4n
594.91 731.72 1.000000 4n
591.23 736.97 moveto
591.23 715.22 lineto stroke
604.98 743.72 1.000000 4n
598.75 743.72 moveto
611.21 743.72 lineto stroke
601.30 742.97 moveto
601.30 715.22 lineto stroke
615.04 737.72 1.000000 4n
615.04 731.72 1.000000 4n
611.36 736.97 moveto
611.36 715.22 lineto stroke
625.77 743.72 1.000000 4n
619.53 743.72 moveto
632.00 743.72 lineto stroke
622.08 742.97 moveto
622.08 715.22 lineto stroke
newpath
570.75 706.25 moveto
581.52 709.91 lineto
581.52 706.91 lineto
570.75 703.25 lineto
closepath
fill
newpath
590.88 716.72 moveto
622.43 716.72 lineto
622.43 713.72 lineto
590.88 713.72 lineto
closepath
fill
restore
%  S_BAR
121 linenum
0.70 setlinewidth
637.60 794.87 moveto
637.60 770.87 lineto stroke
637.60 737.72 moveto
637.60 713.72 lineto stroke
%  S_CHHEAD
125 linenum
%  S_STAFF
% staff 1
save
646.13 794.87 1.000000 4n
642.45 794.12 moveto
642.45 774.06 lineto stroke
656.19 800.87 1.000000 4n
649.96 800.87 moveto
662.43 800.87 lineto stroke
652.51 800.12 moveto
652.51 771.00 lineto stroke
666.26 794.87 1.000000 4n
662.58 794.12 moveto
662.58 767.95 lineto stroke
676.32 785.87 1.000000 4n
672.64 785.12 moveto
672.64 764.90 lineto stroke
686.39 779.87 1.000000 4n
682.70 779.12 moveto
682.70 761.84 lineto stroke
697.11 773.87 1.000000 4n
693.43 773.12 moveto
693.43 758.59 lineto stroke
newpath
642.10 775.56 moveto
693.78 760.09 lineto
693.78 757.09 lineto
642.10 772.56 lineto
closepath
fill
restore
%  S_STAFF
% staff 2
save
646.13 722.72 1.000000 4n
0.70 setlinewidth
642.45 721.97 moveto
642.45 704.75 lineto stroke
656.19 743.72 1.000000 4n
649.96 743.72 moveto
662.43 743.72 lineto stroke
652.51 742.97 moveto
652.51 708.41 lineto stroke
666.26 737.72 1.000000 4n
666.26 731.72 1.000000 4n
662.58 736.97 moveto
662.58 715.22 lineto stroke
676.32 743.72 1.000000 4n
670.09 743.72 moveto
682.55 743.72 lineto stroke
672.64 742.97 moveto
672.64 715.22 lineto stroke
686.39 737.72 1.000000 4n
686.39 731.72 1.000000 4n
682.70 736.97 moveto
682.70 715.22 lineto stroke
697.11 743.72 1.000000 4n
690.88 743.72 moveto
703.34 743.72 lineto stroke
693.43 742.97 moveto
693.43 715.22 lineto stroke
newpath
642.10 706.25 moveto
652.86 709.91 lineto
652.86 706.91 lineto
642.10 703.25 lineto
closepath
fill
newpath
662.23 716.72 moveto
693.78 716.72 lineto
693.78 713.72 lineto
662.23 713.72 lineto
closepath
fill
restore
%  S_BAR
127 linenum
0.70 setlinewidth
708.94 794.87 moveto
708.94 770.87 lineto stroke
708.94 737.72 moveto
708.94 713.72 lineto stroke
%  S_CHHEAD
130 linenum
%  S_STAFF
% staff 1
save
718.62 785.87 1.000000 2n
718.62 770.87 1.000000 2n
722.52 771.62 moveto
722.52 805.87 lineto stroke
restore
%  S_STAFF
% staff 2
save
718.62 743.72 1.000000 4n
0.70 setlinewidth
712.39 743.72 moveto
724.85 743.72 lineto stroke
718.62 734.72 1.000000 4n
718.62 722.72 1.000000 4n
714.94 742.97 moveto
714.94 702.72 lineto stroke
735.12 701.72 1.000000 4n
728.88 701.72 moveto
741.35 701.72 lineto stroke
728.88 707.72 moveto
741.35 707.72 lineto stroke
738.80 702.47 moveto
738.80 725.72 lineto stroke
restore
%  S_BAR
132 linenum
765.50 785.87 1.000000 dot
765.50 779.87 1.000000 dot
751.50 785.87 1.000000 dot
751.50 779.87 1.000000 dot
3.00 setlinewidth
756.00 794.87 moveto
756.00 770.87 lineto stroke
761.00 794.87 moveto
761.00 770.87 lineto stroke
0.70 setlinewidth
765.50 728.72 1.000000 dot
765.50 722.72 1.000000 dot
751.50 728.72 1.000000 dot
751.50 722.72 1.000000 dot
3.00 setlinewidth
756.00 737.72 moveto
756.00 713.72 lineto stroke
761.00 737.72 moveto
761.00 713.72 lineto stroke
0.70 setlinewidth
%  Printing header/footer
/Times-Roman findfont
12 scalefont
setfont
345.83 998.35 moveto
(Kaleidakustikon Layer 11) show
/Times-Roman findfont
12 scalefont
setfont
408.00 985.61 moveto
showpage
restore
%%Trailer
%%DocumentFonts: /Times-Roman /NewCenturySchlbk-Bold /Mfont0 
%%Pages: 1
