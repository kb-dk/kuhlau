%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: footer.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: atge
%%CreationDate: 19-08-2014, 21:47:45
%%BoundingBox: -1 0 448 26
%%HiResBoundingBox: 0 0 447.8184 25.6221
%%CropBox: 0 0 447.8184 25.6221
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1092 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2014-08-19T21:46:02+02:00"
   xmp:CreatorTool="PScript5.dll Version 5.2.2"
   xmp:ModifyDate="2014-08-19T21:47:16+02:00"
   xmp:MetadataDate="2014-08-19T21:47:16+02:00"
   pdf:Producer="Acrobat Distiller 9.0.0 (Windows)"
   xmpMM:DocumentID="uuid:57fbb53e-6782-4eea-b8f1-6b0c34319cef"
   xmpMM:InstanceID="uuid:63cb5fe5-573a-4b5e-b4a3-8ea0266b6533">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>atge</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Microsoft Word - footer.docx</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -25.622 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-7.62939e-6 0 mo
-7.62939e-6 25.622 li
447.818 25.622 li
447.818 0 li
cp
clp
[1 0 0 1 -56.6929 0 ]ct
false sop
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+TrajanPro-Bold Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /PBAAAA+TrajanPro-Bold def
/FontInfo 8 dict dup begin
/Notice (Copyright 1989, 1999, 2000 Adobe Systems Incorporated. All rights reserved. Trajan is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (TrajanPro-Bold) def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
def
/FontBBox {-248 -284 1528 985} def
end
systemdict begin
dup /Private
15 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-17 -0 638 660 750 775] def
/OtherBlues [-261 -256 -222 -209 301 305 405 408] def
/FamilyBlues [-17 -0 638 656 750 767] def
/FamilyOtherBlues [-273 -255 -252 -239 -214 -209 301 305 405 408] def
/StdHW [47] def
/StdVW [118] def
/StemSnapH [47 55] def
/StemSnapV [118 126] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/space <1C60D8A8C9B83E2D40> |-
/.notdef <1C60D8A8C9B7A73DC56ED86593A26411A239A9F576A4BB06AD4079
CBD73625AFEDCD129CE8B573E3C4C05A38ADB9D43C2E751D7FE69FF5F6F4BCAD
D50244964753D5C819FE275F32A27920BE3EA3D1AFD957ADA922B28CD2CD8E15
58DDDC89C143A1> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/PXPTLY+TrajanPro-Bold /PBAAAA+TrajanPro-Bold findfont ct_VMDictPut
/PXPTLY+TrajanPro-Bold*1 
[32{/.notdef}rp /space 223{/.notdef}rp]
PXPTLY+TrajanPro-Bold nf
PXPTLY+TrajanPro-Bold*1 [7.02 0 0 -7.02 0 0 ]msf
110.7 23.9803 mo
(  )
[2.0997 0 ]xsh
56.7001 30.8803 mo
( )sh
56.7001 39.7606 mo
( )sh
87.037 13.1187 mo
87.037 13.9617 87.037 14.6567 86.993 15.0247 cv
86.957 15.2797 86.914 15.4727 86.737 15.5077 cv
86.658 15.5257 86.552 15.5437 86.473 15.5437 cv
86.42 15.5437 86.402 15.5697 86.402 15.5957 cv
86.402 15.6487 86.446 15.6657 86.543 15.6657 cv
86.808 15.6657 87.363 15.6397 87.407 15.6397 cv
87.495 15.6397 88.607 15.7457 89.365 15.7457 cv
90.863 15.7457 91.657 15.1307 92.036 14.7347 cv
92.53 14.2167 92.988 13.3647 92.988 12.2577 cv
92.988 11.2127 92.574 10.4837 92.133 10.0267 cv
91.084 8.94568 89.471 9.02466 88.598 9.02466 cv
88.069 9.02466 87.513 9.0517 87.407 9.0517 cv
87.363 9.0517 86.808 9.02466 86.411 9.02466 cv
86.314 9.02466 86.27 9.04266 86.27 9.09467 cv
86.27 9.13068 86.305 9.14771 86.34 9.14771 cv
86.42 9.14771 86.57 9.15668 86.64 9.17468 cv
86.931 9.23566 87.002 9.37671 87.019 9.67468 cv
87.037 9.95569 87.037 10.2017 87.037 11.5727 cv
cp
87.778 11.4317 mo
87.778 10.7557 87.778 9.85968 87.786 9.56067 cv
87.786 9.46466 87.813 9.42065 87.892 9.3847 cv
87.963 9.34967 88.289 9.32367 88.465 9.32367 cv
89.515 9.32367 90.52 9.44666 91.348 10.3167 cv
91.71 10.6937 92.195 11.4147 92.195 12.5297 cv
92.195 13.3387 91.948 14.1817 91.489 14.6297 cv
90.969 15.1477 90.211 15.4467 89.391 15.4467 cv
88.351 15.4467 88.007 15.2627 87.892 15.0957 cv
87.822 14.9987 87.804 14.6467 87.795 14.4277 cv
87.786 14.2607 87.778 13.4527 87.778 12.5217 cv
cp
98.055 15.7897 mo
98.62 15.7897 99.29 15.7277 99.642 15.5877 cv
99.801 15.5167 99.819 15.4997 99.871 15.3327 cv
99.96 15.0337 100.066 14.2697 100.066 14.2077 cv
100.066 14.1377 100.048 14.0767 100.004 14.0767 cv
99.951 14.0767 99.933 14.1117 99.916 14.2077 cv
99.889 14.3667 99.775 14.7527 99.589 14.9467 cv
99.237 15.3057 98.717 15.3857 98.055 15.3857 cv
96.168 15.3857 94.872 13.8477 94.872 12.1697 cv
94.872 11.2737 95.022 10.4917 95.666 9.87671 cv
95.974 9.57867 96.521 9.23566 97.694 9.23566 cv
98.47 9.23566 99.148 9.47266 99.457 9.73669 cv
99.686 9.92969 99.827 10.2907 99.827 10.6327 cv
99.827 10.7557 99.836 10.8167 99.898 10.8167 cv
99.951 10.8167 99.969 10.7647 99.977 10.6327 cv
99.986 10.5007 99.986 10.0177 100.004 9.72766 cv
100.021 9.41168 100.048 9.30566 100.048 9.23566 cv
100.048 9.18268 100.03 9.14771 99.933 9.13971 cv
99.651 9.1217 99.369 9.06866 99.034 9.00769 cv
98.602 8.92871 98.108 8.90167 97.756 8.90167 cv
96.398 8.90167 95.595 9.3147 95.066 9.84167 cv
94.282 10.6237 94.079 11.6517 94.079 12.2407 cv
94.079 13.0747 94.29 14.0767 95.146 14.8407 cv
95.842 15.4647 96.733 15.7897 98.055 15.7897 cv
108.054 9.13971 mo
108.037 8.97266 108.01 8.90167 107.949 8.90167 cv
107.887 8.90167 107.852 8.96368 107.816 9.04266 cv
105.224 14.5597 li
102.526 9.03369 li
102.482 8.93671 102.447 8.90167 102.394 8.90167 cv
102.341 8.90167 102.315 8.96368 102.297 9.05969 cv
101.662 14.7877 li
101.627 15.1217 101.6 15.4647 101.309 15.5167 cv
101.177 15.5437 101.116 15.5437 101.045 15.5437 cv
101.001 15.5437 100.957 15.5607 100.957 15.5877 cv
100.957 15.6487 101.018 15.6657 101.107 15.6657 cv
101.345 15.6657 101.768 15.6397 101.847 15.6397 cv
101.918 15.6397 102.341 15.6657 102.667 15.6657 cv
102.773 15.6657 102.826 15.6487 102.826 15.5877 cv
102.826 15.5607 102.791 15.5437 102.755 15.5437 cv
102.703 15.5437 102.57 15.5347 102.42 15.4997 cv
102.288 15.4727 102.191 15.3587 102.191 15.2267 cv
102.191 15.0777 102.191 14.9197 102.2 14.7787 cv
102.553 10.7027 li
102.588 10.7027 li
102.685 10.9397 103.672 13.0487 103.752 13.2067 cv
103.796 13.2947 104.554 14.8147 104.783 15.2447 cv
104.951 15.5607 104.995 15.6487 105.057 15.6487 cv
105.136 15.6487 105.163 15.5697 105.348 15.1827 cv
107.508 10.6147 li
107.534 10.6147 li
107.957 15.1477 li
107.975 15.3057 107.966 15.4557 107.922 15.4647 cv
107.878 15.4727 107.86 15.4907 107.86 15.5257 cv
107.86 15.5697 107.904 15.5957 108.107 15.6137 cv
108.433 15.6397 109.385 15.6657 109.58 15.6657 cv
109.685 15.6657 109.765 15.6397 109.765 15.5877 cv
109.765 15.5527 109.738 15.5437 109.694 15.5437 cv
109.606 15.5437 109.377 15.5437 109.121 15.4647 cv
108.742 15.3417 108.68 14.8497 108.645 14.5327 cv
true sop
1 /0 /CSD get_res sepcs
1 sep
f
71.552 8.60266 mo
71.477 8.6377 71.413 8.68268 71.358 8.73572 cv
71.303 8.7887 71.261 8.84772 71.231 8.91272 cv
71.202 8.97668 71.188 9.0387 71.188 9.09668 cv
71.188 9.23169 71.217 9.35168 71.277 9.45471 cv
71.338 9.55768 71.414 9.64471 71.506 9.7157 cv
71.598 9.78668 71.7 9.8407 71.812 9.87567 cv
71.924 9.91071 72.033 9.92871 72.14 9.92871 cv
72.247 9.92871 72.365 9.90771 72.494 9.8667 cv
72.624 9.82367 72.74 9.76068 72.842 9.67767 cv
72.944 9.59369 73.022 9.48871 73.078 9.36267 cv
73.133 9.23669 73.139 9.09167 73.097 8.9267 cv
72.849 7.92969 li
73.011 7.86169 73.149 7.77069 73.264 7.65668 cv
73.38 7.54169 73.474 7.41968 73.546 7.29071 cv
73.619 7.16168 73.674 7.03271 73.709 6.90369 cv
73.745 6.77472 73.763 6.6637 73.763 6.5697 cv
73.766 6.38269 73.74 6.21869 73.685 6.0777 cv
73.63 5.93768 73.555 5.81866 73.461 5.71967 cv
73.367 5.6217 73.26 5.5437 73.138 5.48767 cv
73.017 5.43066 72.891 5.3927 72.762 5.37372 cv
72.723 5.36768 72.678 5.36371 72.628 5.36169 cv
72.578 5.36072 72.529 5.36072 72.48 5.36371 cv
72.431 5.36768 72.385 5.37372 72.342 5.38171 cv
72.298 5.38971 72.261 5.39771 72.232 5.40771 cv
71.999 4.52167 li
72.297 4.21869 72.53 3.89868 72.699 3.56372 cv
72.867 3.22766 72.949 2.8667 72.946 2.47968 cv
72.943 2.26971 72.912 2.06671 72.852 1.8717 cv
72.792 1.6767 72.721 1.50269 72.64 1.35168 cv
72.559 1.19971 72.477 1.07672 72.392 .980713 cv
72.308 .885681 72.24 .833679 72.189 .823669 cv
72.133 .842712 72.064 .904663 71.979 1.00769 cv
71.895 1.11072 71.814 1.23767 71.734 1.3877 cv
71.655 1.53772 71.587 1.70172 71.53 1.87866 cv
71.474 2.0567 71.443 2.22571 71.44 2.38672 cv
71.437 2.5517 71.444 2.69971 71.462 2.82971 cv
71.48 2.96069 71.503 3.08569 71.53 3.20569 cv
71.558 3.32471 71.589 3.44269 71.625 3.55872 cv
71.661 3.67468 71.695 3.79767 71.727 3.9267 cv
71.63 4.02966 71.511 4.15869 71.372 4.31372 cv
71.233 4.46869 71.1 4.6427 70.974 4.83667 cv
70.848 5.02966 70.74 5.23871 70.651 5.46069 cv
70.562 5.68372 70.517 5.91272 70.517 6.14868 cv
70.517 6.42969 70.568 6.69568 70.67 6.94672 cv
70.772 7.19867 70.919 7.41168 71.11 7.58667 cv
71.301 7.76068 71.533 7.8847 71.807 7.95868 cv
72.081 8.03271 72.391 8.03571 72.737 7.96869 cv
72.98 8.9657 li
73.009 9.09167 73.004 9.20569 72.963 9.30969 cv
72.923 9.41272 72.861 9.50171 72.779 9.5777 cv
72.696 9.65369 72.599 9.71167 72.487 9.75269 cv
72.376 9.79266 72.263 9.81268 72.15 9.81268 cv
72.085 9.81268 72.02 9.80072 71.955 9.77667 cv
71.89 9.75269 71.83 9.71967 71.776 9.67969 cv
71.72 9.63867 71.674 9.59467 71.637 9.54669 cv
71.6 9.49872 71.578 9.44971 71.572 9.40167 cv
71.636 9.44672 71.71 9.4657 71.793 9.45972 cv
71.875 9.4527 71.953 9.42969 72.026 9.38971 cv
72.099 9.34869 72.159 9.29669 72.208 9.23468 cv
72.257 9.17169 72.281 9.10669 72.281 9.0387 cv
72.281 8.91571 72.24 8.80566 72.159 8.70667 cv
72.078 8.6087 71.96 8.55566 71.805 8.54968 cv
71.711 8.54968 71.627 8.56671 71.552 8.60266 cv
72.487 1.48669 mo
72.534 1.56067 72.575 1.64868 72.609 1.75067 cv
72.643 1.85168 72.668 1.96069 72.686 2.07471 cv
72.704 2.1897 72.713 2.2937 72.713 2.38672 cv
72.713 2.51569 72.681 2.64771 72.618 2.78168 cv
72.555 2.91571 72.478 3.04767 72.385 3.1767 cv
72.293 3.30566 72.196 3.4267 72.094 3.53967 cv
71.992 3.65167 71.902 3.75067 71.824 3.83472 cv
71.798 3.73468 71.773 3.63867 71.749 3.54871 cv
71.724 3.45868 71.703 3.36371 71.683 3.26569 cv
71.664 3.16766 71.648 3.05969 71.635 2.94366 cv
71.622 2.8277 71.615 2.69366 71.615 2.54169 cv
71.615 2.38367 71.644 2.2337 71.703 2.09167 cv
71.761 1.94971 71.829 1.82471 71.907 1.71667 cv
71.984 1.6087 72.064 1.52271 72.145 1.45972 cv
72.226 1.39771 72.289 1.36267 72.334 1.35571 cv
72.389 1.36871 72.44 1.41272 72.487 1.48669 cv
72.091 5.45667 mo
71.858 5.54669 71.699 5.68066 71.615 5.86072 cv
71.531 6.03967 71.498 6.25067 71.518 6.4917 cv
71.528 6.6377 71.558 6.76569 71.608 6.87671 cv
71.658 6.98767 71.716 7.08368 71.783 7.16272 cv
71.849 7.2417 71.919 7.30469 71.992 7.35168 cv
72.065 7.39771 72.13 7.42969 72.189 7.44568 cv
72.121 7.39069 72.058 7.33667 72.001 7.28369 cv
71.945 7.23071 71.896 7.17267 71.856 7.11169 cv
71.815 7.05072 71.783 6.98468 71.758 6.91272 cv
71.734 6.84271 71.722 6.76172 71.722 6.67169 cv
71.719 6.50671 71.757 6.36566 71.836 6.24768 cv
71.916 6.1297 72.052 6.04871 72.247 6.00269 cv
72.689 7.77472 li
72.653 7.78467 72.605 7.7937 72.543 7.8017 cv
72.481 7.80969 72.418 7.81567 72.354 7.81866 cv
72.289 7.82172 72.228 7.82367 72.171 7.82367 cv
72.115 7.82367 72.072 7.82172 72.043 7.81866 cv
71.839 7.79968 71.662 7.73969 71.513 7.64166 cv
71.364 7.5437 71.241 7.42371 71.144 7.28369 cv
71.047 7.14368 70.975 6.98871 70.928 6.82172 cv
70.881 6.65369 70.857 6.48767 70.857 6.32269 cv
70.857 6.20667 70.879 6.08868 70.923 5.96869 cv
70.967 5.84967 71.022 5.73267 71.088 5.61566 cv
71.154 5.49969 71.229 5.38867 71.312 5.28168 cv
71.394 5.17572 71.474 5.07867 71.55 4.9917 cv
71.626 4.90466 71.696 4.8277 71.761 4.76172 cv
71.826 4.69568 71.873 4.64569 71.902 4.61371 cv
cp
72.363 5.9837 mo
72.506 5.96069 72.639 5.95569 72.764 5.96667 cv
72.889 5.9787 73 6.0047 73.097 6.04669 cv
73.194 6.08868 73.274 6.1427 73.338 6.20868 cv
73.401 6.27472 73.442 6.34869 73.461 6.42969 cv
73.494 6.5777 73.501 6.71967 73.483 6.85571 cv
73.465 6.99066 73.427 7.11566 73.367 7.23071 cv
73.307 7.34467 73.229 7.44568 73.133 7.53271 cv
73.038 7.61969 72.927 7.69067 72.801 7.74567 cv
f
69.52 8.45966 mo
69.473 8.52771 69.439 8.59869 69.419 8.67169 cv
69.398 8.74567 69.391 8.81769 69.398 8.8877 cv
69.405 8.9577 69.423 9.01868 69.452 9.06866 cv
69.52 9.18567 69.606 9.27466 69.71 9.33466 cv
69.814 9.39368 69.923 9.4317 70.039 9.44672 cv
70.154 9.46271 70.269 9.4577 70.384 9.43268 cv
70.498 9.40771 70.602 9.36871 70.695 9.31567 cv
70.787 9.2627 70.879 9.18469 70.97 9.08466 cv
71.061 8.9837 71.13 8.87067 71.176 8.74768 cv
71.223 8.62469 71.238 8.49469 71.223 8.35767 cv
71.207 8.22168 71.14 8.09271 71.021 7.9707 cv
70.306 7.23071 li
70.412 7.09167 70.486 6.94366 70.528 6.78668 cv
70.57 6.63068 70.591 6.47766 70.589 6.32971 cv
70.587 6.1817 70.569 6.0437 70.535 5.9137 cv
70.501 5.78467 70.461 5.67871 70.414 5.59766 cv
70.323 5.43372 70.219 5.30469 70.1 5.21069 cv
69.982 5.1167 69.858 5.05066 69.727 5.01166 cv
69.596 4.97369 69.464 4.96069 69.331 4.97168 cv
69.197 4.9837 69.069 5.0127 68.947 5.06067 cv
68.911 5.07471 68.87 5.09271 68.826 5.1167 cv
68.781 5.14069 68.739 5.16571 68.698 5.19269 cv
68.658 5.21967 68.621 5.24768 68.587 5.27667 cv
68.553 5.30566 68.526 5.33069 68.506 5.3537 cv
67.86 4.7027 li
67.965 4.29169 68.007 3.89868 67.984 3.52466 cv
67.962 3.14966 67.852 2.79572 67.655 2.46167 cv
67.547 2.28168 67.418 2.1217 67.268 1.98267 cv
67.118 1.84369 66.97 1.7287 66.824 1.6377 cv
66.677 1.54669 66.544 1.48071 66.423 1.44067 cv
66.303 1.39966 66.217 1.38867 66.168 1.4057 cv
66.129 1.44971 66.1 1.53766 66.079 1.6687 cv
66.058 1.80066 66.051 1.95068 66.057 2.12067 cv
66.064 2.28967 66.087 2.4657 66.127 2.64771 cv
66.167 2.82971 66.226 2.9917 66.304 3.13269 cv
66.384 3.27667 66.464 3.4007 66.545 3.50568 cv
66.626 3.60968 66.709 3.70667 66.792 3.79669 cv
66.876 3.88568 66.963 3.97266 67.052 4.05469 cv
67.141 4.1377 67.232 4.22766 67.325 4.32269 cv
67.293 4.46069 67.255 4.63171 67.212 4.83466 cv
67.169 5.0387 67.142 5.25568 67.13 5.48669 cv
67.117 5.71667 67.129 5.95068 67.163 6.18768 cv
67.198 6.42468 67.274 6.64569 67.392 6.84967 cv
67.533 7.09271 67.711 7.29767 67.926 7.4657 cv
68.14 7.63269 68.374 7.74371 68.627 7.79968 cv
68.88 7.85571 69.143 7.84668 69.418 7.77466 cv
69.692 7.7027 69.962 7.5517 70.228 7.3197 cv
70.939 8.06268 li
71.028 8.15668 71.08 8.25867 71.097 8.36871 cv
71.114 8.4787 71.105 8.58667 71.072 8.69366 cv
71.038 8.79968 70.983 8.89868 70.907 8.98969 cv
70.83 9.07971 70.743 9.15369 70.645 9.20966 cv
70.589 9.2417 70.527 9.26471 70.458 9.2757 cv
70.39 9.28668 70.322 9.2887 70.254 9.2807 cv
70.186 9.27368 70.124 9.25769 70.067 9.23468 cv
70.011 9.21167 69.967 9.18066 69.938 9.14166 cv
70.016 9.14868 70.09 9.12866 70.158 9.08167 cv
70.227 9.03467 70.282 8.97668 70.325 8.90466 cv
70.368 8.83368 70.394 8.75867 70.405 8.67969 cv
70.415 8.60168 70.404 8.53271 70.37 8.47369 cv
70.308 8.36768 70.218 8.29169 70.098 8.2467 cv
69.978 8.20166 69.85 8.2157 69.712 8.28766 cv
69.631 8.33466 69.567 8.39166 69.52 8.45966 cv
66.759 1.83069 mo
66.837 1.87268 66.916 1.92871 66.997 1.99866 cv
67.077 2.07068 67.154 2.1507 67.227 2.2417 cv
67.3 2.33167 67.359 2.41766 67.406 2.49866 cv
67.471 2.60968 67.51 2.73969 67.523 2.8877 cv
67.535 3.03467 67.534 3.18768 67.518 3.34467 cv
67.504 3.50269 67.48 3.65668 67.448 3.80469 cv
67.417 3.95367 67.388 4.08368 67.363 4.1947 cv
67.29 4.12067 67.221 4.0517 67.154 3.98468 cv
67.088 3.9187 67.022 3.84869 66.955 3.77271 cv
66.889 3.69672 66.821 3.61169 66.752 3.5177 cv
66.682 3.42371 66.61 3.31067 66.534 3.17969 cv
66.454 3.04266 66.404 2.89771 66.383 2.74567 cv
66.363 2.59369 66.358 2.45166 66.372 2.3197 cv
66.385 2.18768 66.41 2.07367 66.449 1.9787 cv
66.488 1.88367 66.525 1.82269 66.561 1.7937 cv
66.615 1.77771 66.681 1.79071 66.759 1.83069 cv
68.408 5.4657 mo
68.251 5.66071 68.181 5.85669 68.199 6.05371 cv
68.215 6.25067 68.293 6.44867 68.431 6.64868 cv
68.513 6.76971 68.603 6.86566 68.703 6.93768 cv
68.802 7.00867 68.9 7.06171 68.997 7.09766 cv
69.094 7.13269 69.186 7.15271 69.273 7.15668 cv
69.359 7.16071 69.432 7.1557 69.491 7.14069 cv
69.404 7.12671 69.323 7.11169 69.247 7.09369 cv
69.171 7.07568 69.101 7.04968 69.035 7.0177 cv
68.969 6.98468 68.908 6.94269 68.851 6.89368 cv
68.794 6.84467 68.743 6.7807 68.698 6.7027 cv
68.613 6.56171 68.575 6.41968 68.584 6.27869 cv
68.594 6.13666 68.672 5.99866 68.817 5.86267 cv
70.089 7.1767 li
70.063 7.2027 70.025 7.23468 69.976 7.27167 cv
69.927 7.30969 69.875 7.3457 69.821 7.38171 cv
69.766 7.41669 69.714 7.44769 69.665 7.47571 cv
69.616 7.5047 69.578 7.52466 69.551 7.53668 cv
69.365 7.62067 69.182 7.65771 69.004 7.64667 cv
68.826 7.63568 68.659 7.59369 68.505 7.52069 cv
68.35 7.44769 68.21 7.34967 68.085 7.22766 cv
67.96 7.10571 67.857 6.97369 67.774 6.83069 cv
67.716 6.73071 67.676 6.61768 67.654 6.49268 cv
67.632 6.36768 67.62 6.23767 67.619 6.10468 cv
67.619 5.9707 67.627 5.83771 67.645 5.70367 cv
67.663 5.5697 67.684 5.44672 67.706 5.33368 cv
67.728 5.21967 67.751 5.11871 67.773 5.02869 cv
67.796 4.9397 67.812 4.87366 67.821 4.83069 cv
cp
68.909 5.78766 mo
69.021 5.69672 69.133 5.62567 69.247 5.57367 cv
69.361 5.52069 69.47 5.48871 69.575 5.47668 cv
69.681 5.46466 69.777 5.47168 69.865 5.4967 cv
69.953 5.52271 70.025 5.56567 70.083 5.62567 cv
70.185 5.73871 70.263 5.85767 70.316 5.98468 cv
70.368 6.11066 70.397 6.23767 70.403 6.3667 cv
70.408 6.49567 70.392 6.62268 70.353 6.74567 cv
70.314 6.86871 70.253 6.98468 70.172 7.0957 cv
f
67.689 9.34863 mo
67.683 9.43066 67.689 9.50867 67.708 9.58264 cv
67.726 9.65765 67.756 9.72266 67.798 9.78064 cv
67.84 9.83765 67.886 9.88068 67.936 9.90967 cv
68.054 9.97766 68.173 10.0117 68.292 10.0117 cv
68.412 10.0117 68.526 9.98969 68.634 9.94568 cv
68.742 9.90063 68.839 9.83966 68.925 9.76068 cv
69.012 9.68268 69.082 9.59668 69.136 9.50464 cv
69.189 9.41266 69.23 9.29968 69.258 9.16669 cv
69.287 9.03467 69.29 8.90265 69.268 8.77264 cv
69.246 8.64264 69.194 8.52264 69.112 8.41266 cv
69.03 8.30164 68.908 8.22363 68.743 8.17767 cv
67.753 7.89264 li
67.775 7.71967 67.765 7.55469 67.723 7.39764 cv
67.681 7.24164 67.622 7.09863 67.546 6.97168 cv
67.47 6.84467 67.385 6.73267 67.291 6.63763 cv
67.197 6.54266 67.109 6.47168 67.027 6.42468 cv
66.866 6.32867 66.711 6.26868 66.561 6.24664 cv
66.412 6.22363 66.271 6.22766 66.138 6.25964 cv
66.006 6.29169 65.884 6.34564 65.775 6.42267 cv
65.665 6.49963 65.569 6.58868 65.488 6.69067 cv
65.463 6.72064 65.437 6.75665 65.41 6.79968 cv
65.384 6.84265 65.36 6.88568 65.338 6.92865 cv
65.317 6.97266 65.299 7.01465 65.284 7.05664 cv
65.269 7.09863 65.259 7.13464 65.252 7.16467 cv
64.366 6.92267 li
64.251 6.51367 64.09 6.15265 63.882 5.83966 cv
63.675 5.52667 63.402 5.27466 63.064 5.08368 cv
62.88 4.98169 62.688 4.90765 62.488 4.86163 cv
62.289 4.81567 62.103 4.78967 61.931 4.78369 cv
61.758 4.77765 61.609 4.78766 61.485 4.81268 cv
61.36 4.83765 61.28 4.86969 61.246 4.91064 cv
61.235 4.96765 61.254 5.05768 61.301 5.18164 cv
61.349 5.30664 61.418 5.44067 61.509 5.58368 cv
61.6 5.72766 61.708 5.86768 61.834 6.00568 cv
61.96 6.14368 62.092 6.25366 62.231 6.33765 cv
62.372 6.42267 62.504 6.48969 62.627 6.53967 cv
62.749 6.58966 62.869 6.63269 62.987 6.66864 cv
63.104 6.70465 63.223 6.73663 63.341 6.76367 cv
63.46 6.79169 63.584 6.82367 63.712 6.85968 cv
63.753 6.99469 63.806 7.16168 63.871 7.35968 cv
63.936 7.55664 64.022 7.75867 64.127 7.96466 cv
64.232 8.17065 64.359 8.36768 64.508 8.55566 cv
64.657 8.74365 64.834 8.89667 65.038 9.01465 cv
65.283 9.15466 65.54 9.24365 65.809 9.28168 cv
66.079 9.31964 66.337 9.29968 66.584 9.22168 cv
66.831 9.14368 67.055 9.00568 67.257 8.80664 cv
67.458 8.60767 67.616 8.34167 67.731 8.00867 cv
68.719 8.29767 li
68.843 8.33569 68.939 8.39764 69.009 8.48468 cv
69.078 8.57068 69.125 8.66864 69.15 8.77765 cv
69.175 8.88666 69.177 8.99963 69.156 9.11664 cv
69.135 9.23364 69.096 9.34064 69.04 9.43768 cv
69.007 9.49469 68.964 9.54364 68.911 9.58765 cv
68.857 9.63165 68.799 9.66669 68.737 9.69464 cv
68.674 9.72168 68.613 9.73969 68.552 9.74664 cv
68.491 9.75464 68.438 9.74963 68.393 9.73065 cv
68.464 9.69769 68.518 9.64368 68.554 9.56964 cv
68.59 9.49469 68.608 9.41565 68.61 9.33368 cv
68.611 9.24963 68.596 9.17169 68.566 9.09863 cv
68.535 9.02563 68.491 8.97168 68.432 8.93768 cv
68.326 8.87665 68.209 8.85565 68.083 8.87665 cv
67.957 8.89764 67.852 8.97266 67.769 9.10364 cv
67.722 9.18567 67.696 9.26666 67.689 9.34863 cv
61.972 4.98364 mo
62.06 4.98065 62.157 4.98969 62.262 5.01068 cv
62.367 5.03265 62.474 5.06366 62.583 5.10565 cv
62.691 5.14764 62.786 5.19165 62.867 5.23865 cv
62.979 5.30365 63.078 5.39667 63.163 5.51868 cv
63.248 5.63965 63.323 5.77264 63.389 5.91669 cv
63.455 6.06067 63.512 6.20465 63.559 6.34967 cv
63.606 6.49469 63.647 6.62067 63.681 6.72968 cv
63.581 6.70264 63.486 6.67664 63.395 6.65167 cv
63.304 6.62769 63.211 6.59967 63.116 6.56665 cv
63.021 6.53467 62.919 6.49469 62.812 6.44769 cv
62.704 6.40167 62.585 6.33966 62.453 6.26367 cv
62.316 6.18469 62.2 6.08466 62.105 5.96368 cv
62.011 5.84167 61.936 5.72064 61.881 5.59967 cv
61.826 5.47864 61.791 5.36768 61.777 5.26569 cv
61.763 5.16467 61.765 5.09265 61.782 5.05066 cv
61.821 5.00964 61.884 4.98663 61.972 4.98364 cv
65.224 7.31067 mo
65.186 7.55664 65.224 7.76068 65.337 7.92267 cv
65.451 8.08569 65.618 8.21869 65.838 8.32269 cv
65.968 8.38666 66.095 8.42566 66.217 8.43768 cv
66.339 8.44965 66.451 8.44769 66.553 8.42969 cv
66.654 8.41168 66.744 8.38269 66.821 8.34369 cv
66.898 8.30365 66.958 8.26367 67.002 8.22064 cv
66.92 8.25269 66.842 8.27869 66.767 8.30164 cv
66.693 8.32367 66.618 8.33667 66.545 8.34064 cv
66.471 8.34564 66.398 8.34064 66.324 8.32568 cv
66.25 8.31165 66.174 8.28168 66.095 8.23663 cv
65.951 8.15668 65.847 8.05365 65.784 7.92566 cv
65.722 7.79865 65.719 7.63965 65.777 7.44965 cv
67.538 7.95367 li
67.528 7.98969 67.512 8.03564 67.488 8.09265 cv
67.465 8.15063 67.438 8.20764 67.408 8.26465 cv
67.379 8.32269 67.349 8.37567 67.321 8.42468 cv
67.293 8.47363 67.27 8.50964 67.253 8.53265 cv
67.134 8.69965 66.994 8.82269 66.834 8.90167 cv
66.674 8.98065 66.509 9.02765 66.339 9.04169 cv
66.168 9.05469 65.998 9.03967 65.829 8.99664 cv
65.659 8.95367 65.503 8.89069 65.36 8.80768 cv
65.259 8.75067 65.168 8.67267 65.086 8.57465 cv
65.004 8.47766 64.929 8.37067 64.861 8.25568 cv
64.793 8.14069 64.734 8.02069 64.682 7.89569 cv
64.631 7.77069 64.587 7.65466 64.549 7.54565 cv
64.511 7.43567 64.48 7.33667 64.455 7.24768 cv
64.43 7.15869 64.41 7.09369 64.397 7.05267 cv
cp
65.819 7.33868 mo
65.87 7.20465 65.932 7.08667 66.004 6.98468 cv
66.076 6.88269 66.155 6.80066 66.24 6.73767 cv
66.325 6.67468 66.412 6.63269 66.501 6.61066 cv
66.59 6.58966 66.675 6.59064 66.755 6.61469 cv
66.9 6.66064 67.027 6.72565 67.136 6.80865 cv
67.245 6.89166 67.334 6.98767 67.403 7.09668 cv
67.473 7.20569 67.522 7.32269 67.55 7.44965 cv
67.578 7.57568 67.584 7.70667 67.569 7.84265 cv
f
66.549 11.0306 mo
66.585 11.1047 66.629 11.1697 66.682 11.2247 cv
66.736 11.2787 66.795 11.3207 66.86 11.3506 cv
66.925 11.3797 66.986 11.3937 67.044 11.3937 cv
67.181 11.3937 67.3 11.3636 67.404 11.3036 cv
67.508 11.2447 67.595 11.1686 67.667 11.0767 cv
67.738 10.9847 67.791 10.8827 67.827 10.7717 cv
67.862 10.6606 67.88 10.5517 67.88 10.4446 cv
67.88 10.3387 67.859 10.2206 67.817 10.0917 cv
67.775 9.96265 67.712 9.84668 67.628 9.74567 cv
67.543 9.64368 67.438 9.56567 67.312 9.51068 cv
67.186 9.45569 67.04 9.44965 66.874 9.4917 cv
65.874 9.73767 li
65.806 9.57666 65.714 9.43866 65.599 9.32465 cv
65.484 9.20966 65.362 9.11566 65.232 9.04364 cv
65.103 8.97064 64.973 8.91669 64.844 8.88165 cv
64.714 8.84564 64.603 8.8277 64.508 8.8277 cv
64.321 8.82465 64.156 8.85065 64.015 8.90564 cv
63.875 8.96069 63.755 9.03467 63.656 9.12866 cv
63.557 9.22168 63.479 9.32965 63.423 9.44965 cv
63.366 9.57166 63.328 9.69666 63.309 9.82568 cv
63.302 9.86469 63.298 9.90869 63.296 9.95868 cv
63.295 10.0087 63.296 10.0577 63.299 10.1057 cv
63.302 10.1547 63.308 10.2007 63.316 10.2437 cv
63.324 10.2877 63.333 10.3237 63.343 10.3527 cv
62.453 10.5857 li
62.149 10.2887 61.828 10.0566 61.491 9.88867 cv
61.155 9.72064 60.792 9.63867 60.403 9.64166 cv
60.193 9.64465 59.99 9.67566 59.794 9.73566 cv
59.598 9.79565 59.423 9.86566 59.271 9.94666 cv
59.119 10.0276 58.995 10.1086 58.9 10.1937 cv
58.804 10.2776 58.752 10.3447 58.742 10.3967 cv
58.761 10.4517 58.823 10.5207 58.926 10.6047 cv
59.03 10.6887 59.157 10.7697 59.308 10.8487 cv
59.458 10.9286 59.623 10.9957 59.801 11.0527 cv
59.979 11.1086 60.149 11.1387 60.311 11.1417 cv
60.476 11.1457 60.624 11.1377 60.755 11.1207 cv
60.887 11.1027 61.012 11.0797 61.132 11.0527 cv
61.252 11.0247 61.37 10.9937 61.487 10.9576 cv
61.603 10.9227 61.727 10.8887 61.856 10.8567 cv
61.959 10.9537 62.089 11.0707 62.245 11.2097 cv
62.4 11.3487 62.575 11.4807 62.769 11.6067 cv
62.963 11.7327 63.173 11.8397 63.396 11.9286 cv
63.62 12.0177 63.849 12.0616 64.086 12.0616 cv
64.368 12.0616 64.635 12.0107 64.887 11.9087 cv
65.14 11.8077 65.354 11.6617 65.529 11.4706 cv
65.704 11.2806 65.828 11.0497 65.903 10.7767 cv
65.977 10.5037 65.98 10.1946 65.912 9.84967 cv
66.913 9.60767 li
67.04 9.57867 67.155 9.58466 67.258 9.62469 cv
67.362 9.66467 67.452 9.72668 67.528 9.80865 cv
67.604 9.89069 67.662 9.98767 67.703 10.0987 cv
67.743 10.2097 67.764 10.3227 67.764 10.4357 cv
67.764 10.4997 67.751 10.5647 67.727 10.6287 cv
67.703 10.6937 67.67 10.7537 67.63 10.8077 cv
67.589 10.8627 67.545 10.9087 67.496 10.9457 cv
67.448 10.9827 67.399 11.0047 67.351 11.0117 cv
67.396 10.9467 67.415 10.8737 67.409 10.7906 cv
67.402 10.7087 67.379 10.6317 67.339 10.5587 cv
67.298 10.4857 67.246 10.4257 67.183 10.3777 cv
67.12 10.3287 67.054 10.3047 66.986 10.3047 cv
66.863 10.3047 66.752 10.3447 66.653 10.4257 cv
66.555 10.5057 66.502 10.6247 66.495 10.7787 cv
66.495 10.8727 66.513 10.9567 66.549 11.0306 cv
59.407 10.0987 mo
59.482 10.0517 59.57 10.0117 59.672 9.97766 cv
59.774 9.94366 59.883 9.91864 59.998 9.9007 cv
60.113 9.88269 60.217 9.87366 60.311 9.87366 cv
60.44 9.87366 60.573 9.90564 60.707 9.96869 cv
60.841 10.0306 60.973 10.1086 61.103 10.2007 cv
61.233 10.2927 61.354 10.3887 61.467 10.4907 cv
61.581 10.5927 61.68 10.6816 61.764 10.7596 cv
61.663 10.7856 61.568 10.8107 61.477 10.8347 cv
61.386 10.8586 61.292 10.8807 61.193 10.8997 cv
61.094 10.9197 60.986 10.9357 60.87 10.9487 cv
60.753 10.9617 60.619 10.9677 60.466 10.9677 cv
60.308 10.9677 60.157 10.9387 60.014 10.8807 cv
59.872 10.8227 59.746 10.7547 59.638 10.6767 cv
59.53 10.5997 59.444 10.5207 59.381 10.4397 cv
59.317 10.3597 59.283 10.2967 59.276 10.2516 cv
59.289 10.1967 59.333 10.1457 59.407 10.0987 cv
63.391 10.4937 mo
63.482 10.7256 63.617 10.8837 63.797 10.9677 cv
63.977 11.0517 64.188 11.0837 64.431 11.0647 cv
64.577 11.0547 64.705 11.0247 64.817 10.9747 cv
64.929 10.9247 65.024 10.8667 65.104 10.8007 cv
65.183 10.7347 65.246 10.6656 65.293 10.5927 cv
65.34 10.5197 65.372 10.4547 65.388 10.3967 cv
65.333 10.4647 65.279 10.5267 65.225 10.5826 cv
65.172 10.6396 65.114 10.6877 65.053 10.7287 cv
64.991 10.7687 64.925 10.8007 64.853 10.8246 cv
64.782 10.8487 64.701 10.8617 64.611 10.8617 cv
64.445 10.8647 64.304 10.8267 64.185 10.7477 cv
64.067 10.6686 63.985 10.5317 63.94 10.3387 cv
65.718 9.89764 li
65.728 9.93365 65.737 9.98169 65.745 10.0436 cv
65.753 10.1047 65.759 10.1677 65.762 10.2317 cv
65.765 10.2967 65.767 10.3567 65.767 10.4137 cv
65.767 10.4697 65.765 10.5127 65.762 10.5417 cv
65.743 10.7447 65.683 10.9207 65.585 11.0696 cv
65.486 11.2177 65.366 11.3407 65.225 11.4366 cv
65.084 11.5347 64.929 11.6057 64.761 11.6526 cv
64.593 11.6996 64.426 11.7227 64.261 11.7227 cv
64.144 11.7227 64.026 11.7007 63.906 11.6577 cv
63.786 11.6136 63.668 11.5587 63.551 11.4927 cv
63.435 11.4267 63.323 11.3527 63.216 11.2707 cv
63.11 11.1877 63.012 11.1086 62.925 11.0327 cv
62.837 10.9567 62.76 10.8867 62.694 10.8227 cv
62.628 10.7577 62.578 10.7107 62.546 10.6816 cv
cp
63.921 10.2227 mo
63.898 10.0797 63.893 9.94769 63.904 9.82269 cv
63.915 9.69867 63.942 9.58765 63.984 9.4917 cv
64.026 9.39465 64.08 9.3147 64.147 9.25165 cv
64.213 9.18866 64.287 9.14764 64.368 9.12866 cv
64.516 9.09564 64.659 9.08868 64.795 9.10669 cv
64.931 9.12469 65.057 9.16266 65.172 9.22266 cv
65.287 9.28265 65.388 9.35968 65.475 9.45465 cv
65.563 9.55066 65.634 9.66064 65.689 9.78668 cv
f
66.406 13.0546 mo
66.474 13.1017 66.545 13.1346 66.619 13.1556 cv
66.693 13.1766 66.765 13.1837 66.836 13.1766 cv
66.906 13.1697 66.967 13.1517 67.017 13.1216 cv
67.135 13.0546 67.224 12.9686 67.284 12.8657 cv
67.344 12.7617 67.381 12.6537 67.397 12.5377 cv
67.412 12.4227 67.408 12.3077 67.382 12.1937 cv
67.358 12.0797 67.318 11.9767 67.265 11.8846 cv
67.212 11.7917 67.134 11.7007 67.033 11.6097 cv
66.932 11.5187 66.819 11.4507 66.695 11.4047 cv
66.571 11.3586 66.441 11.3427 66.304 11.3586 cv
66.167 11.3737 66.037 11.4407 65.915 11.5596 cv
65.173 12.2717 li
65.033 12.1656 64.884 12.0917 64.727 12.0497 cv
64.57 12.0087 64.417 11.9877 64.269 11.9897 cv
64.12 11.9916 63.981 12.0096 63.851 12.0427 cv
63.721 12.0767 63.615 12.1166 63.534 12.1636 cv
63.369 12.2546 63.24 12.3586 63.145 12.4767 cv
63.051 12.5936 62.984 12.7186 62.946 12.8486 cv
62.907 12.9786 62.894 13.1107 62.905 13.2437 cv
62.917 13.3766 62.947 13.5037 62.995 13.6257 cv
63.009 13.6617 63.027 13.7026 63.051 13.7466 cv
63.075 13.7906 63.1 13.8326 63.127 13.8737 cv
63.154 13.9136 63.183 13.9507 63.211 13.9847 cv
63.24 14.0176 63.266 14.0447 63.289 14.0657 cv
62.636 14.7097 li
62.223 14.6036 61.829 14.5627 61.453 14.5847 cv
61.077 14.6077 60.721 14.7167 60.387 14.9136 cv
60.206 15.0206 60.045 15.1497 59.906 15.2986 cv
59.766 15.4487 59.651 15.5956 59.559 15.7416 cv
59.468 15.8867 59.402 16.0197 59.361 16.1407 cv
59.321 16.2607 59.309 16.3456 59.327 16.3947 cv
59.371 16.4327 59.459 16.4626 59.591 16.4836 cv
59.723 16.5046 59.874 16.5117 60.044 16.5046 cv
60.214 16.4987 60.39 16.4756 60.573 16.4357 cv
60.755 16.3956 60.918 16.3367 61.059 16.2587 cv
61.204 16.1796 61.329 16.0997 61.434 16.0187 cv
61.538 15.9377 61.636 15.8557 61.726 15.7726 cv
61.816 15.6887 61.902 15.6027 61.985 15.5137 cv
62.069 15.4247 62.158 15.3347 62.254 15.2416 cv
62.393 15.2737 62.564 15.3116 62.768 15.3536 cv
62.972 15.3967 63.19 15.4247 63.422 15.4366 cv
63.653 15.4487 63.888 15.4377 64.126 15.4037 cv
64.364 15.3687 64.586 15.2927 64.79 15.1747 cv
65.034 15.0347 65.24 14.8577 65.408 14.6437 cv
65.576 14.4296 65.688 14.1967 65.743 13.9446 cv
65.8 13.6926 65.791 13.4296 65.719 13.1567 cv
65.647 12.8837 65.495 12.6136 65.262 12.3486 cv
66.007 11.6407 li
66.102 11.5527 66.205 11.5007 66.315 11.4836 cv
66.425 11.4667 66.533 11.4756 66.64 11.5087 cv
66.747 11.5417 66.847 11.5967 66.938 11.6727 cv
67.028 11.7496 67.102 11.8356 67.159 11.9337 cv
67.191 11.9897 67.213 12.0516 67.225 12.1196 cv
67.236 12.1877 67.238 12.2557 67.23 12.3237 cv
67.223 12.3907 67.207 12.4526 67.184 12.5096 cv
67.16 12.5657 67.129 12.6086 67.09 12.6387 cv
67.097 12.5607 67.077 12.4866 67.03 12.4186 cv
66.983 12.3506 66.924 12.2957 66.853 12.2527 cv
66.781 12.2097 66.706 12.1837 66.627 12.1727 cv
66.548 12.1627 66.479 12.1747 66.42 12.2076 cv
66.313 12.2687 66.238 12.3597 66.193 12.4786 cv
66.148 12.5977 66.161 12.7256 66.234 12.8636 cv
66.28 12.9446 66.338 13.0087 66.406 13.0546 cv
59.753 15.8057 mo
59.795 15.7277 59.851 15.6487 59.922 15.5687 cv
59.993 15.4886 60.075 15.4127 60.165 15.3397 cv
60.256 15.2667 60.342 15.2076 60.423 15.1606 cv
60.535 15.0956 60.666 15.0577 60.814 15.0447 cv
60.962 15.0327 61.114 15.0336 61.273 15.0486 cv
61.431 15.0637 61.585 15.0876 61.734 15.1187 cv
61.883 15.1506 62.014 15.1786 62.126 15.2037 cv
62.052 15.2767 61.982 15.3456 61.915 15.4117 cv
61.849 15.4777 61.778 15.5436 61.702 15.6097 cv
61.626 15.6757 61.541 15.7437 61.446 15.8127 cv
61.352 15.8817 61.239 15.9547 61.107 16.0306 cv
60.97 16.1097 60.824 16.1597 60.672 16.1796 cv
60.519 16.2007 60.377 16.2047 60.244 16.1917 cv
60.111 16.1786 59.997 16.1526 59.902 16.1147 cv
59.807 16.0757 59.745 16.0386 59.716 16.0027 cv
59.7 15.9496 59.712 15.8837 59.753 15.8057 cv
63.402 14.1627 mo
63.597 14.3187 63.793 14.3887 63.991 14.3716 cv
64.189 14.3547 64.388 14.2776 64.589 14.1396 cv
64.71 14.0577 64.807 13.9686 64.878 13.8696 cv
64.95 13.7706 65.003 13.6727 65.039 13.5757 cv
65.074 13.4786 65.094 13.3876 65.098 13.3007 cv
65.103 13.2147 65.097 13.1426 65.082 13.0837 cv
65.069 13.1697 65.053 13.2507 65.035 13.3267 cv
65.017 13.4017 64.991 13.4727 64.958 13.5377 cv
64.925 13.6036 64.884 13.6647 64.834 13.7217 cv
64.785 13.7776 64.721 13.8287 64.642 13.8737 cv
64.501 13.9587 64.359 13.9966 64.217 13.9866 cv
64.075 13.9777 63.936 13.8997 63.799 13.7546 cv
65.118 12.4877 li
65.144 12.5137 65.176 12.5507 65.214 12.6006 cv
65.252 12.6487 65.288 12.7007 65.324 12.7557 cv
65.359 12.8096 65.391 12.8616 65.419 12.9097 cv
65.447 12.9587 65.467 12.9966 65.479 13.0237 cv
65.564 13.2087 65.601 13.3907 65.59 13.5687 cv
65.579 13.7466 65.537 13.9127 65.464 14.0667 cv
65.39 14.2206 65.292 14.3597 65.17 14.4836 cv
65.048 14.6086 64.915 14.7117 64.772 14.7936 cv
64.671 14.8527 64.557 14.8926 64.432 14.9136 cv
64.306 14.9366 64.176 14.9476 64.042 14.9487 cv
63.908 14.9496 63.774 14.9407 63.64 14.9227 cv
63.506 14.9047 63.382 14.8846 63.269 14.8627 cv
63.155 14.8406 63.053 14.8176 62.963 14.7947 cv
62.873 14.7717 62.807 14.7567 62.764 14.7477 cv
cp
63.724 13.6636 mo
63.633 13.5527 63.561 13.4396 63.509 13.3267 cv
63.457 13.2137 63.424 13.1047 63.412 12.9996 cv
63.4 12.8947 63.407 12.7986 63.433 12.7106 cv
63.459 12.6237 63.502 12.5507 63.562 12.4937 cv
63.675 12.3917 63.795 12.3146 63.922 12.2617 cv
64.048 12.2097 64.176 12.1807 64.306 12.1747 cv
64.435 12.1697 64.562 12.1857 64.685 12.2247 cv
64.809 12.2637 64.926 12.3237 65.037 12.4056 cv
f
67.298 14.8796 mo
67.38 14.8857 67.459 14.8796 67.533 14.8607 cv
67.608 14.8427 67.673 14.8127 67.731 14.7707 cv
67.789 14.7297 67.832 14.6837 67.861 14.6337 cv
67.929 14.5167 67.963 14.3976 67.963 14.2787 cv
67.963 14.1597 67.941 14.0457 67.897 13.9387 cv
67.852 13.8307 67.791 13.7336 67.712 13.6476 cv
67.633 13.5616 67.547 13.4917 67.454 13.4377 cv
67.362 13.3846 67.249 13.3437 67.116 13.3157 cv
66.983 13.2877 66.851 13.2847 66.72 13.3066 cv
66.59 13.3287 66.469 13.3796 66.358 13.4617 cv
66.247 13.5436 66.169 13.6656 66.123 13.8287 cv
65.837 14.8157 li
65.663 14.7947 65.497 14.8047 65.34 14.8456 cv
65.183 14.8877 65.04 14.9467 64.913 15.0226 cv
64.785 15.0977 64.673 15.1827 64.577 15.2767 cv
64.482 15.3707 64.41 15.4576 64.364 15.5387 cv
64.267 15.6996 64.207 15.8547 64.184 16.0037 cv
64.161 16.1526 64.166 16.2927 64.198 16.4247 cv
64.23 16.5566 64.284 16.6777 64.361 16.7867 cv
64.438 16.8967 64.528 16.9917 64.63 17.0737 cv
64.661 17.0977 64.697 17.1237 64.74 17.1497 cv
64.783 17.1767 64.826 17.2007 64.869 17.2217 cv
64.913 17.2437 64.956 17.2617 64.998 17.2767 cv
65.04 17.2906 65.075 17.3017 65.106 17.3077 cv
64.863 18.1907 li
64.453 18.3057 64.091 18.4657 63.776 18.6727 cv
63.462 18.8796 63.209 19.1517 63.018 19.4877 cv
62.915 19.6717 62.841 19.8627 62.795 20.0616 cv
62.749 20.2607 62.723 20.4457 62.717 20.6177 cv
62.711 20.7887 62.72 20.9377 62.746 21.0616 cv
62.771 21.1857 62.803 21.2657 62.843 21.2997 cv
62.901 21.3097 62.992 21.2917 63.116 21.2447 cv
63.241 21.1967 63.376 21.1277 63.52 21.0377 cv
63.664 20.9467 63.805 20.8387 63.943 20.7137 cv
64.081 20.5876 64.192 20.4557 64.276 20.3177 cv
64.361 20.1777 64.429 20.0457 64.479 19.9236 cv
64.529 19.8017 64.572 19.6816 64.608 19.5647 cv
64.645 19.4477 64.676 19.3297 64.704 19.2117 cv
64.731 19.0937 64.763 18.9697 64.8 18.8427 cv
64.936 18.8017 65.103 18.7487 65.301 18.6837 cv
65.5 18.6187 65.702 18.5337 65.909 18.4286 cv
66.115 18.3246 66.313 18.1977 66.502 18.0497 cv
66.691 17.9007 66.845 17.7247 66.963 17.5207 cv
67.103 17.2776 67.193 17.0217 67.231 16.7527 cv
67.269 16.4836 67.249 16.2267 67.171 15.9807 cv
67.093 15.7336 66.954 15.5107 66.754 15.3097 cv
66.554 15.1097 66.287 14.9527 65.953 14.8376 cv
66.243 13.8537 li
66.281 13.7307 66.344 13.6337 66.43 13.5647 cv
66.517 13.4957 66.616 13.4487 66.725 13.4236 cv
66.835 13.3997 66.948 13.3976 67.065 13.4177 cv
67.182 13.4387 67.29 13.4777 67.388 13.5337 cv
67.444 13.5657 67.494 13.6086 67.538 13.6627 cv
67.582 13.7157 67.618 13.7737 67.645 13.8357 cv
67.672 13.8976 67.69 13.9597 67.698 14.0197 cv
67.706 14.0807 67.701 14.1327 67.682 14.1786 cv
67.649 14.1067 67.594 14.0536 67.52 14.0176 cv
67.445 13.9817 67.366 13.9637 67.283 13.9626 cv
67.199 13.9607 67.121 13.9756 67.047 14.0057 cv
66.973 14.0367 66.919 14.0807 66.885 14.1396 cv
66.824 14.2457 66.804 14.3617 66.824 14.4867 cv
66.845 14.6127 66.921 14.7167 67.053 14.7997 cv
67.134 14.8467 67.216 14.8737 67.298 14.8796 cv
62.917 20.5757 mo
62.914 20.4886 62.923 20.3917 62.944 20.2877 cv
62.966 20.1816 62.998 20.0757 63.04 19.9677 cv
63.082 19.8597 63.126 19.7646 63.173 19.6837 cv
63.238 19.5727 63.332 19.4737 63.454 19.3896 cv
63.575 19.3047 63.709 19.2297 63.854 19.1637 cv
63.998 19.0987 64.143 19.0417 64.288 18.9947 cv
64.433 18.9477 64.56 18.9077 64.67 18.8737 cv
64.642 18.9727 64.616 19.0677 64.591 19.1587 cv
64.567 19.2487 64.539 19.3417 64.506 19.4366 cv
64.474 19.5306 64.434 19.6317 64.387 19.7386 cv
64.34 19.8456 64.278 19.9657 64.202 20.0967 cv
64.123 20.2336 64.022 20.3487 63.901 20.4427 cv
63.779 20.5367 63.657 20.6117 63.535 20.6667 cv
63.414 20.7217 63.302 20.7557 63.201 20.7697 cv
63.099 20.7837 63.027 20.7827 62.984 20.7657 cv
62.943 20.7267 62.921 20.6637 62.917 20.5757 cv
65.252 17.3357 mo
65.499 17.3737 65.704 17.3357 65.867 17.2227 cv
66.03 17.1097 66.164 16.9437 66.268 16.7247 cv
66.333 16.5937 66.371 16.4677 66.383 16.3467 cv
66.396 16.2247 66.393 16.1136 66.375 16.0117 cv
66.358 15.9106 66.329 15.8207 66.289 15.7447 cv
66.25 15.6677 66.209 15.6077 66.166 15.5647 cv
66.198 15.6467 66.224 15.7237 66.247 15.7986 cv
66.269 15.8727 66.283 15.9467 66.287 16.0197 cv
66.291 16.0927 66.286 16.1656 66.271 16.2397 cv
66.257 16.3137 66.227 16.3896 66.182 16.4677 cv
66.102 16.6117 65.998 16.7147 65.87 16.7776 cv
65.742 16.8397 65.583 16.8427 65.392 16.7847 cv
65.898 15.0297 li
65.934 15.0397 65.98 15.0557 66.038 15.0797 cv
66.095 15.1037 66.153 15.1296 66.21 15.1597 cv
66.268 15.1887 66.321 15.2177 66.37 15.2466 cv
66.419 15.2747 66.456 15.2977 66.479 15.3147 cv
66.646 15.4327 66.77 15.5717 66.85 15.7307 cv
66.929 15.8907 66.976 16.0557 66.989 16.2256 cv
67.003 16.3957 66.988 16.5647 66.945 16.7336 cv
66.901 16.9026 66.838 17.0577 66.755 17.2007 cv
66.697 17.3007 66.619 17.3917 66.521 17.4737 cv
66.424 17.5547 66.317 17.6296 66.201 17.6977 cv
66.085 17.7646 65.965 17.8237 65.84 17.8757 cv
65.715 17.9267 65.598 17.9706 65.488 18.0077 cv
65.378 18.0457 65.279 18.0767 65.189 18.1017 cv
65.1 18.1266 65.035 18.1467 64.993 18.1597 cv
cp
65.281 16.7437 mo
65.147 16.6917 65.028 16.6296 64.926 16.5587 cv
64.824 16.4867 64.741 16.4077 64.677 16.3237 cv
64.614 16.2386 64.572 16.1517 64.551 16.0637 cv
64.529 15.9747 64.53 15.8907 64.554 15.8107 cv
64.6 15.6656 64.665 15.5397 64.749 15.4307 cv
64.832 15.3227 64.929 15.2336 65.038 15.1647 cv
65.147 15.0947 65.265 15.0457 65.392 15.0187 cv
65.518 14.9907 65.65 14.9847 65.787 14.9997 cv
f
68.986 16.0146 mo
69.061 15.9797 69.125 15.9347 69.18 15.8817 cv
69.235 15.8287 69.277 15.7697 69.307 15.7047 cv
69.336 15.6407 69.35 15.5787 69.35 15.5207 cv
69.35 15.3857 69.321 15.2657 69.261 15.1627 cv
69.201 15.0597 69.124 14.9727 69.032 14.9007 cv
68.94 14.8307 68.838 14.7767 68.726 14.7417 cv
68.614 14.7057 68.505 14.6887 68.398 14.6887 cv
68.291 14.6887 68.173 14.7097 68.044 14.7507 cv
67.914 14.7937 67.798 14.8567 67.696 14.9397 cv
67.594 15.0237 67.516 15.1287 67.46 15.2547 cv
67.405 15.3807 67.399 15.5257 67.441 15.6907 cv
67.689 16.6877 li
67.527 16.7557 67.389 16.8467 67.274 16.9607 cv
67.158 17.0757 67.064 17.1977 66.992 17.3267 cv
66.919 17.4557 66.864 17.5847 66.829 17.7137 cv
66.793 17.8427 66.775 17.9537 66.775 18.0477 cv
66.772 18.2347 66.798 18.3987 66.853 18.5397 cv
66.908 18.6797 66.983 18.7987 67.077 18.8977 cv
67.171 18.9957 67.278 19.0737 67.4 19.1297 cv
67.521 19.1867 67.647 19.2247 67.776 19.2437 cv
67.815 19.2497 67.86 19.2537 67.91 19.2557 cv
67.96 19.2567 68.01 19.2567 68.058 19.2537 cv
68.107 19.2497 68.153 19.2437 68.196 19.2357 cv
68.24 19.2277 68.277 19.2197 68.306 19.2097 cv
68.539 20.0957 li
68.241 20.3987 68.008 20.7187 67.839 21.0536 cv
67.671 21.3896 67.589 21.7507 67.592 22.1377 cv
67.595 22.3477 67.626 22.5507 67.686 22.7457 cv
67.746 22.9407 67.817 23.1147 67.898 23.2657 cv
67.979 23.4177 68.061 23.5406 68.146 23.6367 cv
68.23 23.7317 68.298 23.7837 68.349 23.7937 cv
68.405 23.7747 68.474 23.7127 68.559 23.6097 cv
68.643 23.5067 68.724 23.3797 68.804 23.2297 cv
68.883 23.0797 68.951 22.9156 69.008 22.7387 cv
69.064 22.5607 69.095 22.3917 69.098 22.2307 cv
69.101 22.0657 69.094 21.9177 69.076 21.7877 cv
69.058 21.6567 69.035 21.5317 69.008 21.4117 cv
68.98 21.2927 68.949 21.1747 68.913 21.0587 cv
68.877 20.9427 68.843 20.8197 68.811 20.6907 cv
68.908 20.5877 69.027 20.4587 69.166 20.3036 cv
69.305 20.1487 69.438 19.9747 69.564 19.7807 cv
69.69 19.5877 69.798 19.3787 69.887 19.1567 cv
69.976 18.9337 70.021 18.7047 70.021 18.4687 cv
70.021 18.1877 69.97 17.9217 69.868 17.6707 cv
69.766 17.4187 69.619 17.2057 69.428 17.0307 cv
69.237 16.8567 69.005 16.7327 68.731 16.6587 cv
68.457 16.5847 68.147 16.5817 67.801 16.6487 cv
67.558 15.6517 li
67.529 15.5257 67.534 15.4117 67.575 15.3077 cv
67.615 15.2047 67.677 15.1157 67.759 15.0397 cv
67.842 14.9637 67.939 14.9057 68.051 14.8647 cv
68.162 14.8247 68.275 14.8047 68.388 14.8047 cv
68.453 14.8047 68.518 14.8167 68.583 14.8407 cv
68.648 14.8647 68.708 14.8977 68.762 14.9377 cv
68.818 14.9787 68.864 15.0227 68.901 15.0707 cv
68.938 15.1187 68.96 15.1677 68.967 15.2157 cv
68.902 15.1707 68.828 15.1517 68.746 15.1577 cv
68.663 15.1647 68.585 15.1877 68.512 15.2277 cv
68.439 15.2687 68.379 15.3207 68.33 15.3827 cv
68.281 15.4457 68.257 15.5107 68.257 15.5787 cv
68.257 15.7017 68.298 15.8117 68.379 15.9107 cv
68.46 16.0087 68.578 16.0617 68.733 16.0677 cv
68.827 16.0677 68.911 16.0497 68.986 16.0146 cv
68.051 23.1307 mo
68.004 23.0567 67.963 22.9687 67.929 22.8667 cv
67.895 22.7646 67.87 22.6567 67.852 22.5427 cv
67.834 22.4277 67.825 22.3237 67.825 22.2307 cv
67.825 22.1017 67.857 21.9697 67.92 21.8357 cv
67.983 21.7017 68.06 21.5697 68.153 21.4407 cv
68.245 21.3117 68.342 21.1907 68.444 21.0777 cv
68.546 20.9657 68.636 20.8667 68.714 20.7827 cv
68.74 20.8827 68.765 20.9787 68.789 21.0687 cv
68.814 21.1587 68.835 21.2537 68.855 21.3517 cv
68.874 21.4497 68.89 21.5567 68.903 21.6737 cv
68.916 21.7897 68.923 21.9237 68.923 22.0757 cv
68.923 22.2337 68.894 22.3837 68.835 22.5257 cv
68.777 22.6677 68.709 22.7927 68.631 22.9007 cv
68.554 23.0087 68.474 23.0947 68.393 23.1577 cv
68.312 23.2197 68.249 23.2547 68.204 23.2617 cv
68.149 23.2487 68.098 23.2047 68.051 23.1307 cv
68.447 19.1607 mo
68.68 19.0707 68.839 18.9367 68.923 18.7567 cv
69.007 18.5777 69.04 18.3667 69.02 18.1247 cv
69.01 17.9797 68.98 17.8517 68.93 17.7407 cv
68.88 17.6297 68.822 17.5337 68.755 17.4547 cv
68.689 17.3757 68.619 17.3127 68.546 17.2657 cv
68.473 17.2197 68.408 17.1877 68.349 17.1717 cv
68.417 17.2267 68.48 17.2807 68.537 17.3337 cv
68.593 17.3867 68.642 17.4447 68.682 17.5057 cv
68.723 17.5667 68.755 17.6327 68.78 17.7047 cv
68.804 17.7747 68.816 17.8557 68.816 17.9457 cv
68.819 18.1107 68.781 18.2517 68.702 18.3697 cv
68.622 18.4877 68.486 18.5687 68.291 18.6147 cv
67.849 16.8427 li
67.885 16.8327 67.933 16.8237 67.995 16.8157 cv
68.057 16.8077 68.12 16.8017 68.184 16.7987 cv
68.249 16.7957 68.31 16.7937 68.367 16.7937 cv
68.423 16.7937 68.466 16.7957 68.495 16.7987 cv
68.699 16.8177 68.876 16.8767 69.025 16.9757 cv
69.174 17.0737 69.297 17.1937 69.394 17.3337 cv
69.491 17.4737 69.563 17.6287 69.61 17.7957 cv
69.657 17.9637 69.681 18.1297 69.681 18.2947 cv
69.681 18.4107 69.659 18.5287 69.615 18.6487 cv
69.571 18.7677 69.516 18.8847 69.45 19.0017 cv
69.384 19.1177 69.309 19.2287 69.227 19.3357 cv
69.144 19.4417 69.064 19.5387 68.988 19.6257 cv
68.912 19.7127 68.842 19.7897 68.777 19.8557 cv
68.712 19.9217 68.665 19.9717 68.636 20.0037 cv
cp
68.175 18.6337 mo
68.032 18.6567 67.899 18.6617 67.774 18.6507 cv
67.649 18.6387 67.538 18.6127 67.441 18.5707 cv
67.344 18.5287 67.264 18.4747 67.201 18.4087 cv
67.137 18.3427 67.096 18.2687 67.077 18.1877 cv
67.045 18.0397 67.037 17.8977 67.055 17.7617 cv
67.073 17.6267 67.111 17.5017 67.171 17.3867 cv
67.231 17.2727 67.309 17.1717 67.405 17.0847 cv
67.5 16.9967 67.611 16.9267 67.737 16.8717 cv
f
71.018 16.1577 mo
71.065 16.0897 71.099 16.0187 71.119 15.9457 cv
71.14 15.8717 71.147 15.7997 71.14 15.7297 cv
71.133 15.6597 71.115 15.5987 71.086 15.5487 cv
71.018 15.4317 70.932 15.3427 70.828 15.2827 cv
70.724 15.2237 70.615 15.1857 70.499 15.1707 cv
70.384 15.1547 70.269 15.1597 70.154 15.1847 cv
70.04 15.2097 69.936 15.2487 69.843 15.3017 cv
69.751 15.3547 69.659 15.4327 69.568 15.5327 cv
69.477 15.6337 69.408 15.7467 69.362 15.8697 cv
69.315 15.9927 69.3 16.1227 69.315 16.2597 cv
69.331 16.3957 69.398 16.5247 69.517 16.6467 cv
70.232 17.3867 li
70.126 17.5257 70.052 17.6737 70.01 17.8307 cv
69.968 17.9867 69.947 18.1397 69.949 18.2877 cv
69.951 18.4357 69.969 18.5737 70.003 18.7037 cv
70.037 18.8327 70.077 18.9387 70.124 19.0197 cv
70.215 19.1837 70.319 19.3127 70.438 19.4067 cv
70.556 19.5007 70.68 19.5667 70.811 19.6057 cv
70.942 19.6437 71.074 19.6567 71.207 19.6457 cv
71.341 19.6337 71.469 19.6047 71.591 19.5567 cv
71.627 19.5427 71.668 19.5237 71.712 19.5007 cv
71.757 19.4767 71.799 19.4517 71.84 19.4247 cv
71.88 19.3977 71.917 19.3697 71.951 19.3407 cv
71.985 19.3117 72.012 19.2867 72.032 19.2637 cv
72.678 19.9147 li
72.573 20.3257 72.531 20.7187 72.554 21.0927 cv
72.576 21.4677 72.686 21.8217 72.883 22.1557 cv
72.991 22.3357 73.12 22.4957 73.27 22.6347 cv
73.42 22.7737 73.568 22.8887 73.714 22.9797 cv
73.861 23.0707 73.994 23.1367 74.115 23.1767 cv
74.235 23.2177 74.321 23.2287 74.37 23.2117 cv
74.409 23.1677 74.438 23.0797 74.459 22.9487 cv
74.48 22.8167 74.487 22.6667 74.481 22.4967 cv
74.474 22.3277 74.451 22.1517 74.411 21.9697 cv
74.371 21.7877 74.312 21.6257 74.234 21.4847 cv
74.154 21.3407 74.074 21.2167 73.993 21.1117 cv
73.912 21.0077 73.829 20.9107 73.746 20.8207 cv
73.662 20.7317 73.575 20.6447 73.486 20.5627 cv
73.397 20.4797 73.306 20.3897 73.213 20.2947 cv
73.245 20.1567 73.283 19.9857 73.326 19.7827 cv
73.369 19.5787 73.396 19.3617 73.408 19.1307 cv
73.421 18.9007 73.41 18.6667 73.375 18.4297 cv
73.34 18.1927 73.264 17.9717 73.146 17.7677 cv
73.005 17.5247 72.827 17.3197 72.612 17.1517 cv
72.398 16.9847 72.164 16.8737 71.911 16.8177 cv
71.658 16.7617 71.395 16.7707 71.12 16.8427 cv
70.846 16.9147 70.576 17.0657 70.31 17.2977 cv
69.599 16.5547 li
69.51 16.4607 69.458 16.3587 69.441 16.2487 cv
69.424 16.1387 69.433 16.0307 69.466 15.9237 cv
69.5 15.8177 69.555 15.7187 69.631 15.6277 cv
69.708 15.5377 69.795 15.4637 69.893 15.4077 cv
69.949 15.3757 70.011 15.3527 70.08 15.3417 cv
70.148 15.3307 70.216 15.3287 70.284 15.3367 cv
70.352 15.3437 70.414 15.3597 70.471 15.3827 cv
70.527 15.4057 70.571 15.4367 70.6 15.4757 cv
70.522 15.4687 70.448 15.4887 70.38 15.5357 cv
70.311 15.5827 70.256 15.6407 70.213 15.7127 cv
70.17 15.7837 70.144 15.8587 70.133 15.9377 cv
70.123 16.0157 70.134 16.0847 70.168 16.1437 cv
70.23 16.2497 70.32 16.3257 70.44 16.3707 cv
70.56 16.4157 70.688 16.4017 70.826 16.3297 cv
70.907 16.2827 70.971 16.2257 71.018 16.1577 cv
73.779 22.7867 mo
73.701 22.7447 73.622 22.6887 73.541 22.6187 cv
73.461 22.5467 73.384 22.4667 73.311 22.3757 cv
73.238 22.2857 73.179 22.1997 73.132 22.1187 cv
73.067 22.0077 73.028 21.8777 73.015 21.7297 cv
73.003 21.5827 73.004 21.4297 73.02 21.2727 cv
73.034 21.1147 73.058 20.9607 73.09 20.8127 cv
73.121 20.6637 73.15 20.5337 73.175 20.4227 cv
73.248 20.4967 73.317 20.5657 73.384 20.6327 cv
73.45 20.6987 73.516 20.7687 73.583 20.8447 cv
73.649 20.9207 73.717 21.0057 73.786 21.0997 cv
73.856 21.1937 73.928 21.3067 74.004 21.4377 cv
74.084 21.5747 74.134 21.7197 74.155 21.8717 cv
74.175 22.0237 74.18 22.1657 74.166 22.2977 cv
74.153 22.4297 74.128 22.5437 74.089 22.6387 cv
74.05 22.7337 74.013 22.7947 73.977 22.8237 cv
73.923 22.8397 73.857 22.8267 73.779 22.7867 cv
72.13 19.1517 mo
72.287 18.9567 72.357 18.7607 72.339 18.5637 cv
72.323 18.3667 72.245 18.1687 72.107 17.9687 cv
72.025 17.8477 71.935 17.7517 71.835 17.6797 cv
71.736 17.6087 71.638 17.5557 71.541 17.5197 cv
71.444 17.4847 71.352 17.4647 71.265 17.4607 cv
71.179 17.4567 71.106 17.4617 71.047 17.4767 cv
71.134 17.4907 71.215 17.5057 71.291 17.5237 cv
71.367 17.5417 71.437 17.5677 71.503 17.5997 cv
71.569 17.6327 71.631 17.6747 71.687 17.7237 cv
71.744 17.7727 71.795 17.8367 71.84 17.9147 cv
71.925 18.0557 71.963 18.1977 71.954 18.3387 cv
71.944 18.4807 71.866 18.6187 71.721 18.7547 cv
70.449 17.4407 li
70.475 17.4147 70.513 17.3827 70.562 17.3447 cv
70.611 17.3077 70.663 17.2717 70.717 17.2357 cv
70.772 17.2007 70.824 17.1697 70.873 17.1417 cv
70.922 17.1127 70.96 17.0927 70.987 17.0807 cv
71.173 16.9967 71.356 16.9597 71.534 16.9707 cv
71.712 16.9817 71.879 17.0237 72.033 17.0967 cv
72.188 17.1697 72.328 17.2677 72.453 17.3897 cv
72.578 17.5117 72.681 17.6437 72.764 17.7867 cv
72.822 17.8867 72.862 17.9997 72.884 18.1247 cv
72.906 18.2497 72.918 18.3797 72.919 18.5127 cv
72.919 18.6467 72.911 18.7797 72.893 18.9137 cv
72.875 19.0477 72.854 19.1707 72.832 19.2837 cv
72.81 19.3977 72.787 19.4987 72.765 19.5887 cv
72.742 19.6777 72.726 19.7437 72.717 19.7867 cv
cp
71.629 18.8297 mo
71.517 18.9207 71.405 18.9917 71.291 19.0437 cv
71.177 19.0967 71.068 19.1287 70.963 19.1407 cv
70.857 19.1527 70.761 19.1457 70.673 19.1207 cv
70.585 19.0947 70.513 19.0517 70.455 18.9917 cv
70.353 18.8787 70.275 18.7597 70.222 18.6327 cv
70.17 18.5067 70.141 18.3797 70.135 18.2507 cv
70.13 18.1207 70.146 17.9947 70.185 17.8717 cv
70.224 17.7487 70.285 17.6327 70.366 17.5217 cv
f
72.849 15.2686 mo
72.856 15.1866 72.849 15.1086 72.83 15.0347 cv
72.812 14.9597 72.782 14.8947 72.74 14.8367 cv
72.698 14.7797 72.652 14.7366 72.602 14.7076 cv
72.484 14.6396 72.365 14.6057 72.246 14.6057 cv
72.126 14.6057 72.012 14.6276 71.904 14.6716 cv
71.796 14.7167 71.699 14.7776 71.613 14.8566 cv
71.526 14.9346 71.456 15.0206 71.402 15.1127 cv
71.349 15.2047 71.308 15.3176 71.28 15.4506 cv
71.251 15.5826 71.248 15.7147 71.27 15.8447 cv
71.292 15.9747 71.344 16.0947 71.426 16.2047 cv
71.507 16.3157 71.63 16.3936 71.795 16.4396 cv
72.785 16.7247 li
72.763 16.8976 72.773 17.0626 72.815 17.2197 cv
72.857 17.3757 72.916 17.5186 72.992 17.6456 cv
73.068 17.7726 73.153 17.8846 73.247 17.9797 cv
73.341 18.0746 73.429 18.1456 73.511 18.1926 cv
73.672 18.2886 73.827 18.3486 73.977 18.3707 cv
74.126 18.3936 74.267 18.3896 74.4 18.3577 cv
74.532 18.3256 74.654 18.2717 74.763 18.1946 cv
74.873 18.1177 74.969 18.0286 75.05 17.9266 cv
75.075 17.8967 75.101 17.8607 75.128 17.8176 cv
75.154 17.7747 75.178 17.7316 75.2 17.6887 cv
75.221 17.6447 75.239 17.6027 75.254 17.5607 cv
75.269 17.5186 75.28 17.4827 75.286 17.4526 cv
76.172 17.6946 li
76.287 18.1036 76.448 18.4647 76.656 18.7776 cv
76.863 19.0906 77.136 19.3427 77.474 19.5336 cv
77.658 19.6356 77.85 19.7097 78.05 19.7557 cv
78.249 19.8016 78.435 19.8276 78.607 19.8336 cv
78.78 19.8397 78.929 19.8297 79.053 19.8046 cv
79.178 19.7797 79.258 19.7466 79.292 19.7067 cv
79.303 19.6497 79.284 19.5596 79.237 19.4346 cv
79.189 19.3107 79.12 19.1766 79.029 19.0336 cv
78.938 18.8896 78.83 18.7496 78.704 18.6116 cv
78.578 18.4736 78.446 18.3636 78.307 18.2797 cv
78.166 18.1946 78.034 18.1276 77.911 18.0776 cv
77.789 18.0276 77.669 17.9846 77.551 17.9487 cv
77.434 17.9127 77.315 17.8807 77.197 17.8536 cv
77.078 17.8256 76.954 17.7936 76.826 17.7576 cv
76.785 17.6226 76.732 17.4556 76.667 17.2576 cv
76.602 17.0607 76.516 16.8586 76.411 16.6526 cv
76.306 16.4467 76.179 16.2496 76.03 16.0616 cv
75.881 15.8737 75.704 15.7206 75.5 15.6027 cv
75.255 15.4626 74.998 15.3737 74.729 15.3356 cv
74.459 15.2977 74.201 15.3176 73.954 15.3956 cv
73.707 15.4736 73.483 15.6116 73.281 15.8107 cv
73.08 16.0096 72.922 16.2756 72.807 16.6086 cv
71.819 16.3196 li
71.695 16.2816 71.599 16.2197 71.529 16.1326 cv
71.46 16.0466 71.413 15.9487 71.388 15.8397 cv
71.363 15.7307 71.361 15.6177 71.382 15.5007 cv
71.403 15.3837 71.442 15.2767 71.498 15.1786 cv
71.531 15.1226 71.574 15.0737 71.627 15.0297 cv
71.681 14.9857 71.739 14.9506 71.801 14.9227 cv
71.864 14.8956 71.925 14.8776 71.986 14.8707 cv
72.047 14.8627 72.1 14.8677 72.145 14.8856 cv
72.074 14.9196 72.02 14.9736 71.984 15.0477 cv
71.948 15.1226 71.93 15.2017 71.928 15.2836 cv
71.927 15.3677 71.942 15.4456 71.972 15.5186 cv
72.003 15.5917 72.047 15.6456 72.106 15.6796 cv
72.212 15.7407 72.329 15.7617 72.455 15.7407 cv
72.581 15.7197 72.686 15.6447 72.769 15.5137 cv
72.816 15.4316 72.842 15.3506 72.849 15.2686 cv
78.566 19.6337 mo
78.478 19.6367 78.381 19.6276 78.276 19.6066 cv
78.171 19.5847 78.064 19.5536 77.955 19.5117 cv
77.847 19.4697 77.752 19.4257 77.671 19.3787 cv
77.559 19.3137 77.46 19.2206 77.375 19.0986 cv
77.29 18.9777 77.215 18.8447 77.149 18.7006 cv
77.083 18.5566 77.026 18.4127 76.979 18.2676 cv
76.932 18.1226 76.891 17.9966 76.857 17.8876 cv
76.957 17.9147 77.052 17.9407 77.143 17.9656 cv
77.234 17.9896 77.327 18.0176 77.422 18.0507 cv
77.517 18.0826 77.619 18.1226 77.726 18.1696 cv
77.834 18.2156 77.953 18.2776 78.085 18.3536 cv
78.222 18.4326 78.338 18.5327 78.433 18.6536 cv
78.527 18.7756 78.602 18.8967 78.657 19.0176 cv
78.712 19.1387 78.747 19.2496 78.761 19.3516 cv
78.775 19.4526 78.773 19.5247 78.756 19.5667 cv
78.717 19.6077 78.654 19.6296 78.566 19.6337 cv
75.314 17.3066 mo
75.352 17.0607 75.314 16.8566 75.201 16.6946 cv
75.087 16.5316 74.921 16.3986 74.7 16.2946 cv
74.57 16.2297 74.443 16.1917 74.321 16.1796 cv
74.199 16.1677 74.087 16.1696 73.985 16.1876 cv
73.884 16.2056 73.794 16.2346 73.717 16.2736 cv
73.64 16.3137 73.58 16.3536 73.536 16.3967 cv
73.618 16.3646 73.696 16.3386 73.771 16.3157 cv
73.845 16.2936 73.92 16.2806 73.993 16.2767 cv
74.067 16.2717 74.14 16.2767 74.214 16.2916 cv
74.288 16.3057 74.364 16.3356 74.443 16.3807 cv
74.587 16.4606 74.691 16.5637 74.754 16.6917 cv
74.816 16.8187 74.819 16.9777 74.761 17.1677 cv
73 16.6636 li
73.01 16.6276 73.026 16.5817 73.05 16.5247 cv
73.073 16.4667 73.1 16.4097 73.13 16.3527 cv
73.159 16.2946 73.189 16.2416 73.217 16.1926 cv
73.245 16.1436 73.268 16.1077 73.285 16.0847 cv
73.404 15.9177 73.544 15.7946 73.704 15.7156 cv
73.864 15.6367 74.029 15.5897 74.199 15.5756 cv
74.37 15.5626 74.54 15.5776 74.709 15.6207 cv
74.879 15.6636 75.035 15.7266 75.178 15.8096 cv
75.279 15.8666 75.37 15.9446 75.452 16.0427 cv
75.534 16.1396 75.609 16.2457 75.677 16.3616 cv
75.745 16.4766 75.804 16.5966 75.856 16.7216 cv
75.907 16.8466 75.951 16.9626 75.989 17.0717 cv
76.027 17.1816 76.058 17.2806 76.083 17.3696 cv
76.108 17.4586 76.128 17.5236 76.141 17.5646 cv
cp
74.719 17.2786 mo
74.668 17.4127 74.606 17.5306 74.534 17.6326 cv
74.462 17.7346 74.383 17.8167 74.298 17.8796 cv
74.213 17.9426 74.126 17.9846 74.037 18.0057 cv
73.948 18.0276 73.863 18.0267 73.783 18.0026 cv
73.638 17.9567 73.511 17.8917 73.402 17.8087 cv
73.293 17.7256 73.204 17.6296 73.135 17.5206 cv
73.065 17.4116 73.016 17.2946 72.988 17.1677 cv
72.96 17.0416 72.954 16.9106 72.969 16.7747 cv
f
73.989 13.5866 mo
73.953 13.5126 73.909 13.4476 73.856 13.3936 cv
73.802 13.3386 73.743 13.2966 73.678 13.2667 cv
73.613 13.2376 73.552 13.2236 73.494 13.2236 cv
73.357 13.2236 73.238 13.2537 73.134 13.3137 cv
73.031 13.3726 72.943 13.4487 72.871 13.5406 cv
72.8 13.6326 72.747 13.7346 72.711 13.8456 cv
72.676 13.9567 72.658 14.0656 72.658 14.1727 cv
72.658 14.2786 72.679 14.3967 72.721 14.5256 cv
72.763 14.6547 72.826 14.7706 72.91 14.8716 cv
72.995 14.9736 73.1 15.0516 73.226 15.1066 cv
73.352 15.1616 73.498 15.1677 73.664 15.1256 cv
74.664 14.8796 li
74.732 15.0406 74.824 15.1786 74.939 15.2927 cv
75.054 15.4077 75.176 15.5016 75.306 15.5737 cv
75.435 15.6467 75.565 15.7006 75.694 15.7357 cv
75.824 15.7717 75.935 15.7896 76.03 15.7896 cv
76.217 15.7927 76.382 15.7667 76.523 15.7116 cv
76.663 15.6566 76.783 15.5826 76.882 15.4896 cv
76.981 15.3956 77.059 15.2877 77.115 15.1677 cv
77.172 15.0457 77.21 14.9207 77.229 14.7916 cv
77.236 14.7537 77.24 14.7086 77.242 14.6586 cv
77.243 14.6086 77.242 14.5596 77.239 14.5117 cv
77.236 14.4626 77.23 14.4166 77.222 14.3737 cv
77.214 14.3297 77.205 14.2936 77.195 14.2646 cv
78.085 14.0316 li
78.389 14.3286 78.71 14.5607 79.047 14.7296 cv
79.383 14.8967 79.746 14.9786 80.135 14.9756 cv
80.345 14.9727 80.548 14.9417 80.744 14.8817 cv
80.94 14.8217 81.115 14.7516 81.267 14.6707 cv
81.419 14.5897 81.543 14.5087 81.638 14.4236 cv
81.734 14.3406 81.786 14.2726 81.796 14.2206 cv
81.777 14.1656 81.715 14.0966 81.612 14.0126 cv
81.508 13.9286 81.381 13.8477 81.23 13.7686 cv
81.08 13.6896 80.915 13.6216 80.737 13.5646 cv
80.559 13.5087 80.389 13.4786 80.227 13.4756 cv
80.062 13.4716 79.914 13.4796 79.783 13.4976 cv
79.651 13.5146 79.526 13.5377 79.406 13.5646 cv
79.286 13.5927 79.168 13.6237 79.051 13.6597 cv
78.935 13.6946 78.811 13.7286 78.682 13.7606 cv
78.579 13.6636 78.449 13.5466 78.293 13.4077 cv
78.138 13.2686 77.963 13.1367 77.769 13.0106 cv
77.575 12.8846 77.365 12.7776 77.142 12.6887 cv
76.918 12.5996 76.689 12.5557 76.452 12.5557 cv
76.17 12.5557 75.903 12.6066 75.651 12.7086 cv
75.398 12.8096 75.184 12.9556 75.009 13.1467 cv
74.834 13.3366 74.71 13.5676 74.635 13.8406 cv
74.561 14.1136 74.558 14.4227 74.626 14.7676 cv
73.625 15.0096 li
73.498 15.0386 73.383 15.0336 73.28 14.9926 cv
73.176 14.9526 73.086 14.8906 73.01 14.8087 cv
72.934 14.7266 72.876 14.6296 72.835 14.5186 cv
72.795 14.4077 72.774 14.2946 72.774 14.1816 cv
72.774 14.1176 72.787 14.0526 72.811 13.9886 cv
72.835 13.9236 72.868 13.8636 72.908 13.8096 cv
72.949 13.7546 72.993 13.7086 73.042 13.6716 cv
73.09 13.6346 73.139 13.6126 73.187 13.6057 cv
73.142 13.6707 73.123 13.7437 73.129 13.8267 cv
73.136 13.9086 73.159 13.9857 73.199 14.0587 cv
73.24 14.1317 73.292 14.1917 73.355 14.2396 cv
73.418 14.2886 73.484 14.3126 73.552 14.3126 cv
73.675 14.3126 73.786 14.2726 73.885 14.1917 cv
73.983 14.1116 74.036 13.9926 74.043 13.8386 cv
74.043 13.7446 74.025 13.6606 73.989 13.5866 cv
81.131 14.5186 mo
81.056 14.5656 80.968 14.6057 80.866 14.6396 cv
80.764 14.6736 80.655 14.6987 80.54 14.7166 cv
80.425 14.7346 80.321 14.7437 80.227 14.7437 cv
80.098 14.7437 79.965 14.7116 79.831 14.6486 cv
79.697 14.5866 79.565 14.5087 79.435 14.4166 cv
79.305 14.3246 79.184 14.2286 79.071 14.1266 cv
78.957 14.0247 78.858 13.9357 78.774 13.8577 cv
78.875 13.8317 78.97 13.8066 79.061 13.7827 cv
79.152 13.7587 79.247 13.7366 79.345 13.7177 cv
79.444 13.6976 79.552 13.6816 79.668 13.6686 cv
79.785 13.6556 79.919 13.6497 80.072 13.6497 cv
80.23 13.6497 80.381 13.6786 80.524 13.7366 cv
80.666 13.7946 80.792 13.8626 80.9 13.9406 cv
81.008 14.0176 81.094 14.0966 81.157 14.1776 cv
81.221 14.2576 81.255 14.3206 81.262 14.3657 cv
81.249 14.4207 81.205 14.4716 81.131 14.5186 cv
77.147 14.1237 mo
77.056 13.8917 76.921 13.7336 76.741 13.6497 cv
76.561 13.5656 76.35 13.5336 76.107 13.5526 cv
75.961 13.5626 75.833 13.5927 75.721 13.6426 cv
75.609 13.6926 75.514 13.7506 75.434 13.8167 cv
75.355 13.8826 75.292 13.9517 75.245 14.0247 cv
75.198 14.0977 75.166 14.1627 75.15 14.2206 cv
75.205 14.1536 75.26 14.0906 75.313 14.0347 cv
75.366 13.9777 75.424 13.9296 75.485 13.8886 cv
75.547 13.8486 75.613 13.8167 75.685 13.7927 cv
75.756 13.7686 75.837 13.7567 75.927 13.7567 cv
76.093 13.7526 76.234 13.7906 76.353 13.8696 cv
76.471 13.9487 76.553 14.0856 76.598 14.2786 cv
74.82 14.7197 li
74.81 14.6837 74.801 14.6356 74.793 14.5737 cv
74.785 14.5126 74.779 14.4496 74.776 14.3856 cv
74.773 14.3206 74.771 14.2606 74.771 14.2036 cv
74.771 14.1476 74.773 14.1046 74.776 14.0756 cv
74.795 13.8726 74.855 13.6967 74.953 13.5477 cv
75.052 13.3997 75.172 13.2766 75.313 13.1807 cv
75.454 13.0836 75.609 13.0117 75.777 12.9647 cv
75.945 12.9177 76.112 12.8947 76.277 12.8947 cv
76.394 12.8947 76.512 12.9166 76.632 12.9597 cv
76.752 13.0037 76.87 13.0587 76.987 13.1246 cv
77.103 13.1906 77.215 13.2646 77.322 13.3466 cv
77.428 13.4296 77.526 13.5087 77.613 13.5847 cv
77.701 13.6606 77.778 13.7307 77.844 13.7946 cv
77.91 13.8596 77.96 13.9066 77.992 13.9357 cv
cp
76.617 14.3947 mo
76.64 14.5377 76.645 14.6696 76.634 14.7946 cv
76.623 14.9186 76.596 15.0297 76.554 15.1256 cv
76.512 15.2227 76.458 15.3026 76.392 15.3657 cv
76.325 15.4286 76.251 15.4697 76.17 15.4896 cv
76.022 15.5217 75.879 15.5286 75.743 15.5106 cv
75.607 15.4926 75.481 15.4547 75.366 15.3947 cv
75.251 15.3347 75.15 15.2576 75.063 15.1627 cv
74.975 15.0667 74.904 14.9567 74.849 14.8306 cv
f
74.132 11.5626 mo
74.064 11.5167 73.993 11.4827 73.919 11.4617 cv
73.845 11.4407 73.773 11.4337 73.702 11.4407 cv
73.632 11.4476 73.571 11.4656 73.521 11.4957 cv
73.403 11.5626 73.314 11.6487 73.254 11.7516 cv
73.195 11.8557 73.157 11.9647 73.141 12.0797 cv
73.126 12.1946 73.13 12.3096 73.155 12.4236 cv
73.18 12.5377 73.22 12.6406 73.273 12.7327 cv
73.326 12.8256 73.404 12.9166 73.505 13.0076 cv
73.606 13.0986 73.719 13.1666 73.843 13.2126 cv
73.967 13.2587 74.097 13.2747 74.234 13.2587 cv
74.371 13.2437 74.501 13.1766 74.623 13.0577 cv
75.365 12.3456 li
75.505 12.4517 75.654 12.5256 75.811 12.5676 cv
75.968 12.6086 76.121 12.6296 76.269 12.6276 cv
76.418 12.6257 76.557 12.6077 76.687 12.5746 cv
76.817 12.5406 76.923 12.5007 77.004 12.4537 cv
77.168 12.3627 77.298 12.2587 77.393 12.1406 cv
77.487 12.0237 77.554 11.8987 77.592 11.7687 cv
77.631 11.6387 77.644 11.5067 77.633 11.3737 cv
77.621 11.2407 77.591 11.1136 77.543 10.9916 cv
77.529 10.9556 77.511 10.9147 77.487 10.8707 cv
77.463 10.8267 77.438 10.7847 77.411 10.7437 cv
77.384 10.7037 77.355 10.6666 77.327 10.6326 cv
77.298 10.5997 77.272 10.5726 77.249 10.5516 cv
77.902 9.90863 li
78.315 10.0137 78.709 10.0546 79.085 10.0327 cv
79.461 10.0096 79.817 9.90063 80.151 9.70367 cv
80.332 9.59668 80.493 9.46765 80.632 9.31866 cv
80.772 9.16968 80.887 9.02167 80.979 8.87665 cv
81.07 8.73065 81.136 8.59766 81.177 8.47662 cv
81.217 8.35663 81.229 8.27167 81.211 8.22266 cv
81.167 8.18463 81.079 8.15466 80.947 8.13367 cv
80.815 8.11267 80.664 8.10565 80.494 8.11267 cv
80.324 8.11865 80.148 8.14166 79.965 8.18164 cv
79.783 8.22168 79.62 8.28064 79.479 8.35864 cv
79.334 8.43762 79.209 8.51764 79.104 8.59863 cv
79 8.67963 78.902 8.76166 78.812 8.84467 cv
78.722 8.92865 78.636 9.01465 78.553 9.10364 cv
78.469 9.19263 78.38 9.28265 78.284 9.37567 cv
78.145 9.34363 77.974 9.30566 77.77 9.26367 cv
77.566 9.22064 77.348 9.19263 77.116 9.18066 cv
76.885 9.16864 76.65 9.17963 76.412 9.21362 cv
76.174 9.24866 75.952 9.32465 75.748 9.44263 cv
75.504 9.58264 75.298 9.75964 75.13 9.97363 cv
74.962 10.1876 74.85 10.4207 74.795 10.6727 cv
74.738 10.9247 74.747 11.1876 74.819 11.4606 cv
74.891 11.7336 75.043 12.0037 75.276 12.2687 cv
74.531 12.9766 li
74.436 13.0646 74.333 13.1166 74.223 13.1337 cv
74.113 13.1506 74.005 13.1417 73.898 13.1086 cv
73.791 13.0756 73.691 13.0206 73.6 12.9446 cv
73.51 12.8687 73.436 12.7817 73.379 12.6837 cv
73.347 12.6276 73.325 12.5657 73.313 12.4977 cv
73.302 12.4296 73.3 12.3616 73.308 12.2936 cv
73.315 12.2266 73.331 12.1647 73.354 12.1077 cv
73.378 12.0516 73.409 12.0087 73.448 11.9786 cv
73.441 12.0566 73.461 12.1307 73.508 12.1987 cv
73.555 12.2667 73.614 12.3217 73.685 12.3646 cv
73.757 12.4077 73.832 12.4337 73.911 12.4446 cv
73.99 12.4547 74.059 12.4426 74.118 12.4097 cv
74.225 12.3486 74.3 12.2576 74.345 12.1387 cv
74.39 12.0197 74.377 11.8917 74.304 11.7537 cv
74.258 11.6727 74.2 11.6086 74.132 11.5626 cv
80.785 8.81165 mo
80.743 8.88965 80.687 8.96863 80.616 9.04865 cv
80.545 9.12866 80.463 9.20465 80.373 9.27765 cv
80.282 9.35065 80.196 9.40967 80.115 9.45667 cv
80.003 9.52167 79.872 9.55963 79.724 9.57263 cv
79.576 9.58466 79.424 9.58368 79.265 9.56866 cv
79.107 9.55365 78.953 9.52966 78.804 9.49866 cv
78.655 9.46667 78.524 9.43866 78.412 9.41364 cv
78.486 9.34064 78.556 9.27167 78.623 9.20563 cv
78.689 9.13965 78.76 9.07367 78.836 9.00763 cv
78.912 8.94165 78.997 8.87366 79.092 8.80463 cv
79.186 8.73566 79.299 8.66266 79.431 8.58667 cv
79.568 8.50763 79.714 8.45764 79.866 8.43762 cv
80.019 8.41663 80.161 8.41266 80.294 8.42566 cv
80.427 8.43866 80.541 8.46466 80.636 8.50262 cv
80.731 8.54163 80.793 8.57867 80.822 8.61462 cv
80.838 8.66864 80.826 8.73364 80.785 8.81165 cv
77.136 10.4547 mo
76.941 10.2986 76.745 10.2286 76.547 10.2457 cv
76.349 10.2626 76.15 10.3406 75.949 10.4777 cv
75.828 10.5587 75.731 10.6487 75.66 10.7477 cv
75.588 10.8467 75.535 10.9446 75.499 11.0416 cv
75.464 11.1387 75.444 11.2297 75.44 11.3167 cv
75.435 11.4026 75.441 11.4747 75.456 11.5336 cv
75.469 11.4476 75.485 11.3666 75.503 11.2906 cv
75.521 11.2156 75.547 11.1447 75.58 11.0797 cv
75.613 11.0137 75.654 10.9526 75.704 10.8956 cv
75.753 10.8397 75.817 10.7886 75.896 10.7437 cv
76.037 10.6586 76.179 10.6207 76.321 10.6307 cv
76.463 10.6396 76.602 10.7177 76.739 10.8627 cv
75.42 12.1296 li
75.394 12.1036 75.362 12.0667 75.324 12.0176 cv
75.286 11.9677 75.25 11.9166 75.214 11.8616 cv
75.179 11.8077 75.147 11.7567 75.119 11.7076 cv
75.091 11.6586 75.071 11.6207 75.059 11.5936 cv
74.974 11.4086 74.937 11.2266 74.948 11.0486 cv
74.959 10.8707 75.001 10.7056 75.074 10.5507 cv
75.148 10.3967 75.246 10.2576 75.368 10.1337 cv
75.49 10.0087 75.623 9.90564 75.766 9.82367 cv
75.867 9.76465 75.981 9.72467 76.106 9.70367 cv
76.232 9.68066 76.362 9.66968 76.496 9.66864 cv
76.63 9.66864 76.764 9.67664 76.898 9.69464 cv
77.032 9.71265 77.156 9.73267 77.269 9.75464 cv
77.383 9.77667 77.485 9.79968 77.575 9.82263 cv
77.665 9.84564 77.731 9.86066 77.774 9.86963 cv
cp
76.814 10.9537 mo
76.905 11.0657 76.977 11.1777 77.029 11.2906 cv
77.081 11.4036 77.114 11.5137 77.126 11.6177 cv
77.138 11.7227 77.131 11.8187 77.105 11.9067 cv
77.079 11.9937 77.036 12.0667 76.976 12.1237 cv
76.863 12.2256 76.743 12.3027 76.616 12.3557 cv
76.49 12.4077 76.362 12.4366 76.232 12.4426 cv
76.103 12.4476 75.976 12.4316 75.853 12.3926 cv
75.729 12.3536 75.612 12.2936 75.501 12.2117 cv
f
73.24 9.73761 mo
73.158 9.73163 73.079 9.73761 73.005 9.75665 cv
72.93 9.77466 72.865 9.80463 72.807 9.84662 cv
72.749 9.88763 72.706 9.93365 72.677 9.98364 cv
72.609 10.1006 72.575 10.2197 72.575 10.3386 cv
72.575 10.4576 72.597 10.5717 72.641 10.6786 cv
72.686 10.7866 72.747 10.8837 72.826 10.9697 cv
72.905 11.0557 72.991 11.1256 73.084 11.1796 cv
73.176 11.2327 73.289 11.2736 73.422 11.3016 cv
73.555 11.3297 73.687 11.3326 73.818 11.3107 cv
73.948 11.2886 74.069 11.2376 74.18 11.1556 cv
74.291 11.0737 74.369 10.9517 74.415 10.7886 cv
74.701 9.80164 li
74.875 9.82263 75.041 9.81262 75.198 9.77167 cv
75.355 9.72961 75.498 9.67065 75.625 9.59564 cv
75.753 9.51965 75.865 9.43463 75.961 9.34064 cv
76.056 9.24664 76.128 9.15967 76.174 9.07861 cv
76.271 8.91766 76.331 8.76263 76.354 8.61365 cv
76.377 8.46466 76.372 8.32465 76.34 8.19263 cv
76.308 8.06067 76.254 7.93964 76.177 7.83063 cv
76.1 7.72064 76.01 7.62561 75.908 7.54462 cv
75.877 7.51965 75.841 7.49365 75.798 7.46765 cv
75.755 7.44061 75.712 7.41663 75.669 7.39563 cv
75.625 7.37366 75.582 7.35565 75.54 7.34064 cv
75.498 7.32666 75.463 7.31561 75.432 7.30963 cv
75.675 6.42664 li
76.085 6.31165 76.447 6.15161 76.762 5.94464 cv
77.076 5.73761 77.329 5.46564 77.52 5.12964 cv
77.623 4.94562 77.697 4.75464 77.743 4.55566 cv
77.789 4.35663 77.815 4.17163 77.821 4.00061 cv
77.827 3.82861 77.818 3.68066 77.792 3.55566 cv
77.767 3.43164 77.735 3.35266 77.695 3.31763 cv
77.637 3.30762 77.546 3.32562 77.422 3.37262 cv
77.297 3.42065 77.162 3.48962 77.018 3.57965 cv
76.874 3.67065 76.733 3.77863 76.595 3.90363 cv
76.457 4.02966 76.346 4.16162 76.262 4.29962 cv
76.177 4.44061 76.109 4.57166 76.059 4.69366 cv
76.009 4.81561 75.966 4.93567 75.93 5.05261 cv
75.893 5.16962 75.862 5.28766 75.834 5.40564 cv
75.807 5.52362 75.775 5.64764 75.738 5.77466 cv
75.602 5.81561 75.435 5.86865 75.237 5.93365 cv
75.038 5.99866 74.836 6.08362 74.629 6.18866 cv
74.423 6.29266 74.225 6.41962 74.036 6.56866 cv
73.847 6.71661 73.693 6.89264 73.575 7.09662 cv
73.435 7.33966 73.345 7.59564 73.307 7.86462 cv
73.269 8.13367 73.289 8.39063 73.367 8.63666 cv
73.445 8.88367 73.584 9.10663 73.784 9.30762 cv
73.984 9.50763 74.25 9.66461 74.585 9.77966 cv
74.295 10.7636 li
74.257 10.8867 74.194 10.9836 74.108 11.0526 cv
74.021 11.1216 73.922 11.1686 73.813 11.1937 cv
73.703 11.2177 73.59 11.2197 73.473 11.1996 cv
73.356 11.1786 73.248 11.1396 73.15 11.0836 cv
73.094 11.0516 73.044 11.0087 73 10.9556 cv
72.956 10.9016 72.92 10.8436 72.893 10.7816 cv
72.866 10.7197 72.848 10.6577 72.84 10.5977 cv
72.832 10.5366 72.837 10.4846 72.856 10.4387 cv
72.889 10.5106 72.944 10.5637 73.018 10.5997 cv
73.093 10.6356 73.172 10.6536 73.255 10.6547 cv
73.339 10.6556 73.417 10.6417 73.491 10.6116 cv
73.565 10.5817 73.619 10.5366 73.653 10.4777 cv
73.714 10.3716 73.734 10.2556 73.714 10.1306 cv
73.693 10.0046 73.617 9.90063 73.485 9.81763 cv
73.404 9.77063 73.322 9.74365 73.24 9.73761 cv
77.621 4.04163 mo
77.624 4.12866 77.615 4.22565 77.594 4.32965 cv
77.572 4.43567 77.54 4.54163 77.498 4.64966 cv
77.456 4.75763 77.412 4.85266 77.365 4.93365 cv
77.3 5.04462 77.206 5.14362 77.084 5.22766 cv
76.963 5.31262 76.829 5.38763 76.684 5.45361 cv
76.54 5.51862 76.395 5.57562 76.25 5.62262 cv
76.105 5.66962 75.978 5.70966 75.868 5.74365 cv
75.896 5.64465 75.922 5.54962 75.947 5.45966 cv
75.971 5.36865 75.999 5.27563 76.032 5.18066 cv
76.064 5.08667 76.104 4.98566 76.151 4.87866 cv
76.198 4.77167 76.26 4.65161 76.336 4.52063 cv
76.415 4.38367 76.516 4.26862 76.637 4.17462 cv
76.759 4.08063 76.881 4.00562 77.003 3.95062 cv
77.124 3.89667 77.236 3.86163 77.337 3.84766 cv
77.439 3.83362 77.511 3.83466 77.554 3.85162 cv
77.595 3.89063 77.617 3.95361 77.621 4.04163 cv
75.286 7.28162 mo
75.039 7.24365 74.834 7.28162 74.671 7.39465 cv
74.508 7.50763 74.374 7.67365 74.27 7.89264 cv
74.205 8.02362 74.167 8.14966 74.155 8.27063 cv
74.142 8.39264 74.145 8.50366 74.163 8.60565 cv
74.18 8.70667 74.209 8.79663 74.249 8.87262 cv
74.288 8.94965 74.329 9.00964 74.372 9.05261 cv
74.34 8.97162 74.314 8.89362 74.291 8.81964 cv
74.269 8.74463 74.255 8.67065 74.251 8.59766 cv
74.247 8.52466 74.252 8.45166 74.267 8.37762 cv
74.281 8.30365 74.311 8.22766 74.356 8.14966 cv
74.436 8.00562 74.54 7.90265 74.668 7.83966 cv
74.796 7.77765 74.955 7.77466 75.146 7.83264 cv
74.64 9.58765 li
74.604 9.57764 74.558 9.56165 74.5 9.53766 cv
74.443 9.51361 74.385 9.48761 74.328 9.45764 cv
74.27 9.42865 74.216 9.39966 74.168 9.37164 cv
74.119 9.34265 74.082 9.32062 74.059 9.30261 cv
73.892 9.18463 73.768 9.04565 73.688 8.88666 cv
73.609 8.72662 73.562 8.56165 73.549 8.39264 cv
73.535 8.22162 73.55 8.05261 73.593 7.88367 cv
73.637 7.71564 73.7 7.55963 73.783 7.41663 cv
73.841 7.31665 73.919 7.22565 74.017 7.14362 cv
74.114 7.06262 74.221 6.98761 74.337 6.91962 cv
74.453 6.85266 74.573 6.79364 74.698 6.74164 cv
74.823 6.69061 74.94 6.64667 75.05 6.60962 cv
75.16 6.57166 75.259 6.54065 75.349 6.51563 cv
75.438 6.49066 75.503 6.47064 75.545 6.45764 cv
cp
75.257 7.87366 mo
75.391 7.92566 75.51 7.98761 75.612 8.05865 cv
75.714 8.13062 75.797 8.20966 75.861 8.29364 cv
75.924 8.37866 75.966 8.46564 75.987 8.55365 cv
76.009 8.64264 76.008 8.72662 75.984 8.80664 cv
75.938 8.95166 75.873 9.07764 75.789 9.18665 cv
75.706 9.29462 75.609 9.38367 75.5 9.45264 cv
75.391 9.52264 75.273 9.57062 75.146 9.59863 cv
75.02 9.62665 74.888 9.63263 74.751 9.61761 cv
f
83.58 22.0006 mo
543.48 22.0006 li
543.48 5.14063 li
83.58 5.14063 li
cp
false sop
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
.75 lw
1 lc
0 lj
8 ml
[] 0 dsh
false sadj
543.48 5.14063 mo
83.52 5.14063 li
83.52 22.0006 li
543.48 22.0006 li
cp
83.52 5.14063 mo
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+TrajanPro-Bold AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
PXPTLY+TrajanPro-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8707CA086404C32529388F9BE4A5D847A7AE80F65BB4
8760A2E47C9046ADEC4410EE1F3> |-
/slash <1C60D8A8C9B79D2D28CD57DD7AE9E4631B32449A5C091A56909C58DA
3B0C1B22C2EA70E1EFF350E969533DEFF795FC8496B255E95E81A1E78FF1AE98
91C8> |-
/A <1C60D8A8C9B6317D0811AE1C7F2F18D1D1275A5EF29106F56D0F58C32FDD
3AAB3ACEC5EFCD5FD566FD5326A4460B77C20A11191084FE32D9425DD47D451D
CC3A2FE034B2460CA70FB18639A85198CA92FB2830087327C6C9179023364751
80DF3889C6AC5CFC4DF9F429CCE39CA6B807A29AFC0E5CC5789F9C4727070D42
011D0E4B50789FF7CD782D3B0D46768AA18EC9C262D102C936ACBA0ADFD7DB36
08061515EC0C2132799572D6C674C84A28B1F9B5274E9D21BE75DBE56E0E4FE3
4B7969214451E3178D33DABF18487CE14421FD7C20A9D1471005AF5B70337C2F
DBD49EC21FA93B7C36552EBD1F259707A7799526EA54B84984F2F69128DA6E0C
EB899024A33E4B060B3C838918562FC587CE41526E09818F9B7A93B8C880CB85
C5ECBB9668D818F759BC8ABA9CFCECABB6083BF61E6EDB6C1B4E962E6C672380
F899A8> |-
/B <1C60D8A8C9B636759898FA4FC9BEB5C0648EBBD1B379DD2E77C89D3C27FF
7208803E7251ADCC2C115098E70A5AA046A9691CC9FB1C0DEBEDEFE223091E21
07DF0436B0FCA8660F83C0B310104B7403071064D1DC8E97F19113D4428F8EE2
10E5475985E1E0DC688052684025BE6E0840027687F8983D980EB6A1BD594A10
8C26CD8353AB896954234A3A314900E7009C6A25E736A2946591B827437C3C65
DA8584448F6B839C0E78D069DC66CA88E980A7879D740C077A6CAC7FDFF10F64
C0D4D290DAD095CFFDCBF6DB0D189BEB940C4A6897356471CD2A770832EBA861
D9E6F1A0DA439920595816E05C96F3789831AC6D384CDD7DB8B1762EC1DD618A
61DF17DA0BAFBA914461BB8A9BF9FDFEA0596C4084429DDD401E0405CC6F4D07
F800CA01E99FF60B79C2CBB658A43C4FDA679C07828D18679BFEDD131B8D4717
67850D11AB4291C774DBBE8880C77D92E7BFABE9A879B51410A1069C9A7BAEFE
D6EEB670A4E6DF6A309794FA86848434BC67AD85A1799B6CFE5843720E273815
0DBCBAE37EA2F32E4EB13E2E7D3AD941385386404D093563C041F9036AD65902
4A1B4408F674BF011D93A75AA5BE0643CB4CF1C9F202FA57EA51E90B35C8F5DB
B9ACD24F2C147C43F844D25D25D9> |-
/C <1C60D8A8C9B6D5A0DEDEC57B918D61DDFA401F5A49FEA3B89C6864173301
6BDC674395116B42D2387AF24DF2F1DC60C61A5B6585CC0DA86F050A110B506B
B65171C092F0636620BAA275DBDEA04B3E655EC58BDFB8B9B535650BF4DE0E82
1C2ADFD8C9F649E0C395722C228833505318AA21D61F3D55D035246FCF9BC983
692D83F8C9AF492468B91F4CB872C7D1953185BF38A8E7A5B72C7F51E36572D3
718D9C26EEF5DDFAB02F3E79248875F4CA6CC06F7C289C017B388B2CFE4B85A5
1B0090> |-
/D <1C60D8A8C9B5AEADD56FC75D6C909A91873A888DB785DB3FB72A37A42D91
684772622256ABD5268EF0D40FEA1020F6154CAD99CD24A56056CFB7F7D0D857
80F9411E954FB1E826D4391A721AF9077D5FE002AC5CF8129A239A8A051977B0
DE3B3D776459F36F3435258B91D5FCF3CFF859F80391A9FFDB52D4EE1BAA2257
C611B81C5753E6C05E5872B8A6383A15CC4BA04EA40833574734AF4AFFD522E1
F41628731081706594DA73CECEA7FAE2F58F0A28EB9C366608CB43DD4DFA8D7F
5B52B921CDB60F50B20C6D6AB72E3525E683A96530452E99332069C6433FF784
5138579149649DCD1DE2EAE2221A24718E92663920FAA74AFDF5D7695DA9FBC1
5D667AF5CB7B693482F31C3CC4B0E5AD16F6FF87DC01E9248248309DE0F84324
E8DF6BDF53FD481C86AE2D15E7690A15C21ABE554C371AE04F2D8B2886B2EFFC
CB6921BFC8D7F2D41E596D5A91F4DD4B42A2A7C7A0D716479A14ABF010FD7696
08B1AD88F4546AB51F03A4901BC955D846B0B6> |-
/E <1C60D8A8C9B66DDCCE7D8394809968921D769606B41E2425FC9AA1AAC787
FA420E591A30C48CC2916CB9CFA8C97B2DB0202681B13DDBB4D6E5ADAE76F3DB
A0308E9FC54828BBCBA5B48C4CBF3B33650C5FD998497F9694C268923440EA7E
726CE9A605F5BBBC1AFCEB52C6FB49E3930C0096970514B0E830661FB3C29415
EF8A648A8E893273C6091799994997ADF677B517C73ED01CDF6D463F285B3DED
66E8D72854B6700238D3CDD89DA407A1BF2A5A31825568435261DA2F30DAA55C
073368C6BDD587FE90846C39D3E9B012AB3E1A662A8BFEB9DBD6B38E6D3A410D
2857A76E4311F35675A49D61ABD81D416EFFC1A17347CBD1AED991AD4E5BFBFB
5C39F57087E5555A1C16FE737D4735B9A0151AD4D9281ED278E327683D2AF3FA
1AA88D2ED87531AD3F62BB8D5861C91A68CD95C3B19997B26F511715C2343454
B010EED6437008059084679DE8FF33FA83088286A4DF20C6184917D7614BDA4D
FE2D49EB865444AC2B2E02F670FE8D628EC84AA64145A5D8E4412E0DBE2B053C
5372C5A21BB519EC247A39302086C7D84AFB337A9DD83F7F71721D0AFC15DEE5
61112515E6D3C15D92285B0DB6DD76135F9D9C74A5D064B40D4D3512CCE80FE4
82F6034DA7F6C2E7B12389D739DE3B23E896AA6F05E4E36EDC52E7A2173E948D
B27DAC76332BEFA69C206B3E185B6E8612A7C24AC7AD18758C7C1818A8A23934
F20CFA24DCEF596615EC1BAA205CE36852DF465F5DEA8BEDCB8148B9CD477F62
398C99A3B5BC41933CEC3EF1309DCD2F> |-
/F <1C60D8A8C9B663CCD41149D49BA136FE750E6C5CAB5F3C1356BBC1057DB6
70A47A13881EFA217974DC37FF782A8B9C2E7C6555EE68C42C7743A1EE6DD38E
157443E3A3FCD0EF2184552D04AD02E019895D32897F1B260111BCDA2AB068BF
5C7162511474BC169A47560DEE1D5BB3F379AC86F8AA8639D7496D0A3560C08A
C59C5218C620E33F743CB3F1BFA50E805DFA38320B4AB5149D098A38CDB12D83
339AEE8C4AFEF5C7F8577BCA6FF99101BFD638B929BA1674429DCEAB2595CBF2
83CADDDCB608FC530AAB4D32FC62405AB368358A8E69105442D37EB6CB9D38CF
BFF018A7574547BB8067BDC0CFAEDC17E65F4F7F8EF176C2B3C73F0812F3D289
6B30F8FFA0E0BAE937475E0F357E9C75823EE43257902F053D3DD052C548350A
2B41BD013EFFCF32EC8A148C4008D82F6C37B426EDDDFAB39A78B53F65DCAD01
1758A8C75F29CB32DE40B37C108FDED9727BDF606BD1F5E87277363362D7438E
F992679D631DD0962FD9272E83343CBB4E906DDC6087CA996335E23CC2FA4D95
9127C2B32BCE824B3F20236D3B84D85350EDF32870039304CC86C0831E5C52DB
ADBFE79FE110F306D7AB38BC2E568CBCB57B4700080BEF95F6> |-
/G <1C60D8A8C9B598EEFB2DF9C06FA9B4910048381BBCF85C9D0FA613A4A888
2D5664515F8BE2D4256397688ADC45E558A834803ECBE69E34082BC4293CBE95
9CF57E685F9598A647E37072B80812FC1B71A034F0ABD82BA80DC776F2D1D99D
52D73FA1ED2076DE4119315835775A4FB82F5716DF24A634A206E7C9DB67E4B3
098E2BF87D34D5215E1C637A7C79E74566C1293DB50FF14D72A4959225419F91
70494483AA131CF51306A50F4B45FD30B7B0AACCEE82DEFDE465EA3C71CE9EAB
92E7D86C3BBC90A59942CAF47BF9DF29F71A382F063B4FF5316D705B723018CD
FD1A7D3711ADD4667E0B151306EA12CCE9BF8237E0C8C181FFD3D6056FFB5F24
523E96A716D50C9574F7B900B9B40B74D596> |-
/H <1C60D8A8C9B5F2782C4892C8276DD48807AB86E9EA800E2E5F4A6EC5B0D4
AFF926D214B5E8B826B81A449E1E2C384EB3928961505BDAB362A7BA1673AAF9
08747EF287D2333E52E4095918209B22F2384A0BB5B15A068E1F1600968619C8
AD3BF20BEFE2C37D8809C9197E97289B8DCDAE69C781C1620C92582322F382E2
5C53F9370F5FBD6FE74016D82D96376C94ABA00833F3B81D384908360F4B5208
00F53CEE81B525846C47C52172D67D817B2564859075A91D94B998E9D5EF6710
F5B248DC98CE8BCBBD855D522B17F0E9EC7634FCCD5206C5A892B746EF30F1B7
82723A816547EAE467235C1F3F025414CB3369873A1CFFDEE0C99FE70E877380
86E8E2D6D2C5C5B8BD2ABE7F9540E4C2327AD59A2814466905F7BE5AAC96FDAE
3D9AE0B5A8D2B5AC02C0C42BE0193F5D83496D5455A8D4943FF8A18890C116B9
A241B1155422E5B3EDEAF9BA01B6350FC02202FABEF2AB07C73514946009C264
887C63EC30A879631229544B3929A8806A32D8B669F098AAB9B31F371AE6918B
D97B99B04DC029A1514436B39C86CFEA41A0EF059D83750781D3AA6C23EB7A0C
9FC8A457F00A06551E566DF36D855139D173B5DF6889ACD3B418FFA4DD2BE2A1
F35E5A497EF7CD61D56CA41D22B4F469D28511271C92EE53C40D31E01BFE972C
D6158432> |-
/I <1C60D8A8C9B77771C05B04C6A1CDBDED73825D1016AD1A9F739BE3AE28A3
2F89A16FA0ADB365C478020BF11BB9ADC332932373DC2832A2FD54E961E2B084
4B0EB81447C317CA2A36F9297140F653C6CF38B651D9BF313FA9254650245A3A
6E604D8E9EFFEAAF12423E3B4CFD19A9AFAFF5FC58BD3FF4189B6F8AF938C510
BD91FB49103F7E5C2AE8440096A8B2CFB59E1B448BD934D6C96663C7ECAD3789
1B4FEEBF9172B6A7CCC0965D9AA12297E39BBF30EB7B8F6243DD70D9185FBD81
8CFC74B60F41E69C4533165A53D5C2FC5A9B44BA5F12F31CB79A71FA4F70F551
E84E63E5837361F7B7736F91> |-
/K <1C60D8A8C9B6F5769BCBF4C62781455424E738956E373024C7557BCBFCB4
63493EF4D372DFC6EA839BA7755F5B462DAB7331774ADD9117B19C9CAAF7089C
146C2A6D990DD33A9F27EF225557A22353143AC1E9FC199B693AA3ACDD50674C
9C648D18759AADF35228A0968F4CABA62A9AFC924E63E775F31A7432E918A205
99AD6A72FFD808C687C646E8D36401A8C28FB07AB812ECB204C7ED70623A1EE2
8D124843C16E5D2DF344145D6CD10C48355C5336FFDB2F10FFED3C6E5282C6D0
5D2C9F7617683DD6A68C8FAC041C2F0A0C13CA8B3E7DA782DBF878CC063CC519
FE717EADC03355D6476171D68A1EF0F12320B20F43C66BDE5E22A40B706BE95A
89D0363CB1A7B034D054B0EC5EB74646DD1A44F58BC449290AF44C94C2D6D459
776FCF1B8F6CBB7DAD031DC2F662BB1F9A05C2638B958765983743902843DEAD
827ADEF0FE464675C9C760BF314632C3E3910381E0F671F3E8484656766BC5C6
DA2DA58E712399947141ED746F0F0D56CB054FC6934B5CF436882CD5769ECAE1
A7D92E4B26203D3D9628529C8BD17840D3E52D85E8CD39DA12C270F58736D3> |-
/L <1C60D8A8C9B7DE87A3D60DB46F877AC592315853214301CF0A8A7B2D8507
D35A345A806439D0648239CAD749A7CECAC4C52EFDCBB57BB4FE0E911C4AA9A4
A83E1E0502F4DE56DBFD89B6C34960529A8E27B67471F64270E286846BBA1412
BDB5AF89A2BE5E199B33599DCF71FCCD0A9705784F3FD9F75E64FF8D431F59A9
B1A0BF9383D4891B9878B499D8B945B17931BF2E08E6B9E55D6B44259C08979B
72AC1EEAE797529533974CF231EED1156130698D0A93422D89C597FA8FCD71A2
A98F77385EF8CB0EC9E1650C34FF32EC7E13E278F5105877AE28F112FC8D869B
102AA597F652C24D9A771640C30F6B21390B6332E153D3D8A8406E6E9C41FF18
9BE76308BC1A67D933F3D6AE936076B747E33EBA966802CEA2A67EFDD8201B9D
02C30490099DB72859538D7AFD9109512D> |-
/M <1C60D8A8C9B53502F718845662BEF962BDAAA7644DE772943B9A027E841B
2BB84E55828D36F776CA08F56941B74FE6EB2F42BA305EC107CA50E5CBFF0908
A99F6A15A27638A439DC862613C210F1C5A6389ECB21D3B5FD05D665E1729844
18B42AD449627BDF06AD350AFF71D974198324A903A4264DD8E0104AF41B05ED
4C26D6336B5725E33AD48E31BA08AF7E6B2D772D96CFD91E76A5FA6A187546D5
295667873BBA31D58CE08F48122CF5E77C781E2C8869C9D467E5383489E9F53D
EF78EC36EF23CAF18C7A0287ED7542FADAAE5FB2F88C0BAF43E2F8BFD8AF71BF
C13A799D15983F79C0E7C5CB516BB1140A8FB897F19DD9B0028ED1E4334F1FEF
0ED9448B3C6C212FF5E442EB3458512F12EF943753F7226C22661FB9CBDFB338
15B342DFB4948FF84CE6DC0D> |-
/N <1C60D8A8C9B5D51E1C59E72C182610E44C54205AC7B36B907A5E44739794
B728F1167D2F9F84697EE50B313BC2B81989A775A0D36B2DD0AF2B69011CCE7C
77BADB33CA75C553800B4095B76B6760838B6973158FFD7CD78D230CA0A0D966
EED590CA7F6F6584E7910A6453C58E1D66782E1FACADB08D602963368511C92C
5F81F4DFC14427881E816F76DC1CB015DE8AF778CDC4C950BF7AE4147406B0E8
8CB92BC0BD3DE72028C488D0B82BB4131CF90412A2E23017C4C19922E7456EEF
B5CA409A6AD2AEB4907650381DD8F7C9B779AB712C514BD38834F6DDD846B906
87B1686C03BA04A1888004FFC398DB5DD8187A3A30E57838144E84912F510837
7AF1E689097D437715DFC1129B8AE0EFB38D2208D7DADF960682D1D058CA2337
7D95FEF59C76B35C1A16C2AE4BAB4DD4475366CF2B0A8F424FD2524CE43BF0D1
CAFD421CE2E35B1184FD2664> |-
/O <1C60D8A8C9B5A1283DA9DE0820D5D7AD9508AE2FC2FBE8E1816E90EB7702
EF0D16B049CDD6C1C2364D8EA3AA8B27853DED879C920AAF7CC61E500241716A
1A9BAB4BDC9EA7D7A980F64B04B3930F57B7E52C4F122A8079E820A496F8DCDA
B9AB912F6B6EBF19BD> |-
/P <1C60D8A8C9B64228BF42DA83AC0EDC62ACE8BFF3C3A98A2269D17DC298E7
184EE1A97CAD8C5AB28966A959CA9A94E51B9AB02E7BB583D2B5CAE7D55C74BF
BA2D904CE684CC8798D6A0D7C4BCF92CDABF939DE2E985C3A5F5072FCBB3B7CC
0BBCAEC8BC9220860A5E601087D7BF5AA8009B78C1734AF5EFADBFE5A30517BD
7B9685F30EC68BE94A39E9A6643E3D4A3A436FF1ADEE79C9EBAB796474870600
7C33AE8DDA4B1081F93E361EF82C605BD384A0EC07E111416F2723D9AFBC98F5
05F5579F6C52E3E8BBFC8DE2F10D91BA92F51B86C8FEFCECF4F82C8CD1CEBBF2
A974C0C1ED9D8634C50415B9550AE57B42344D0AD3C0B275D6FB4C3CECFD2C70
F2E9F61CB67D29698E7CB8EC07614397EE0A15468C5A08FE0ED5B54D1F90EAD6
40228ED8F069462E067E733CD74710B1EDEC081589C599F4220FF703DE5FEBD5
3AA4105A115BDC64D27C27A50C> |-
/R <1C60D8A8C9B6E66E1C110949D9635A10AF5FEF6C72C5938FA84EF1AEDFFB
407976F30ADF68A57DB0B94AB8675CF7AE74874EC6292DC9812412E1FC9EFD2C
A497CC66F198D69ED9D8384329B99E2F409BD24743CDD3905DD1FF1EA38B61C6
86EF21DAC425FF21113953C4B86F5298189607D4AAC01AD9B61F73D45CA159EF
E3D31B320A160110A27649FB2A01ECF734A0F2BADD12430D61C1C1CF4049F08B
1E505A60A3B28A58635B6793262592DE77757F39178F581CED390557538490CE
84C33F343F9474604FEE43920E37E53E0A59ACB09F358DC4FEEC068C331BAAB7
8704D6941546BB5C2106C9D1D3E7D9A0AD172EEE2272591203EDF72CFCFA82D2
11B6BC753EA2D4F150363DF5EF851AE9D4E61369CB4DEC1309CAE4514EF231A5
D96F1E5767B50550C511F59291FC8AE5FED28A6C3E420A4919255C47EB24B551
753F9BADAFBE0DE28259695CABCFD7DC9D551DAB17FB97A4B7B3A27E1D94CE4D
7874CDC781F3C172327BDB88B077168FC806434083E959858797A6511E> |-
/S <1C60D8A8C9B7F51B95A0DFD92CF0B9552EA2D8DB80CD668D35E3A70F4576
D4238E8EEA2F046EF8BC16C7785D1607E04A62100A5AFF084F37B544AFC2004C
0BC4AE1356D2B0EC8700AB99117F620401AEDDDFA69D53F0F4E5314303A9C779
D85053ADE7DEA169C445735EBAC333F65F31A077498B479248885315A58C9DAE
7AD6ABA3F9562E1A36EA3EA3274E191D557F04A6CB9FA3B240660C95B31FD1EC
ACE3874E2F240022DE09CA2256274ED580EE94FBAA5793BD5F9D37682BE7C541
ACC5EE4D95FB35149493D2CCA9BEA729ABD0DCEC9C95E902EA9DD124CA919CBA
F3364C7699DDBE268B46D54393CC359D98EA67700B83CEF348489F1F90A16D> |-
/T <1C60D8A8C9B63B8DE7FFDDFD883E00670DE251215EBB652F92C831349498
B5CB6464515FBA79D194EDD0173A6C8452FF30D4FACCDC487E293D0AE52CC508
9FD0C892B13B9C208948940284065F12C5A8712886ADF51BA9E9DADC8B152D5B
98851A067D0E8EBC653C7D05F0905F75DDB91A899BBE63405604DB7DADC038C0
DD7CAA0A4D643A98807A638FB89F3892969AEE0E23509F6ADD741C90360A0E63
F30043B7613195030D645A1577556FC32C20897861C8C7DDDC2E4FD6517ED767
90A769FA4BD0A6317CD61B743F5AD886897629FA9E1A3F713E9B48F61E935464
F42BAEA06B9FD6B9CD604F5764BEB7F3DE80BC4BE9ABF739FD4668F79B682BAC
816052E85AFA85558707ECA42D91007F00F9DB1A11B458AB1C18F2B963EC9525
B2A4FC9E7AEAC73BB38032EC2CA3B162BDD169379DF78BFE129D3EF25F62EC78
17FF5129> |-
/U <1C60D8A8C9B68968DFDD8E740AEA257F606DE674D1A7490A290838625734
D6888A39F7E17ABBC22B16D3B924987D35CB9E114F5F83DC17DF991715591C7F
2C4C09271B612FA2F9B6AE74DC1DF2E969140F28154F556B3D74119D20843F36
72A3975A7E1616F60C7069F4C2AC0C2678D90E02E622F4B89A27AB7E4407EEC7
24F9890E7B736356D84F1048FB8CB32BCF87D20B0A238B16DE896D5F43370370
38BEEA1EF471525F00F9071B3FBE55F7894691EB268FC18DE533BFE5AFE626F3
1D506DCF1865C4B4AE24F66BEBD0BB7F2B6937953D5096BE0412C7C37DC78855
D0A5F622C6FAC9908372B446B3B6FC7D6EED1FA379EC7005F087BE083197051D
8866304B6CC9870CE00B190FE71BFD34DB949D71AB520645F7386FEB41613F82
CA39D8212E7619194B43E37088B6B2C8DB41DC79> |-
/W <1C60D8A8C9B54354802C4598A1984154000750FB4EEA1F6E391CF12A37B6
45076FD083240B715D2C41589ECFBB4274FFA160AF480F931593BD62BC60A60E
CB444C29903BDF30487EF0D5A8B841DF3E96B8F8D1C705694BE1AE813602067C
01FE744D54976EF31A0CFE5D8B3033012D5C9B70B71150CA76DD688EDB8953A2
7631F534E460F8826E40F5881E74E041428A3556A7C099B9AA81296F1EC87B16
C4473BE83B3099D18A027C22D0D8A5E4BE02AFDB4CFD18D5873A0F3D29BF7435
FF9CF5E437D0678D5F2DAE98D9651624D5958563F6EF6144631667035835E9AE
6CD864244106CF2A9E138D9C586CA93C6AAFECBFB873D796E988CF97134C4B12
59D6517F707F8FAE2F93D9D04A874145C23300BFA51C64CAEF7C0DFC7EBAE913
D2803511ECDBD9992439E44675C35F42F47AC62236FA84D5335A3A89FA38908B
1E6C731EFECD60F17DE450E1F8C09B30A68EC310> |-
/Y <1C60D8A8C9B653D71C98D29B7E1FDFC8A12557A8DDBA037172B609A19336
D535BF868352FCEC9CF26E678C81F8CB01C17FA3891E19C9375DBF6B8CC06756
3D7357783D30C2D57453FB750A3F96D7A79AF978AB834060DD448F441F46F299
675D285BAF53662A9B82A7238630789AE4F1C383D7F857990B907B4EA7094BC0
39ED6F70CEE113F932EF59DB59FF7180AFF776A38AEFA7EAA345513D88773045
B76B629DF0117172B59FA7B42C9FF2FC4CA2F9CECEEAE30CE23F3FB61692243D
AC083049F7C5B5D327F4E84AFEB53BBA969FC0766C5438085ED59CBCDB9F7A92
0BE1E8B5778534F1909ED6B01A18FF662CE04464BB1F544D5A15B635DEF0AEB9
F13EC1F99FC40CD89FF70F77286E3C41F0952C147CD035FFC22F9EEFBA4BF075
861DBBF19B516305CE7B128107077FB1B586C323F0194FC1B8867D69C2A464A8
FD5134F8D3F322885BDC9E909F103EE57ABA1C961BE3A941F600BBE6004ED860
A206D6FB5CB069> |-
/bar <1C60D8A8C9B7A73DB70BE436C4CF058CDDA6913167E1634348D007B0E4
2653> |-
systemdict /gcheck known {setglobal} if end {end} if
end
PXPTLY+TrajanPro-Bold /Encoding get
dup 46 /period put
dup 47 /slash put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 89 /Y put
dup 124 /bar put
pop
%ADOEndSubsetFont
/PXPTLY+TrajanPro-Bold*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /slash 17{/.notdef}rp /A /B 
/C /D /E /F /G /H /I /.notdef 
/K /L /M /N /O /P /.notdef /R 
/S /T /U /.notdef /W /.notdef /Y 34{/.notdef}rp 
/bar 131{/.notdef}rp]
PXPTLY+TrajanPro-Bold nf
PXPTLY+TrajanPro-Bold*1 [7.02 0 0 -7.02 0 0 ]msf
91.14 16.0003 mo
(DANISH CENTRE FOR MUSIC PUBLICATION  |  TH)
[6.57567 4.85992 6.65289 3.17793 4.01965 6.84029 2.09971 5.58022 4.44017 6.65291 4.98915 5.22011 
4.44019 2.0997 4.37131 6.48018 5.30504 2.0997 7.32678 5.94035 4.09056 3.17792 5.62094 2.04004 
4.56018 6.00003 4.92032 4.25972 3.17792 5.58022 4.9189 4.98917 3.17792 6.4198 6.65288 2.09973 
2.09967 3.47986 2.09967 2.09973 4.98914 0 ]xsh
283.62 16.0003 mo
(E ROYAL LIBRARY|COPENHAGEN  |  WWW.KB.DK/DCM)
[4.44299 2.0997 5.30646 6.48016 4.68024 4.92029 4.25339 2.04004 4.25339 3.11966 4.92032 5.27979 
4.92029 5.30646 8.88028 7.67987 5.62234 6.48019 4.6044 4.37979 6.60025 6.8403 4.85992 6.24008 
4.44299 6.6543 2.0997 2.0997 3.4798 2.09973 2.09967 7.55991 7.55988 7.62027 1.76129 5.39774 
4.96945 1.6799 6.57706 5.39771 3.71997 6.60022 5.58023 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/PXPTLY+TrajanPro-Bold*1 uf
/PXPTLY+TrajanPro-Bold uf
/PBAAAA+TrajanPro-Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
