%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: footer_new.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: atge
%%CreationDate: 2/24/2016, 8:17:48 AM
%%BoundingBox: 0 0 429 27
%%HiResBoundingBox: 0 0 428.0762 26.9590
%%CropBox: 0 0 428.0762 26.9590
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1156 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:ModifyDate="2016-02-24T08:12:52+01:00"
   xmp:CreateDate="2016-02-24T07:04:12+01:00"
   xmp:MetadataDate="2016-02-24T08:12:52+01:00"
   xmp:CreatorTool="Acrobat PDFMaker 11 til Word"
   xmpMM:DocumentID="uuid:ab5a6f9f-63de-4133-9d1a-49e0c9462d5f"
   xmpMM:InstanceID="uuid:aa91d3b8-3c56-4708-b315-7c5236ce4257"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 11.0"
   pdfx:SourceModified="D:20160224060326"
   pdfx:Company="">
   <xmpMM:subject>
    <rdf:Seq>
     <rdf:li>5</rdf:li>
    </rdf:Seq>
   </xmpMM:subject>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>atge</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -26.959 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 26.959 li
428.076 26.959 li
428.076 0 li
cp
clp
[1 0 0 1 -56.6929 0 ]ct
false sop
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: PBAAAA+TrajanPro-Bold Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /PBAAAA+TrajanPro-Bold def
/FontInfo 7 dict dup begin
/Notice (Copyright 1989, 1999, 2000 Adobe Systems Incorporated. All rights reserved. Trajan is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def
/Weight (Bold) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
def
/FontBBox {-248 -284 1528 985} def
end
systemdict begin
dup /Private
15 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-17 -0 638 660 750 775] def
/OtherBlues [-261 -256 -222 -209 301 305 405 408] def
/FamilyBlues [-17 -0 638 656 750 767] def
/FamilyOtherBlues [-273 -255 -252 -239 -214 -209 301 305 405 408] def
/StdHW [47] def
/StdVW [118] def
/StemSnapH [47 55] def
/StemSnapV [118 126] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/space <1C60D8A8C9B83E2D40> |-
/.notdef <1C60D8A8C9B7A73DC56ED86593A26411A239A9F576A4BB06AD4079
CBD73625AFEDCD129CE8B573E3C4C05A38ADB9D43C2E751D7FE69FF5F6F4BCAD
D50244964753D5C819FE275F32A27920BE3EA3D1AFD957ADA922B28CD2CD8E15
58DDDC89C143A1> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EKRDSP+TrajanPro-Bold /PBAAAA+TrajanPro-Bold findfont ct_VMDictPut
/EKRDSP+TrajanPro-Bold*1 
[32{/.notdef}rp /space 223{/.notdef}rp]
EKRDSP+TrajanPro-Bold nf
EKRDSP+TrajanPro-Bold*1 [6.96 0 0 -6.96 0 0 ]msf
110.64 25.338 mo
( )sh
112.798 25.338 mo
( )sh
56.6374 32.4163 mo
( )sh
56.6374 41.2972 mo
( )sh
98.0896 17.2065 mo
97.4541 17.1748 li
96.8981 17.0955 li
96.3897 16.9687 li
95.9449 16.7784 li
95.5478 16.5405 li
95.1824 16.2551 li
94.8488 15.9062 li
94.5946 15.5573 li
94.404 15.1767 li
94.261 14.7803 li
94.1657 14.3997 li
94.118 14.0191 li
94.1022 13.6544 li
94.118 13.3689 li
94.1657 13.0518 li
94.2451 12.7029 li
94.3722 12.3382 li
94.5629 11.9576 li
94.8011 11.5928 li
95.103 11.244 li
95.3413 11.022 li
95.6272 10.8317 li
95.9449 10.6572 li
96.3262 10.4987 li
96.7551 10.3877 li
97.2317 10.3242 li
97.7877 10.3083 li
98.1849 10.3083 li
98.6297 10.3401 li
99.0745 10.4035 li
99.5352 10.4828 li
99.9641 10.5463 li
100.012 10.5463 li
100.044 10.5621 li
100.075 10.5779 li
100.075 10.6097 li
100.075 10.6414 li
100.075 10.7048 li
100.075 10.7841 li
100.059 10.9268 li
100.044 11.133 li
100.028 11.3232 li
100.028 11.5294 li
100.028 11.7514 li
100.012 11.9258 li
100.012 12.0369 li
100.012 12.1003 li
99.9959 12.1638 li
99.98 12.1954 li
99.9641 12.2113 li
99.9323 12.2272 li
99.9005 12.2113 li
99.8847 12.1954 li
99.8688 12.1479 li
99.8688 12.1003 li
99.8688 12.0369 li
99.837 11.7831 li
99.7576 11.5294 li
99.6464 11.3074 li
99.4875 11.133 li
99.2651 10.9902 li
98.9633 10.8475 li
98.5979 10.7365 li
98.1849 10.6572 li
97.7242 10.6414 li
97.2635 10.6572 li
96.8663 10.7048 li
96.5327 10.8 li
96.2627 10.8951 li
96.0244 11.022 li
95.8496 11.1488 li
95.6908 11.2757 li
95.4207 11.5928 li
95.1983 11.9417 li
95.0553 12.3223 li
94.96 12.7188 li
94.9123 13.131 li
94.8964 13.5751 li
94.9282 14.035 li
95.0235 14.4789 li
95.1824 14.8913 li
95.3889 15.2877 li
95.6431 15.6525 li
95.9449 15.9855 li
96.2944 16.2551 li
96.6916 16.4929 li
97.1205 16.6515 li
97.5812 16.7625 li
98.0896 16.7942 li
98.4708 16.7942 li
98.8203 16.7466 li
99.1221 16.6674 li
99.3922 16.5405 li
99.6305 16.366 li
99.7417 16.1916 li
99.8529 15.9855 li
99.9164 15.7793 li
99.9482 15.6207 li
99.9641 15.5573 li
99.98 15.5256 li
100.012 15.4939 li
100.044 15.4939 li
100.059 15.4939 li
100.075 15.5097 li
100.091 15.5414 li
100.091 15.5732 li
100.107 15.6207 li
100.091 15.6842 li
100.075 15.8269 li
100.059 16.0013 li
100.028 16.1916 li
99.98 16.3978 li
99.9482 16.5881 li
99.9005 16.7466 li
99.8688 16.8418 li
99.837 16.9052 li
99.7735 16.9528 li
99.6781 17.0004 li
99.424 17.0797 li
99.1221 17.1431 li
98.7885 17.1748 li
98.439 17.2065 li
cp
89.0981 17.1589 mo
88.7804 17.1431 li
88.4626 17.1273 li
88.1608 17.1114 li
87.8907 17.0955 li
87.6683 17.0797 li
87.5095 17.0638 li
87.43 17.0638 li
87.3665 17.0638 li
87.2394 17.0638 li
87.0806 17.0638 li
86.9058 17.0797 li
86.7152 17.0797 li
86.5722 17.0797 li
86.5087 17.0797 li
86.461 17.0638 li
86.4292 17.0479 li
86.4292 17.0162 li
86.4292 17.0004 li
86.4451 16.9845 li
86.461 16.9687 li
86.4928 16.9528 li
86.6357 16.9528 li
86.7628 16.9211 li
86.874 16.8735 li
86.9376 16.7625 li
86.9852 16.6198 li
87.017 16.4453 li
87.0329 16.1758 li
87.0488 15.8586 li
87.0647 15.4622 li
87.0647 15.0181 li
87.0647 14.5266 li
87.0647 12.9725 li
87.0647 12.5126 li
87.0647 12.1479 li
87.0647 11.8466 li
87.0647 11.6246 li
87.0647 11.4343 li
87.0488 11.2916 li
87.0488 11.1805 li
87.0488 11.0695 li
87.017 10.8793 li
86.9535 10.7365 li
86.8423 10.6414 li
86.6675 10.5779 li
86.5722 10.5621 li
86.461 10.5463 li
86.3657 10.5463 li
86.3339 10.5463 li
86.318 10.5304 li
86.3021 10.5145 li
86.2863 10.4987 li
86.3021 10.4669 li
86.3339 10.4352 li
86.3657 10.4352 li
86.4292 10.4194 li
86.6357 10.4194 li
86.8581 10.4352 li
87.0647 10.4352 li
87.2394 10.4511 li
87.3665 10.4511 li
87.43 10.4511 li
87.5412 10.4511 li
87.7477 10.4352 li
88.0019 10.4352 li
88.3038 10.4194 li
88.6215 10.4194 li
88.9074 10.4194 li
89.2252 10.4194 li
89.5747 10.4352 li
89.94 10.4669 li
90.3213 10.5145 li
90.7184 10.6097 li
91.0997 10.7365 li
91.481 10.9109 li
91.8305 11.133 li
92.1641 11.4343 li
92.3706 11.688 li
92.5771 11.9734 li
92.7518 12.3223 li
92.8948 12.7188 li
92.9901 13.1628 li
93.0219 13.6702 li
92.9743 14.1935 li
92.8789 14.6851 li
92.7201 15.1292 li
92.5294 15.5256 li
92.307 15.8586 li
92.0688 16.144 li
91.894 16.3026 li
91.7034 16.4771 li
91.4492 16.6515 li
91.1474 16.8101 li
90.7979 16.9528 li
90.3848 17.0638 li
89.9241 17.1431 li
89.384 17.1589 li
cp
88.1608 10.7365 mo
88.0178 10.7682 li
87.9225 10.7841 li
87.8749 10.8159 li
87.8272 10.8475 li
87.8113 10.8951 li
87.8113 10.9586 li
87.8113 11.1647 li
87.8113 11.4343 li
87.7954 11.7514 li
87.7954 12.1161 li
87.7954 12.4809 li
87.7954 12.8298 li
87.7954 13.924 li
87.7954 14.3839 li
87.8113 14.7961 li
87.8113 15.1767 li
87.8113 15.478 li
87.8113 15.7 li
87.8272 15.8428 li
87.8272 16.033 li
87.8431 16.2233 li
87.8749 16.3978 li
87.9225 16.5088 li
87.9861 16.5881 li
88.0814 16.6515 li
88.2243 16.7149 li
88.4309 16.7784 li
88.685 16.8259 li
89.0186 16.8577 li
89.4158 16.8577 li
89.9082 16.8259 li
90.3531 16.7308 li
90.782 16.5563 li
91.1791 16.3344 li
91.5127 16.0489 li
91.7351 15.7952 li
91.9099 15.478 li
92.037 15.1292 li
92.1482 14.7485 li
92.1958 14.3521 li
92.2276 13.9398 li
92.1958 13.4799 li
92.1164 13.0835 li
92.0052 12.7188 li
91.8622 12.4016 li
91.7034 12.132 li
91.5445 11.91 li
91.3698 11.7197 li
91.0044 11.3867 li
90.6231 11.133 li
90.226 10.9586 li
89.8129 10.8475 li
89.384 10.7682 li
88.9392 10.7365 li
88.4944 10.7206 li
88.3355 10.7206 li
cp
109.623 17.0797 mo
109.496 17.0797 li
109.305 17.0797 li
109.067 17.0638 li
108.813 17.0638 li
108.543 17.0479 li
108.32 17.0479 li
108.145 17.0321 li
108.066 17.0162 li
108.002 17.0162 li
107.955 17.0004 li
107.923 16.9845 li
107.907 16.9687 li
107.907 16.937 li
107.907 16.9052 li
107.923 16.8893 li
107.971 16.8735 li
108.002 16.8259 li
108.002 16.7149 li
108.002 16.5563 li
107.573 12.021 li
107.542 12.021 li
105.381 16.6039 li
105.286 16.7942 li
105.222 16.937 li
105.175 17.0162 li
105.143 17.0479 li
105.095 17.0638 li
105.063 17.0479 li
105.016 17.0162 li
104.968 16.937 li
104.905 16.8259 li
104.825 16.6674 li
104.746 16.5247 li
104.65 16.3344 li
104.539 16.1124 li
104.428 15.8745 li
104.301 15.6366 li
104.174 15.3829 li
104.063 15.1608 li
103.967 14.9547 li
103.872 14.7961 li
103.824 14.6693 li
103.793 14.6217 li
103.745 14.5424 li
103.681 14.3997 li
103.586 14.1935 li
103.475 13.9557 li
103.348 13.6702 li
103.221 13.3848 li
103.078 13.0994 li
102.951 12.8298 li
102.839 12.576 li
102.744 12.3699 li
102.665 12.1954 li
102.617 12.1003 li
102.585 12.1003 li
102.236 16.1916 li
102.236 16.4136 li
102.22 16.6356 li
102.252 16.7625 li
102.331 16.8577 li
102.458 16.9211 li
102.601 16.937 li
102.712 16.9528 li
102.792 16.9528 li
102.824 16.9687 li
102.855 16.9845 li
102.871 17.0004 li
102.855 17.0321 li
102.839 17.0638 li
102.808 17.0797 li
102.76 17.0797 li
102.712 17.0797 li
102.506 17.0797 li
102.299 17.0797 li
102.109 17.0638 li
101.966 17.0638 li
101.886 17.0638 li
101.807 17.0638 li
101.664 17.0638 li
101.489 17.0797 li
101.299 17.0797 li
101.14 17.0797 li
101.092 17.0797 li
101.044 17.0797 li
101.013 17.0638 li
100.997 17.0321 li
100.997 17.0004 li
100.997 16.9845 li
101.013 16.9687 li
101.044 16.9687 li
101.076 16.9528 li
101.156 16.9528 li
101.235 16.9528 li
101.346 16.937 li
101.473 16.8893 li
101.553 16.7942 li
101.616 16.6674 li
101.648 16.5247 li
101.68 16.366 li
101.696 16.2075 li
102.331 10.4669 li
102.347 10.4035 li
102.363 10.356 li
102.379 10.3242 li
102.395 10.3083 li
102.426 10.3083 li
102.474 10.3083 li
102.506 10.3242 li
102.538 10.3718 li
102.569 10.4352 li
105.27 15.9696 li
107.859 10.4352 li
107.875 10.4035 li
107.907 10.356 li
107.923 10.3242 li
107.955 10.3083 li
107.987 10.3083 li
108.018 10.3083 li
108.05 10.3401 li
108.066 10.3877 li
108.082 10.4511 li
108.098 10.5463 li
108.686 15.9537 li
108.701 16.1124 li
108.749 16.3026 li
108.797 16.4929 li
108.876 16.6515 li
109.003 16.7942 li
109.162 16.8735 li
109.4 16.937 li
109.607 16.9528 li
109.734 16.9528 li
109.766 16.9687 li
109.782 16.9687 li
109.798 16.9845 li
109.813 17.0004 li
109.798 17.0321 li
109.766 17.0479 li
109.734 17.0638 li
109.686 17.0797 li
cp
f
88.4944 10.7206 mo
88.3355 10.7206 li
88.1608 10.7365 li
88.0178 10.7682 li
87.9225 10.7841 li
87.8748 10.8158 li
87.8272 10.8475 li
87.8113 10.8951 li
87.8113 10.9585 li
87.8113 11.1647 li
87.8113 11.4342 li
87.7954 11.7514 li
87.7954 12.1161 li
87.7954 12.4809 li
87.7954 12.8297 li
87.7954 13.9239 li
87.7954 14.3838 li
87.8113 14.7961 li
87.8113 15.1767 li
87.8113 15.478 li
87.8113 15.7 li
87.8272 15.8427 li
87.8272 16.033 li
87.8431 16.2233 li
87.8748 16.3977 li
87.9225 16.5087 li
87.9861 16.588 li
88.0814 16.6515 li
88.2243 16.7149 li
88.4309 16.7783 li
88.685 16.8259 li
89.0186 16.8576 li
89.4158 16.8576 li
89.9083 16.8259 li
90.3531 16.7307 li
90.782 16.5563 li
91.1791 16.3343 li
91.5127 16.0489 li
91.7351 15.7951 li
91.9099 15.478 li
92.037 15.1291 li
92.1482 14.7485 li
92.1958 14.3521 li
92.2276 13.9398 li
92.1958 13.4799 li
92.1164 13.0835 li
92.0052 12.7187 li
91.8622 12.4016 li
91.7034 12.132 li
91.5445 11.91 li
91.3698 11.7197 li
91.0044 11.3867 li
90.6231 11.1329 li
90.226 10.9585 li
89.8129 10.8475 li
89.384 10.7682 li
88.9392 10.7365 li
88.4944 10.7206 li
cp
88.9074 10.4193 mo
89.2252 10.4193 li
89.5747 10.4352 li
89.94 10.4669 li
90.3213 10.5145 li
90.7184 10.6096 li
91.0997 10.7365 li
91.481 10.9109 li
91.8305 11.1329 li
92.1641 11.4342 li
92.3706 11.688 li
92.5771 11.9734 li
92.7519 12.3223 li
92.8948 12.7187 li
92.9901 13.1627 li
93.0219 13.6702 li
92.9743 14.1935 li
92.8789 14.6851 li
92.7201 15.1291 li
92.5294 15.5256 li
92.307 15.8586 li
92.0688 16.144 li
91.894 16.3026 li
91.7034 16.477 li
91.4492 16.6515 li
91.1474 16.81 li
90.7979 16.9528 li
90.3848 17.0638 li
89.9241 17.1431 li
89.384 17.1589 li
89.0981 17.1589 li
88.7803 17.1431 li
88.4626 17.1272 li
88.1608 17.1113 li
87.8907 17.0955 li
87.6683 17.0796 li
87.5095 17.0638 li
87.43 17.0638 li
87.3665 17.0638 li
87.2394 17.0638 li
87.0806 17.0638 li
86.9058 17.0796 li
86.7152 17.0796 li
86.5722 17.0796 li
86.5087 17.0796 li
86.461 17.0638 li
86.4292 17.0479 li
86.4292 17.0162 li
86.4292 17.0003 li
86.4451 16.9845 li
86.461 16.9686 li
86.4928 16.9528 li
86.6357 16.9528 li
86.7628 16.921 li
86.874 16.8735 li
86.9376 16.7625 li
86.9852 16.6197 li
87.017 16.4453 li
87.0329 16.1757 li
87.0488 15.8586 li
87.0647 15.4621 li
87.0647 15.0181 li
87.0647 14.5265 li
87.0647 12.9724 li
87.0647 12.5126 li
87.0647 12.1478 li
87.0647 11.8465 li
87.0647 11.6245 li
87.0647 11.4342 li
87.0488 11.2915 li
87.0488 11.1805 li
87.0488 11.0695 li
87.017 10.8792 li
86.9535 10.7365 li
86.8423 10.6414 li
86.6675 10.5779 li
86.5722 10.5621 li
86.461 10.5462 li
86.3657 10.5462 li
86.3339 10.5462 li
86.318 10.5303 li
86.3021 10.5145 li
86.2862 10.4986 li
86.3021 10.4669 li
86.3339 10.4352 li
86.3657 10.4352 li
86.4292 10.4193 li
86.6357 10.4193 li
86.8581 10.4352 li
87.0647 10.4352 li
87.2394 10.4511 li
87.3665 10.4511 li
87.43 10.4511 li
87.5412 10.4511 li
87.7478 10.4352 li
88.0019 10.4352 li
88.3038 10.4193 li
88.6215 10.4193 li
88.9074 10.4193 li
cp
102.426 10.3083 mo
102.474 10.3083 li
102.506 10.3242 li
102.538 10.3718 li
102.569 10.4352 li
105.27 15.9696 li
107.859 10.4352 li
107.875 10.4035 li
107.907 10.3559 li
107.923 10.3242 li
107.955 10.3083 li
107.987 10.3083 li
108.018 10.3083 li
108.05 10.3401 li
108.066 10.3876 li
108.082 10.4511 li
108.098 10.5462 li
108.686 15.9537 li
108.701 16.1123 li
108.749 16.3026 li
108.797 16.4929 li
108.876 16.6515 li
109.003 16.7942 li
109.162 16.8735 li
109.4 16.9369 li
109.607 16.9528 li
109.734 16.9528 li
109.766 16.9686 li
109.782 16.9686 li
109.798 16.9845 li
109.813 17.0003 li
109.798 17.032 li
109.766 17.0479 li
109.734 17.0638 li
109.686 17.0796 li
109.623 17.0796 li
109.496 17.0796 li
109.305 17.0796 li
109.067 17.0638 li
108.813 17.0638 li
108.543 17.0479 li
108.32 17.0479 li
108.145 17.032 li
108.066 17.0162 li
108.002 17.0162 li
107.955 17.0003 li
107.923 16.9845 li
107.907 16.9686 li
107.907 16.9369 li
107.907 16.9052 li
107.923 16.8893 li
107.971 16.8735 li
108.002 16.8259 li
108.002 16.7149 li
108.002 16.5563 li
107.573 12.021 li
107.542 12.021 li
105.381 16.6039 li
105.286 16.7942 li
105.222 16.9369 li
105.175 17.0162 li
105.143 17.0479 li
105.095 17.0638 li
105.063 17.0479 li
105.016 17.0162 li
104.968 16.9369 li
104.905 16.8259 li
104.825 16.6673 li
104.746 16.5246 li
104.65 16.3343 li
104.539 16.1123 li
104.428 15.8744 li
104.301 15.6366 li
104.174 15.3828 li
104.063 15.1608 li
103.967 14.9547 li
103.872 14.7961 li
103.824 14.6692 li
103.793 14.6217 li
103.745 14.5424 li
103.681 14.3997 li
103.586 14.1935 li
103.475 13.9556 li
103.348 13.6702 li
103.221 13.3848 li
103.078 13.0993 li
102.951 12.8297 li
102.839 12.576 li
102.744 12.3699 li
102.665 12.1954 li
102.617 12.1003 li
102.585 12.1003 li
102.236 16.1916 li
102.236 16.4136 li
102.22 16.6356 li
102.252 16.7625 li
102.331 16.8576 li
102.458 16.921 li
102.601 16.9369 li
102.712 16.9528 li
102.792 16.9528 li
102.824 16.9686 li
102.855 16.9845 li
102.871 17.0003 li
102.855 17.032 li
102.839 17.0638 li
102.808 17.0796 li
102.76 17.0796 li
102.712 17.0796 li
102.506 17.0796 li
102.299 17.0796 li
102.109 17.0638 li
101.966 17.0638 li
101.886 17.0638 li
101.807 17.0638 li
101.664 17.0638 li
101.489 17.0796 li
101.299 17.0796 li
101.14 17.0796 li
101.092 17.0796 li
101.044 17.0796 li
101.013 17.0638 li
100.997 17.032 li
100.997 17.0003 li
100.997 16.9845 li
101.013 16.9686 li
101.044 16.9686 li
101.076 16.9528 li
101.156 16.9528 li
101.235 16.9528 li
101.346 16.9369 li
101.473 16.8893 li
101.553 16.7942 li
101.616 16.6673 li
101.648 16.5246 li
101.68 16.366 li
101.696 16.2074 li
102.331 10.4669 li
102.347 10.4035 li
102.363 10.3559 li
102.379 10.3242 li
102.395 10.3083 li
102.426 10.3083 li
cp
97.7877 10.3083 mo
98.1849 10.3083 li
98.6297 10.3401 li
99.0745 10.4035 li
99.5352 10.4828 li
99.9641 10.5462 li
100.012 10.5462 li
100.044 10.5621 li
100.075 10.5779 li
100.075 10.6096 li
100.075 10.6414 li
100.075 10.7048 li
100.075 10.7841 li
100.059 10.9268 li
100.044 11.1329 li
100.028 11.3232 li
100.028 11.5294 li
100.028 11.7514 li
100.012 11.9258 li
100.012 12.0368 li
100.012 12.1003 li
99.9959 12.1637 li
99.98 12.1954 li
99.9641 12.2113 li
99.9323 12.2271 li
99.9006 12.2113 li
99.8847 12.1954 li
99.8688 12.1478 li
99.8688 12.1003 li
99.8688 12.0368 li
99.837 11.7831 li
99.7576 11.5294 li
99.6464 11.3074 li
99.4875 11.1329 li
99.2651 10.9902 li
98.9633 10.8475 li
98.5979 10.7365 li
98.1849 10.6572 li
97.7242 10.6414 li
97.2635 10.6572 li
96.8663 10.7048 li
96.5327 10.7999 li
96.2627 10.8951 li
96.0244 11.0219 li
95.8496 11.1488 li
95.6908 11.2757 li
95.4207 11.5928 li
95.1983 11.9417 li
95.0553 12.3223 li
94.96 12.7187 li
94.9123 13.131 li
94.8965 13.575 li
94.9282 14.0349 li
95.0236 14.4789 li
95.1824 14.8912 li
95.3889 15.2877 li
95.6431 15.6524 li
95.9449 15.9854 li
96.2944 16.255 li
96.6916 16.4929 li
97.1205 16.6515 li
97.5812 16.7625 li
98.0895 16.7942 li
98.4708 16.7942 li
98.8203 16.7466 li
99.1221 16.6673 li
99.3922 16.5405 li
99.6305 16.366 li
99.7417 16.1916 li
99.8529 15.9854 li
99.9164 15.7793 li
99.9482 15.6207 li
99.9641 15.5573 li
99.98 15.5256 li
100.012 15.4938 li
100.044 15.4938 li
100.059 15.4938 li
100.075 15.5097 li
100.091 15.5414 li
100.091 15.5731 li
100.107 15.6207 li
100.091 15.6841 li
100.075 15.8269 li
100.059 16.0013 li
100.028 16.1916 li
99.98 16.3977 li
99.9482 16.588 li
99.9006 16.7466 li
99.8688 16.8418 li
99.837 16.9052 li
99.7735 16.9528 li
99.6781 17.0003 li
99.424 17.0796 li
99.1221 17.1431 li
98.7885 17.1748 li
98.439 17.2065 li
98.0895 17.2065 li
97.4541 17.1748 li
96.8981 17.0955 li
96.3897 16.9686 li
95.9449 16.7783 li
95.5478 16.5405 li
95.1824 16.255 li
94.8488 15.9061 li
94.5946 15.5573 li
94.404 15.1767 li
94.261 14.7802 li
94.1657 14.3997 li
94.118 14.0191 li
94.1022 13.6543 li
94.118 13.3689 li
94.1657 13.0517 li
94.2451 12.7029 li
94.3722 12.3381 li
94.5629 11.9576 li
94.8011 11.5928 li
95.103 11.2439 li
95.3413 11.0219 li
95.6272 10.8316 li
95.9449 10.6572 li
96.3262 10.4986 li
96.7551 10.3876 li
97.2317 10.3242 li
97.7877 10.3083 li
cp
0 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
gsave
[.015886 0 0 .0158578 88.4944 10.7206 ]ct
@
grestore newpath
71.83 11.2757 mo
71.6552 11.2123 li
71.5123 11.1171 li
71.3852 10.9903 li
71.2899 10.8476 li
71.2263 10.689 li
71.1945 10.4987 li
71.2104 10.4036 li
71.2422 10.3084 li
71.2899 10.2133 li
71.3693 10.134 li
71.4646 10.0547 li
71.5599 10.0071 li
71.6394 9.9754 li
71.7188 9.95953 li
71.8141 9.94366 li
72.0206 9.99127 li
72.1636 10.1022 li
72.2589 10.2608 li
72.2907 10.4352 li
72.2907 10.4987 li
72.2589 10.578 li
72.2113 10.6414 li
72.1636 10.689 li
72.1001 10.7524 li
72.0365 10.7841 li
71.9571 10.8317 li
71.8776 10.8476 li
71.7982 10.8634 li
71.7188 10.8634 li
71.6552 10.8317 li
71.5758 10.8 li
71.6076 10.8793 li
71.6552 10.9427 li
71.7029 11.022 li
71.7823 11.0854 li
71.8776 11.133 li
71.973 11.1806 li
72.0683 11.2123 li
72.1636 11.2123 li
72.3225 11.1964 li
72.4972 11.1489 li
72.6561 11.0854 li
72.7831 10.9744 li
72.8944 10.8476 li
72.9738 10.7048 li
73.0056 10.5463 li
72.9897 10.3718 li
72.7514 9.3728 li
72.4178 9.40448 li
72.1001 9.40448 li
71.8141 9.35693 li
71.5599 9.26178 li
71.3216 9.13495 li
71.1151 8.97632 li
70.8609 8.69092 li
70.6862 8.34204 li
70.5591 7.94556 li
70.5273 7.53326 li
70.5591 7.18439 li
70.6544 6.85138 li
70.8133 6.53424 li
70.988 6.2171 li
71.1787 5.94751 li
71.3852 5.69379 li
71.5758 5.48761 li
71.7347 5.31317 li
71.6394 4.94843 li
71.544 4.58374 li
71.4805 4.21899 li
71.4487 3.99701 li
71.4487 3.77496 li
71.4805 3.52124 li
71.544 3.25171 li
71.6394 2.99792 li
71.7506 2.76007 li
71.8618 2.55396 li
71.9889 2.37946 li
72.0524 2.31604 li
72.1001 2.26849 li
72.1477 2.22089 li
72.1954 2.20508 li
72.243 2.22089 li
72.2907 2.25262 li
72.3383 2.30023 li
72.4019 2.36365 li
72.529 2.52222 li
72.6561 2.72839 li
72.7673 2.98212 li
72.8626 3.25171 li
72.9261 3.55298 li
72.9579 3.85425 li
72.9261 4.23486 li
72.8467 4.59961 li
72.7037 4.94843 li
72.4019 5.44006 li
72.0047 5.91577 li
72.243 6.80383 li
72.2907 6.78796 li
72.3542 6.77209 li
72.4972 6.75623 li
72.6402 6.75623 li
72.7037 6.75623 li
72.7673 6.75623 li
72.9579 6.80383 li
73.1485 6.88312 li
73.3233 6.97827 li
73.4662 7.1051 li
73.5933 7.27954 li
73.7045 7.46985 li
73.7522 7.69183 li
73.7681 7.96143 li
73.7681 8.12 li
73.7204 8.29443 li
73.5616 8.69092 li
73.4345 8.88123 li
73.2756 9.05566 li
73.085 9.21417 li
72.8626 9.3252 li
73.1168 10.3243 li
73.1326 10.5621 li
73.085 10.7682 li
72.9897 10.9427 li
72.8467 11.0854 li
72.6878 11.1964 li
72.5131 11.2757 li
72.3225 11.3074 li
72.1477 11.3233 li
cp
71.8776 6.04266 mo
71.83 6.09021 li
71.7664 6.15369 li
71.6711 6.26465 li
71.5599 6.37567 li
71.3216 6.67694 li
71.0992 7.00995 li
70.9404 7.35883 li
70.8768 7.53326 li
70.8609 7.7077 li
70.8927 7.96143 li
70.9404 8.21515 li
71.0198 8.45306 li
71.1469 8.67505 li
71.3216 8.88123 li
71.5282 9.03979 li
71.7664 9.15076 li
72.0524 9.21417 li
72.1001 9.21417 li
72.1795 9.21417 li
72.2748 9.21417 li
72.3701 9.21417 li
72.5607 9.19836 li
72.6402 9.1825 li
72.7037 9.16663 li
72.2589 7.39056 li
72.0842 7.45398 li
71.9412 7.53326 li
71.8459 7.64429 li
71.7664 7.83459 li
71.7347 8.05658 li
71.7347 8.15173 li
71.7506 8.23102 li
71.7664 8.3103 li
71.8141 8.40546 li
71.8618 8.50061 li
71.9253 8.59576 li
72.0047 8.67505 li
72.1001 8.75433 li
72.1954 8.83362 li
72.1318 8.81775 li
72.0683 8.78601 li
72.0047 8.73846 li
71.8935 8.65918 li
71.7982 8.56403 li
71.7029 8.42133 li
71.6235 8.26276 li
71.5599 8.08832 li
71.5282 7.88214 li
71.544 7.54913 li
71.6235 7.24786 li
71.7347 7.08923 li
71.8935 6.94653 li
72.1001 6.85138 li
71.9094 5.99506 li
cp
72.3701 7.37469 mo
72.8149 9.13495 li
72.9897 9.03979 li
73.1485 8.92877 li
73.2756 8.78601 li
73.3709 8.6275 li
73.4504 8.43719 li
73.498 8.24689 li
73.498 8.04071 li
73.4662 7.81873 li
73.4504 7.73944 li
73.4027 7.67603 li
73.355 7.59674 li
73.2756 7.53326 li
73.1962 7.48572 li
73.1168 7.43811 li
72.9579 7.39056 li
72.7831 7.35883 li
72.5766 7.35883 li
cp
72.2907 2.7442 mo
72.2271 2.79181 li
72.1636 2.83936 li
72.0365 2.95038 li
71.9253 3.09308 li
71.8141 3.26752 li
71.7188 3.47369 li
71.6552 3.69568 li
71.6235 3.91772 li
71.6235 4.13971 li
71.6394 4.33002 li
71.687 4.64716 li
71.7664 4.93262 li
71.83 5.21802 li
71.9571 5.07532 li
72.1001 4.91675 li
72.4019 4.56787 li
72.6243 4.17145 li
72.7037 3.96527 li
72.7196 3.77496 li
72.7037 3.45782 li
72.6243 3.12482 li
72.4972 2.87109 li
72.4495 2.80762 li
72.4019 2.76007 li
72.3383 2.72839 li
cp
f
72.5766 7.35876 mo
72.3701 7.37462 li
72.8149 9.13484 li
72.9897 9.03969 li
73.1485 8.92869 li
73.2756 8.78597 li
73.3709 8.62739 li
73.4504 8.43709 li
73.498 8.2468 li
73.498 8.04065 li
73.4662 7.81864 li
73.4504 7.73935 li
73.4027 7.67592 li
73.355 7.59663 li
73.2756 7.5332 li
73.1962 7.48563 li
73.1168 7.43805 li
72.9579 7.39048 li
72.7831 7.35876 li
72.5766 7.35876 li
cp
71.9094 5.99499 mo
71.8776 6.04257 li
71.83 6.09014 li
71.7664 6.15357 li
71.6711 6.26458 li
71.5599 6.37558 li
71.3216 6.67688 li
71.0992 7.00989 li
70.9404 7.35876 li
70.8768 7.5332 li
70.8609 7.70764 li
70.8927 7.96136 li
70.9404 8.21509 li
71.0198 8.45295 li
71.1469 8.67496 li
71.3216 8.88111 li
71.5282 9.03969 li
71.7664 9.1507 li
72.0524 9.21413 li
72.1001 9.21413 li
72.1795 9.21413 li
72.2748 9.21413 li
72.3701 9.21413 li
72.5607 9.19827 li
72.6402 9.18241 li
72.7037 9.16655 li
72.2589 7.39048 li
72.0842 7.45391 li
71.9412 7.5332 li
71.8459 7.6442 li
71.7664 7.8345 li
71.7347 8.05651 li
71.7347 8.15165 li
71.7506 8.23094 li
71.7664 8.31023 li
71.8141 8.40538 li
71.8618 8.50053 li
71.9253 8.59567 li
72.0047 8.67496 li
72.1001 8.75425 li
72.1954 8.83354 li
72.1318 8.81768 li
72.0683 8.78597 li
72.0047 8.73839 li
71.8935 8.6591 li
71.7982 8.56396 li
71.7029 8.42124 li
71.6235 8.26266 li
71.5599 8.08822 li
71.5282 7.88207 li
71.544 7.54906 li
71.6235 7.24776 li
71.7347 7.08918 li
71.8935 6.94646 li
72.1001 6.85132 li
71.9094 5.99499 li
cp
72.3383 2.72829 mo
72.2907 2.74414 li
72.2271 2.79172 li
72.1636 2.83929 li
72.0365 2.9503 li
71.9253 3.09302 li
71.8141 3.26745 li
71.7188 3.4736 li
71.6552 3.69561 li
71.6235 3.91762 li
71.6235 4.13963 li
71.6394 4.32992 li
71.687 4.64708 li
71.7664 4.93252 li
71.83 5.21796 li
71.9571 5.07524 li
72.1001 4.91666 li
72.4019 4.56779 li
72.6243 4.17135 li
72.7037 3.9652 li
72.7196 3.7749 li
72.7037 3.45775 li
72.6243 3.12473 li
72.4972 2.87101 li
72.4495 2.80758 li
72.4019 2.76 li
72.3383 2.72829 li
cp
72.1954 2.20498 mo
72.243 2.22084 li
72.2907 2.25255 li
72.3383 2.30013 li
72.4019 2.36356 li
72.529 2.52214 li
72.6561 2.72829 li
72.7673 2.98201 li
72.8626 3.25159 li
72.9261 3.55289 li
72.9579 3.85419 li
72.9261 4.23478 li
72.8467 4.59951 li
72.7037 4.94838 li
72.4019 5.43997 li
72.0047 5.9157 li
72.243 6.80374 li
72.2907 6.78788 li
72.3542 6.77203 li
72.4972 6.75617 li
72.6402 6.75617 li
72.7037 6.75617 li
72.7673 6.75617 li
72.9579 6.80374 li
73.1485 6.88303 li
73.3233 6.97818 li
73.4662 7.10504 li
73.5933 7.27948 li
73.7045 7.46977 li
73.7522 7.69178 li
73.7681 7.96136 li
73.7681 8.11994 li
73.7204 8.29437 li
73.5616 8.69082 li
73.4345 8.88111 li
73.2756 9.05555 li
73.085 9.21413 li
72.8626 9.32513 li
73.1168 10.3242 li
73.1326 10.562 li
73.085 10.7682 li
72.9897 10.9426 li
72.8467 11.0853 li
72.6878 11.1964 li
72.5131 11.2756 li
72.3225 11.3074 li
72.1477 11.3232 li
71.83 11.2756 li
71.6552 11.2122 li
71.5123 11.1171 li
71.3852 10.9902 li
71.2899 10.8475 li
71.2263 10.6889 li
71.1945 10.4986 li
71.2104 10.4035 li
71.2422 10.3083 li
71.2899 10.2132 li
71.3693 10.1339 li
71.4646 10.0546 li
71.5599 10.007 li
71.6394 9.9753 li
71.7188 9.95944 li
71.8141 9.94359 li
72.0206 9.99116 li
72.1636 10.1022 li
72.2589 10.2607 li
72.2907 10.4352 li
72.2907 10.4986 li
72.2589 10.5779 li
72.2113 10.6413 li
72.1636 10.6889 li
72.1001 10.7523 li
72.0365 10.784 li
71.9571 10.8316 li
71.8776 10.8475 li
71.7982 10.8633 li
71.7188 10.8633 li
71.6552 10.8316 li
71.5758 10.7999 li
71.6076 10.8792 li
71.6552 10.9426 li
71.7029 11.0219 li
71.7823 11.0853 li
71.8776 11.1329 li
71.973 11.1805 li
72.0683 11.2122 li
72.1636 11.2122 li
72.3225 11.1964 li
72.4972 11.1488 li
72.6561 11.0853 li
72.7831 10.9743 li
72.8944 10.8475 li
72.9738 10.7048 li
73.0056 10.5462 li
72.9897 10.3717 li
72.7514 9.3727 li
72.4178 9.40442 li
72.1001 9.40442 li
71.8141 9.35685 li
71.5599 9.2617 li
71.3216 9.13484 li
71.1151 8.97626 li
70.8609 8.69082 li
70.6862 8.34195 li
70.5591 7.9455 li
70.5273 7.5332 li
70.5591 7.18433 li
70.6544 6.85132 li
70.8133 6.53416 li
70.988 6.217 li
71.1787 5.94742 li
71.3852 5.6937 li
71.5758 5.48754 li
71.7347 5.31311 li
71.6394 4.94838 li
71.544 4.58365 li
71.4805 4.21892 li
71.4487 3.99691 li
71.4487 3.7749 li
71.4805 3.52118 li
71.544 3.25159 li
71.6394 2.99787 li
71.7506 2.76 li
71.8618 2.55385 li
71.9889 2.37942 li
72.0524 2.31598 li
72.1001 2.26841 li
72.1477 2.22084 li
72.1954 2.20498 li
cp
gsave
[.015886 0 0 .0158578 72.5766 7.35876 ]ct
@
grestore newpath
69.876 10.8158 mo
69.7171 10.7365 li
69.5742 10.6255 li
69.463 10.467 li
69.4312 10.4194 li
69.4153 10.356 li
69.3994 10.2925 li
69.3994 10.1815 li
69.4312 10.0705 li
69.463 9.95953 li
69.5265 9.86438 li
69.5742 9.8009 li
69.6536 9.73749 li
69.7171 9.68994 li
69.9237 9.62646 li
70.1143 9.64233 li
70.2732 9.73749 li
70.3844 9.86438 li
70.4002 9.9278 li
70.4161 10.0071 li
70.4161 10.0864 li
70.3844 10.1973 li
70.3367 10.3083 li
70.289 10.3718 li
70.2255 10.4352 li
70.1619 10.4828 li
70.0984 10.5145 li
70.019 10.5463 li
69.9395 10.5463 li
69.9872 10.5779 li
70.019 10.6097 li
70.0825 10.6414 li
70.1619 10.6572 li
70.2573 10.689 li
70.3685 10.689 li
70.4638 10.6731 li
70.5591 10.6572 li
70.6544 10.6097 li
70.7974 10.5145 li
70.9245 10.3877 li
71.0198 10.2449 li
71.0833 10.0864 li
71.1151 9.9278 li
71.0992 9.76923 li
71.0516 9.61066 li
70.9563 9.45203 li
70.2414 8.7226 li
69.8283 9.00806 li
69.4312 9.16663 li
69.0182 9.23004 li
68.6369 9.1983 li
68.2715 9.07147 li
67.9379 8.8653 li
67.6361 8.5799 li
67.3978 8.24689 li
67.2548 7.92969 li
67.1754 7.58081 li
67.1436 7.23193 li
67.1436 6.88312 li
67.1595 6.53424 li
67.223 6.21704 li
67.2866 5.94745 li
67.3343 5.70959 li
67.0642 5.44 li
66.7941 5.18628 li
66.5558 4.88501 li
66.3175 4.52026 li
66.2064 4.28241 li
66.1269 4.02869 li
66.0792 3.75909 li
66.0634 3.50537 li
66.0634 3.26752 li
66.0792 3.04553 li
66.1269 2.8869 li
66.1746 2.79175 li
66.2699 2.77588 li
66.4287 2.82349 li
66.6194 2.90277 li
66.8259 3.01379 li
67.0483 3.17236 li
67.2707 3.36267 li
67.4772 3.58466 li
67.6678 3.83838 li
67.8267 4.18726 li
67.9379 4.53613 li
67.9856 4.91669 li
67.9856 5.48761 li
67.8744 6.09021 li
68.5098 6.74036 li
68.5575 6.70868 li
68.5892 6.66107 li
68.7004 6.58179 li
68.8275 6.5025 li
68.8911 6.47076 li
68.9546 6.45496 li
69.1452 6.39148 li
69.3359 6.35974 li
69.5424 6.35974 li
69.733 6.40735 li
69.9237 6.48663 li
70.1143 6.59766 li
70.2732 6.77209 li
70.432 6.99408 li
70.4956 7.12097 li
70.5432 7.31128 li
70.5909 7.50153 li
70.6068 7.72357 li
70.5909 7.94556 li
70.5432 8.18341 li
70.4479 8.40546 li
70.3208 8.62744 li
71.0357 9.37274 li
71.1787 9.56305 li
71.2263 9.75336 li
71.2263 9.95953 li
71.1946 10.1498 li
71.0992 10.3242 li
70.988 10.4828 li
70.845 10.6255 li
70.7021 10.7207 li
70.5591 10.7841 li
70.4002 10.8317 li
70.0508 10.8475 li
cp
67.8108 6.26465 mo
67.7949 6.34393 li
67.7791 6.42322 li
67.7155 6.72449 li
67.652 7.08923 li
67.6202 7.50153 li
67.6678 7.88214 li
67.7155 8.07239 li
67.7791 8.23102 li
67.922 8.43713 li
68.0968 8.62744 li
68.2874 8.78601 li
68.5098 8.9129 li
68.7481 9.00806 li
69.0182 9.03973 li
69.2882 9.02386 li
69.5583 8.92871 li
69.6059 8.9129 li
69.6695 8.8653 li
69.7489 8.83362 li
69.8283 8.77014 li
69.9872 8.67505 li
70.0508 8.61157 li
70.0984 8.56403 li
68.8275 7.2478 li
68.6528 7.45398 li
68.5892 7.67596 li
68.621 7.88214 li
68.7004 8.08826 li
68.7799 8.19928 li
68.8593 8.29443 li
68.9546 8.35785 li
69.0499 8.40546 li
69.1452 8.453 li
69.2564 8.48474 li
69.3677 8.51642 li
69.4948 8.53229 li
69.4312 8.54816 li
69.3677 8.54816 li
69.2882 8.54816 li
69.0023 8.48474 li
68.7163 8.32611 li
68.5733 8.19928 li
68.4463 8.04071 li
68.2715 7.73944 li
68.208 7.43811 li
68.2239 7.2478 li
68.2874 7.0575 li
68.4145 6.85138 li
67.8267 6.21704 li
cp
69.4312 6.89893 mo
69.2564 6.9624 li
68.9229 7.18439 li
70.1778 8.48474 li
70.289 8.32611 li
70.3685 8.13586 li
70.4002 7.94556 li
70.4161 7.75525 li
70.3844 7.565 li
70.3208 7.37469 li
70.2255 7.18439 li
70.0984 7.00995 li
70.0349 6.9624 li
69.9554 6.91479 li
69.876 6.88312 li
69.733 6.86725 li
69.5901 6.86725 li
cp
66.5241 3.21991 mo
66.4923 3.28339 li
66.4605 3.36267 li
66.4129 3.52124 li
66.3811 3.69568 li
66.3652 3.90186 li
66.397 4.12384 li
66.4446 4.34583 li
66.5399 4.56787 li
66.6511 4.74231 li
66.7624 4.90088 li
66.9689 5.1546 li
67.0642 5.26563 li
67.1595 5.37659 li
67.2707 5.47174 li
67.366 5.58276 li
67.4137 5.39246 li
67.4613 5.18628 li
67.5249 4.72644 li
67.5249 4.26654 li
67.4931 4.06036 li
67.4137 3.88599 li
67.2389 3.61639 li
67.1277 3.4895 li
67.0006 3.37848 li
66.8894 3.28339 li
66.7624 3.20404 li
66.6988 3.18823 li
66.6194 3.17236 li
66.5717 3.17236 li
cp
f
69.733 6.86719 mo
69.5901 6.86719 li
69.4312 6.8989 li
69.2565 6.96233 li
68.9229 7.18434 li
70.1778 8.48468 li
70.289 8.32611 li
70.3685 8.13581 li
70.4002 7.94552 li
70.4161 7.75522 li
70.3844 7.56493 li
70.3208 7.37464 li
70.2255 7.18434 li
70.0984 7.00991 li
70.0349 6.96233 li
69.9554 6.91476 li
69.876 6.88305 li
69.733 6.86719 li
cp
67.8267 6.21702 mo
67.8108 6.26459 li
67.7949 6.34388 li
67.7791 6.42317 li
67.7155 6.72447 li
67.652 7.0892 li
67.6202 7.5015 li
67.6679 7.88209 li
67.7155 8.07238 li
67.7791 8.23096 li
67.922 8.43711 li
68.0968 8.6274 li
68.2874 8.78598 li
68.5098 8.91284 li
68.7481 9.00799 li
69.0182 9.03971 li
69.2882 9.02385 li
69.5583 8.9287 li
69.6059 8.91284 li
69.6695 8.86527 li
69.7489 8.83355 li
69.8284 8.77012 li
69.9872 8.67498 li
70.0508 8.61155 li
70.0984 8.56397 li
68.8275 7.24777 li
68.6528 7.45393 li
68.5892 7.67594 li
68.621 7.88209 li
68.7004 8.08824 li
68.7799 8.19924 li
68.8593 8.29439 li
68.9546 8.35782 li
69.0499 8.40539 li
69.1453 8.45297 li
69.2565 8.48468 li
69.3677 8.5164 li
69.4947 8.53226 li
69.4312 8.54811 li
69.3677 8.54811 li
69.2882 8.54811 li
69.0023 8.48468 li
68.7163 8.32611 li
68.5734 8.19924 li
68.4463 8.04066 li
68.2715 7.73937 li
68.208 7.43807 li
68.2239 7.24777 li
68.2874 7.05748 li
68.4145 6.85133 li
67.8267 6.21702 li
cp
66.6194 3.17232 mo
66.5717 3.17232 li
66.5241 3.21989 li
66.4923 3.28332 li
66.4605 3.36261 li
66.4129 3.52119 li
66.3811 3.69563 li
66.3652 3.90178 li
66.397 4.12379 li
66.4446 4.3458 li
66.5399 4.56781 li
66.6512 4.74224 li
66.7624 4.90082 li
66.9689 5.15454 li
67.0642 5.26555 li
67.1595 5.37655 li
67.2707 5.4717 li
67.366 5.58271 li
67.4137 5.39241 li
67.4613 5.18626 li
67.5249 4.72638 li
67.5249 4.26651 li
67.4931 4.06036 li
67.4137 3.88592 li
67.2389 3.61634 li
67.1277 3.48948 li
67.0006 3.37847 li
66.8894 3.28332 li
66.7624 3.20404 li
66.6988 3.18818 li
66.6194 3.17232 li
cp
66.2699 2.77587 mo
66.4287 2.82345 li
66.6194 2.90274 li
66.8259 3.01374 li
67.0483 3.17232 li
67.2707 3.36261 li
67.4772 3.58462 li
67.6679 3.83835 li
67.8267 4.18722 li
67.9379 4.53609 li
67.9856 4.91668 li
67.9856 5.48756 li
67.8744 6.09016 li
68.5098 6.74032 li
68.5575 6.70861 li
68.5892 6.66104 li
68.7004 6.58175 li
68.8275 6.50246 li
68.8911 6.47074 li
68.9546 6.45488 li
69.1453 6.39145 li
69.3359 6.35974 li
69.5424 6.35974 li
69.733 6.40731 li
69.9237 6.4866 li
70.1143 6.5976 li
70.2732 6.77204 li
70.432 6.99405 li
70.4956 7.12091 li
70.5432 7.31121 li
70.5909 7.5015 li
70.6068 7.72351 li
70.5909 7.94552 li
70.5432 8.18338 li
70.4479 8.40539 li
70.3208 8.6274 li
71.0357 9.37272 li
71.1787 9.56301 li
71.2263 9.75331 li
71.2263 9.95946 li
71.1945 10.1498 li
71.0992 10.3242 li
70.988 10.4828 li
70.8451 10.6255 li
70.7021 10.7206 li
70.5591 10.7841 li
70.4002 10.8316 li
70.0508 10.8475 li
69.876 10.8158 li
69.7171 10.7365 li
69.5742 10.6255 li
69.463 10.4669 li
69.4312 10.4193 li
69.4153 10.3559 li
69.3994 10.2925 li
69.3994 10.1815 li
69.4312 10.0705 li
69.463 9.95946 li
69.5265 9.86431 li
69.5742 9.80088 li
69.6536 9.73745 li
69.7171 9.68988 li
69.9237 9.62644 li
70.1143 9.6423 li
70.2732 9.73745 li
70.3844 9.86431 li
70.4002 9.92774 li
70.4161 10.007 li
70.4161 10.0863 li
70.3844 10.1973 li
70.3367 10.3083 li
70.289 10.3718 li
70.2255 10.4352 li
70.162 10.4828 li
70.0984 10.5145 li
70.019 10.5462 li
69.9396 10.5462 li
69.9872 10.5779 li
70.019 10.6096 li
70.0825 10.6413 li
70.162 10.6572 li
70.2573 10.6889 li
70.3685 10.6889 li
70.4638 10.6731 li
70.5591 10.6572 li
70.6544 10.6096 li
70.7974 10.5145 li
70.9245 10.3876 li
71.0198 10.2449 li
71.0833 10.0863 li
71.1151 9.92774 li
71.0992 9.76917 li
71.0516 9.61059 li
70.9563 9.45201 li
70.2414 8.72255 li
69.8284 9.00799 li
69.4312 9.16657 li
69.0182 9.23 li
68.6369 9.19828 li
68.2715 9.07142 li
67.9379 8.86527 li
67.6361 8.57983 li
67.3978 8.24682 li
67.2548 7.92966 li
67.1754 7.58079 li
67.1436 7.23192 li
67.1436 6.88305 li
67.1595 6.53417 li
67.223 6.21702 li
67.2866 5.94743 li
67.3343 5.70957 li
67.0642 5.43999 li
66.7941 5.18626 li
66.5558 4.88496 li
66.3175 4.52023 li
66.2063 4.28237 li
66.1269 4.02864 li
66.0793 3.75906 li
66.0634 3.50533 li
66.0634 3.26747 li
66.0793 3.04546 li
66.1269 2.88688 li
66.1746 2.79173 li
66.2699 2.77587 li
cp
gsave
[.015886 0 0 .0158578 69.733 6.86719 ]ct
@
grestore newpath
68.1286 11.3867 mo
67.9379 11.3074 li
67.8744 11.2598 li
67.8108 11.1805 li
67.7473 11.0854 li
67.7155 10.9902 li
67.6996 10.8634 li
67.6996 10.7524 li
67.7155 10.6255 li
67.7791 10.4987 li
67.922 10.3559 li
68.0968 10.2767 li
68.2715 10.2767 li
68.4463 10.3401 li
68.4939 10.3718 li
68.5416 10.4352 li
68.5734 10.4987 li
68.6051 10.6096 li
68.621 10.7365 li
68.6051 10.8158 li
68.5892 10.8951 li
68.5575 10.9744 li
68.5257 11.0378 li
68.4622 11.0854 li
68.3986 11.1329 li
68.4463 11.1488 li
68.5098 11.1488 li
68.5575 11.1488 li
68.6528 11.1329 li
68.7481 11.1013 li
68.8434 11.0536 li
68.9229 10.9902 li
68.9864 10.9109 li
69.05 10.8317 li
69.1135 10.689 li
69.1611 10.5145 li
69.177 10.3401 li
69.1611 10.1815 li
69.0976 10.0229 li
69.0182 9.88019 li
68.8911 9.76917 li
68.7322 9.68988 li
67.7314 9.40448 li
67.6043 9.72162 li
67.4454 9.99121 li
67.2707 10.2132 li
66.9371 10.4669 li
66.5876 10.6255 li
66.2063 10.689 li
65.8092 10.689 li
65.412 10.5938 li
65.0467 10.4194 li
64.7607 10.2132 li
64.5065 9.95947 li
64.3 9.65814 li
64.1253 9.35687 li
63.9823 9.0556 li
63.8711 8.75427 li
63.7917 8.48468 li
63.7122 8.24683 li
63.3469 8.15167 li
62.9974 8.05652 li
62.632 7.92969 li
62.4414 7.8504 li
62.2348 7.72351 li
62.0283 7.58081 li
61.8377 7.3905 li
61.5041 6.97821 li
61.3929 6.77203 li
61.2976 6.56592 li
61.2499 6.40735 li
61.2499 6.29633 li
61.2817 6.26465 li
61.3293 6.24878 li
61.4088 6.21704 li
61.4882 6.20117 li
61.6947 6.16949 li
61.933 6.16949 li
62.2031 6.20117 li
62.489 6.24878 li
62.7909 6.34387 li
63.0609 6.47076 li
63.3786 6.67694 li
63.6646 6.9306 li
63.887 7.23193 li
64.0776 7.56494 li
64.2365 7.92969 li
64.3636 8.3103 li
65.2532 8.56403 li
65.2691 8.51642 li
65.285 8.453 li
65.3485 8.32611 li
65.412 8.19928 li
65.4597 8.13586 li
65.4915 8.08826 li
65.6186 7.94556 li
65.7774 7.81866 li
65.9522 7.72351 li
66.1428 7.64423 li
66.3493 7.62836 li
66.5717 7.64423 li
66.7941 7.7077 li
67.0324 7.81866 li
67.1595 7.91382 li
67.3025 8.02484 li
67.4296 8.18341 li
67.5567 8.37372 li
67.652 8.56403 li
67.7314 8.78601 li
67.7632 9.03973 li
67.7632 9.29346 li
68.7481 9.57892 li
68.9705 9.67407 li
69.1135 9.81677 li
69.2247 9.99121 li
69.2723 10.1656 li
69.2882 10.3718 li
69.2723 10.5621 li
69.2088 10.7524 li
69.1453 10.9109 li
69.05 11.0378 li
68.9387 11.1647 li
68.7958 11.2757 li
68.6369 11.355 li
68.4781 11.4025 li
68.3033 11.4184 li
cp
64.4112 8.50055 mo
64.443 8.56403 li
64.4589 8.64325 li
64.5542 8.94458 li
64.6813 9.29346 li
64.8719 9.65814 li
65.0943 9.97534 li
65.2214 10.1022 li
65.3644 10.2132 li
65.5868 10.3242 li
65.841 10.4035 li
66.0951 10.4352 li
66.3493 10.4352 li
66.6035 10.4035 li
66.8418 10.3083 li
67.0642 10.1498 li
67.2548 9.92773 li
67.2866 9.88019 li
67.3343 9.81677 li
67.366 9.7533 li
67.4137 9.65814 li
67.4931 9.48376 li
67.5249 9.40448 li
67.5408 9.35687 li
65.7774 8.84943 li
65.7457 9.02386 li
65.7457 9.18243 li
65.7933 9.32513 li
65.9204 9.49957 li
66.0951 9.62646 li
66.2222 9.68988 li
66.3335 9.72162 li
66.4446 9.73749 li
66.5558 9.73749 li
66.667 9.72162 li
66.7782 9.70575 li
66.8894 9.65814 li
67.0006 9.62646 li
66.9371 9.67407 li
66.8259 9.73749 li
66.6988 9.78503 li
66.5558 9.83264 li
66.397 9.84851 li
66.2222 9.83264 li
66.0316 9.8009 li
65.841 9.72162 li
65.555 9.54718 li
65.3485 9.32513 li
65.2532 9.15076 li
65.2214 8.94458 li
65.2214 8.70673 li
64.3953 8.453 li
cp
66.5082 8.00897 mo
66.3811 8.05652 li
66.254 8.13586 li
66.1587 8.19928 li
66.0793 8.27856 li
66.0157 8.37372 li
65.9045 8.54816 li
65.8251 8.73846 li
67.5725 9.24591 li
67.5884 9.03973 li
67.5567 8.84943 li
67.4931 8.65912 li
67.4137 8.48468 li
67.2866 8.34198 li
67.1436 8.19928 li
66.9689 8.08826 li
66.7624 8.00897 li
66.6829 7.9931 li
66.5876 7.9931 li
cp
61.8377 6.40735 mo
61.79 6.43903 li
61.7742 6.48663 li
61.7742 6.56592 li
61.7742 6.66107 li
61.8218 6.81964 li
61.8854 6.99408 li
62.1078 7.35876 li
62.2666 7.5174 li
62.4573 7.6601 li
62.6479 7.75525 li
62.8226 7.83453 li
63.1245 7.96143 li
63.3945 8.04065 li
63.6805 8.12 li
63.6328 7.94556 li
63.5693 7.73938 li
63.3945 7.31122 li
63.2833 7.1051 li
63.1721 6.91479 li
63.0291 6.74036 li
62.8703 6.62933 li
62.5843 6.50244 li
62.2666 6.40735 li
62.1078 6.37561 li
61.9807 6.37561 li
61.9012 6.37561 li
cp
f
64.3953 8.453 mo
64.4112 8.50058 li
64.443 8.56401 li
64.4589 8.6433 li
64.5542 8.94459 li
64.6813 9.29347 li
64.8719 9.6582 li
65.0943 9.97535 li
65.2214 10.1022 li
65.3644 10.2132 li
65.5868 10.3242 li
65.841 10.4035 li
66.0951 10.4352 li
66.3493 10.4352 li
66.6035 10.4035 li
66.8418 10.3084 li
67.0642 10.1498 li
67.2548 9.92778 li
67.2866 9.8802 li
67.3343 9.81677 li
67.366 9.75334 li
67.4137 9.6582 li
67.4931 9.48376 li
67.5249 9.40447 li
67.5408 9.3569 li
65.7774 8.84945 li
65.7457 9.02388 li
65.7457 9.18246 li
65.7933 9.32518 li
65.9204 9.49962 li
66.0951 9.62648 li
66.2222 9.68991 li
66.3334 9.72163 li
66.4446 9.73748 li
66.5558 9.73748 li
66.667 9.72163 li
66.7782 9.70577 li
66.8894 9.6582 li
67.0006 9.62648 li
66.9371 9.67405 li
66.8259 9.73748 li
66.6988 9.78506 li
66.5558 9.83263 li
66.397 9.84849 li
66.2222 9.83263 li
66.0316 9.80092 li
65.841 9.72163 li
65.555 9.54719 li
65.3485 9.32518 li
65.2532 9.15075 li
65.2214 8.94459 li
65.2214 8.70673 li
64.3953 8.453 li
cp
66.5876 7.99313 mo
66.5082 8.00898 li
66.3811 8.05656 li
66.254 8.13585 li
66.1587 8.19928 li
66.0793 8.27857 li
66.0157 8.37371 li
65.9045 8.54815 li
65.8251 8.73844 li
67.5725 9.24589 li
67.5884 9.03974 li
67.5567 8.84945 li
67.4931 8.65915 li
67.4137 8.48472 li
67.2866 8.342 li
67.1436 8.19928 li
66.9689 8.08827 li
66.7624 8.00898 li
66.6829 7.99313 li
66.5876 7.99313 li
cp
61.9807 6.37563 mo
61.9012 6.37563 li
61.8377 6.40735 li
61.79 6.43906 li
61.7742 6.48664 li
61.7742 6.56592 li
61.7742 6.66107 li
61.8218 6.81965 li
61.8854 6.99408 li
62.1078 7.35881 li
62.2666 7.51739 li
62.4573 7.66011 li
62.6479 7.75526 li
62.8226 7.83455 li
63.1245 7.96141 li
63.3945 8.0407 li
63.6805 8.11999 li
63.6328 7.94555 li
63.5693 7.7394 li
63.3945 7.31124 li
63.2833 7.10509 li
63.1721 6.9148 li
63.0291 6.74036 li
62.8703 6.62936 li
62.5843 6.50249 li
62.2666 6.40735 li
62.1078 6.37563 li
61.9807 6.37563 li
cp
61.933 6.16948 mo
62.2031 6.20119 li
62.489 6.24877 li
62.7909 6.34391 li
63.0609 6.47078 li
63.3786 6.67693 li
63.6646 6.93065 li
63.887 7.23195 li
64.0776 7.56497 li
64.2365 7.9297 li
64.3636 8.31028 li
65.2532 8.56401 li
65.2691 8.51643 li
65.285 8.453 li
65.3485 8.32614 li
65.412 8.19928 li
65.4597 8.13585 li
65.4915 8.08827 li
65.6186 7.94555 li
65.7774 7.81869 li
65.9522 7.72354 li
66.1428 7.64425 li
66.3493 7.6284 li
66.5717 7.64425 li
66.7941 7.70769 li
67.0324 7.81869 li
67.1595 7.91384 li
67.3025 8.02484 li
67.4296 8.18342 li
67.5567 8.37371 li
67.652 8.56401 li
67.7314 8.78602 li
67.7632 9.03974 li
67.7632 9.29347 li
68.7481 9.57891 li
68.9705 9.67405 li
69.1135 9.81677 li
69.2247 9.99121 li
69.2723 10.1656 li
69.2882 10.3718 li
69.2723 10.5621 li
69.2088 10.7524 li
69.1453 10.911 li
69.0499 11.0378 li
68.9387 11.1647 li
68.7958 11.2757 li
68.6369 11.355 li
68.478 11.4026 li
68.3033 11.4184 li
68.1286 11.3867 li
67.9379 11.3074 li
67.8744 11.2598 li
67.8108 11.1805 li
67.7473 11.0854 li
67.7155 10.9903 li
67.6996 10.8634 li
67.6996 10.7524 li
67.7155 10.6255 li
67.7791 10.4987 li
67.922 10.3559 li
68.0968 10.2766 li
68.2715 10.2766 li
68.4463 10.3401 li
68.4939 10.3718 li
68.5416 10.4352 li
68.5734 10.4987 li
68.6051 10.6097 li
68.621 10.7365 li
68.6051 10.8158 li
68.5892 10.8951 li
68.5575 10.9744 li
68.5257 11.0378 li
68.4622 11.0854 li
68.3986 11.133 li
68.4463 11.1488 li
68.5098 11.1488 li
68.5575 11.1488 li
68.6528 11.133 li
68.7481 11.1013 li
68.8434 11.0537 li
68.9229 10.9903 li
68.9864 10.911 li
69.0499 10.8317 li
69.1135 10.689 li
69.1611 10.5145 li
69.177 10.3401 li
69.1611 10.1815 li
69.0976 10.0229 li
69.0182 9.8802 li
68.8911 9.7692 li
68.7322 9.68991 li
67.7314 9.40447 li
67.6043 9.72163 li
67.4455 9.99121 li
67.2707 10.2132 li
66.9371 10.4669 li
66.5876 10.6255 li
66.2063 10.689 li
65.8092 10.689 li
65.412 10.5938 li
65.0467 10.4194 li
64.7607 10.2132 li
64.5065 9.95949 li
64.3 9.6582 li
64.1253 9.3569 li
63.9823 9.0556 li
63.8711 8.7543 li
63.7917 8.48472 li
63.7122 8.24685 li
63.3469 8.1517 li
62.9974 8.05656 li
62.632 7.9297 li
62.4414 7.85041 li
62.2348 7.72354 li
62.0283 7.58082 li
61.8377 7.39053 li
61.5041 6.97823 li
61.3929 6.77208 li
61.2976 6.56592 li
61.2499 6.40735 li
61.2499 6.29634 li
61.2817 6.26463 li
61.3293 6.24877 li
61.4088 6.21705 li
61.4882 6.20119 li
61.6947 6.16948 li
61.933 6.16948 li
cp
gsave
[.015886 0 0 .0158578 64.3953 8.453 ]ct
@
grestore newpath
63.744 13.4323 mo
63.3945 13.3372 li
63.0768 13.1945 li
62.775 13.02 li
62.489 12.8139 li
62.2507 12.6077 li
62.0283 12.4174 li
61.8536 12.2589 li
61.4882 12.3699 li
61.1387 12.465 li
60.7575 12.5284 li
60.5509 12.5443 li
60.3126 12.5443 li
60.0585 12.5284 li
59.8043 12.465 li
59.5501 12.3699 li
59.3118 12.2589 li
59.1053 12.132 li
58.9306 12.0051 li
58.8511 11.9417 li
58.8035 11.8942 li
58.7717 11.8466 li
58.7399 11.799 li
58.7558 11.7514 li
58.7876 11.7039 li
58.8352 11.6563 li
58.8988 11.5928 li
59.0577 11.466 li
59.2642 11.355 li
59.5183 11.2281 li
59.7884 11.1329 li
60.0902 11.0695 li
60.4079 11.0378 li
60.7892 11.0695 li
61.1546 11.1488 li
61.4882 11.2916 li
61.9807 11.5928 li
62.4572 11.9893 li
63.3469 11.7514 li
63.331 11.7039 li
63.3151 11.6404 li
63.2992 11.5135 li
63.2992 11.355 li
63.2992 11.2916 li
63.3151 11.2281 li
63.3628 11.0378 li
63.4263 10.8475 li
63.5216 10.6731 li
63.6646 10.5303 li
63.8234 10.4035 li
64.0141 10.3083 li
64.2524 10.2449 li
64.5066 10.2291 li
64.6654 10.2449 li
64.856 10.2766 li
65.2373 10.451 li
65.4279 10.5621 li
65.6027 10.7206 li
65.7615 10.9109 li
65.8727 11.1329 li
66.8894 10.8951 li
67.1118 10.8634 li
67.3184 10.9109 li
67.4931 11.0061 li
67.6361 11.1488 li
67.7473 11.3074 li
67.8267 11.4977 li
67.8744 11.6721 li
67.8903 11.8466 li
67.8426 12.1796 li
67.7632 12.3381 li
67.6678 12.4809 li
67.5566 12.6077 li
67.4137 12.7029 li
67.2389 12.7822 li
67.0483 12.798 li
66.9689 12.7822 li
66.8736 12.7504 li
66.7783 12.7029 li
66.6829 12.6236 li
66.6194 12.5443 li
66.5558 12.4333 li
66.5241 12.354 li
66.5082 12.2747 li
66.5082 12.1796 li
66.5399 11.9734 li
66.667 11.8307 li
66.8259 11.7355 li
67.0006 11.7039 li
67.0642 11.7197 li
67.1277 11.7355 li
67.1913 11.7831 li
67.2548 11.8307 li
67.3025 11.8942 li
67.3501 11.9576 li
67.3819 12.0369 li
67.3978 12.1161 li
67.4137 12.1954 li
67.4137 12.2747 li
67.3978 12.354 li
67.366 12.4174 li
67.4296 12.4016 li
67.509 12.354 li
67.5725 12.2906 li
67.6361 12.2113 li
67.6996 12.132 li
67.7314 12.0369 li
67.7632 11.9417 li
67.7791 11.8466 li
67.7632 11.6721 li
67.7155 11.4977 li
67.6361 11.3391 li
67.5408 11.2123 li
67.4137 11.1013 li
67.2707 11.022 li
67.096 10.9902 li
66.9212 11.0061 li
65.9204 11.244 li
65.968 11.5928 li
65.9522 11.8942 li
65.9045 12.1796 li
65.8251 12.4333 li
65.698 12.6711 li
65.5391 12.8773 li
65.2373 13.131 li
64.8878 13.3214 li
64.5066 13.4323 li
64.0935 13.4641 li
cp
62.5526 12.0844 mo
62.5843 12.1161 li
62.632 12.1637 li
62.6955 12.2271 li
62.8067 12.3223 li
62.9338 12.4333 li
63.2198 12.6711 li
63.5534 12.8932 li
63.9029 13.0676 li
64.0935 13.1152 li
64.2682 13.131 li
64.5224 13.1152 li
64.7607 13.0518 li
65.0149 12.9725 li
65.2373 12.8456 li
65.4279 12.6711 li
65.5868 12.4809 li
65.7139 12.2271 li
65.7615 11.9417 li
65.7774 11.8942 li
65.7774 11.8148 li
65.7774 11.7355 li
65.7615 11.6404 li
65.7456 11.4501 li
65.7456 11.3708 li
65.7298 11.3074 li
63.9505 11.7355 li
63.9982 11.91 li
64.0776 12.0527 li
64.1888 12.1479 li
64.3794 12.243 li
64.6178 12.2589 li
64.6972 12.2589 li
64.7766 12.243 li
64.856 12.2271 li
64.9672 12.1796 li
65.0626 12.132 li
65.142 12.0685 li
65.2373 11.9893 li
65.3167 11.8942 li
65.3961 11.799 li
65.3803 11.8624 li
65.3485 11.9258 li
65.3008 11.9893 li
65.2214 12.1003 li
65.1102 12.2113 li
64.9831 12.3065 li
64.8243 12.3857 li
64.6495 12.4333 li
64.443 12.465 li
64.0935 12.465 li
63.8076 12.3699 li
63.6328 12.2589 li
63.5057 12.1003 li
63.3945 11.8942 li
cp
59.9949 11.3074 mo
59.6772 11.3867 li
59.4071 11.4977 li
59.3436 11.5453 li
59.2959 11.5928 li
59.28 11.6563 li
59.2959 11.7039 li
59.3277 11.7673 li
59.3754 11.8466 li
59.4866 11.9576 li
59.6454 12.0844 li
59.8202 12.1954 li
60.0108 12.2906 li
60.2332 12.354 li
60.4715 12.3699 li
60.678 12.3699 li
60.8686 12.354 li
61.2023 12.3065 li
61.4723 12.243 li
61.7742 12.1637 li
61.6312 12.0369 li
61.4723 11.8942 li
61.1069 11.6087 li
60.7098 11.3708 li
60.5033 11.2916 li
60.3126 11.2757 li
cp
64.3794 10.5303 mo
64.3 10.5621 li
64.2206 10.5938 li
64.157 10.6572 li
64.0935 10.7206 li
64.03 10.7999 li
63.9823 10.8951 li
63.9347 11.0536 li
63.9029 11.2281 li
63.9029 11.4184 li
63.9188 11.6246 li
65.698 11.1805 li
65.6027 11.0061 li
65.4756 10.8634 li
65.3326 10.7206 li
65.1737 10.6255 li
64.999 10.5462 li
64.8084 10.4987 li
64.586 10.4987 li
cp
f
65.7298 11.3074 mo
63.9505 11.7355 li
63.9982 11.91 li
64.0776 12.0527 li
64.1888 12.1478 li
64.3795 12.243 li
64.6177 12.2588 li
64.6972 12.2588 li
64.7766 12.243 li
64.856 12.2271 li
64.9672 12.1796 li
65.0626 12.132 li
65.142 12.0685 li
65.2373 11.9893 li
65.3167 11.8941 li
65.3962 11.799 li
65.3803 11.8624 li
65.3485 11.9258 li
65.3008 11.9893 li
65.2214 12.1003 li
65.1102 12.2113 li
64.9831 12.3064 li
64.8243 12.3857 li
64.6495 12.4333 li
64.443 12.465 li
64.0935 12.465 li
63.8076 12.3698 li
63.6328 12.2588 li
63.5057 12.1003 li
63.3945 11.8941 li
62.5526 12.0844 li
62.5843 12.1161 li
62.632 12.1637 li
62.6955 12.2271 li
62.8067 12.3223 li
62.9338 12.4333 li
63.2198 12.6711 li
63.5534 12.8932 li
63.9029 13.0676 li
64.0935 13.1152 li
64.2682 13.131 li
64.5224 13.1152 li
64.7607 13.0517 li
65.0149 12.9724 li
65.2373 12.8456 li
65.4279 12.6711 li
65.5868 12.4809 li
65.7139 12.2271 li
65.7615 11.9417 li
65.7774 11.8941 li
65.7774 11.8148 li
65.7774 11.7355 li
65.7615 11.6404 li
65.7457 11.4501 li
65.7457 11.3708 li
65.7298 11.3074 li
cp
60.3126 11.2757 mo
59.9949 11.3074 li
59.6772 11.3867 li
59.4071 11.4977 li
59.3436 11.5452 li
59.2959 11.5928 li
59.28 11.6562 li
59.2959 11.7038 li
59.3277 11.7672 li
59.3754 11.8465 li
59.4866 11.9575 li
59.6454 12.0844 li
59.8202 12.1954 li
60.0108 12.2906 li
60.2332 12.354 li
60.4715 12.3698 li
60.678 12.3698 li
60.8686 12.354 li
61.2023 12.3064 li
61.4723 12.243 li
61.7742 12.1637 li
61.6312 12.0368 li
61.4723 11.8941 li
61.1069 11.6087 li
60.7098 11.3708 li
60.5033 11.2915 li
60.3126 11.2757 li
cp
64.586 10.4986 mo
64.3795 10.5303 li
64.3 10.5621 li
64.2206 10.5938 li
64.1571 10.6572 li
64.0935 10.7206 li
64.03 10.7999 li
63.9823 10.8951 li
63.9346 11.0536 li
63.9029 11.2281 li
63.9029 11.4184 li
63.9188 11.6245 li
65.698 11.1805 li
65.6027 11.0061 li
65.4756 10.8634 li
65.3326 10.7206 li
65.1738 10.6255 li
64.999 10.5462 li
64.8084 10.4986 li
64.586 10.4986 li
cp
64.5065 10.229 mo
64.6654 10.2449 li
64.856 10.2766 li
65.2373 10.4511 li
65.4279 10.5621 li
65.6027 10.7206 li
65.7615 10.9109 li
65.8727 11.1329 li
66.8894 10.8951 li
67.1118 10.8634 li
67.3184 10.9109 li
67.4931 11.0061 li
67.6361 11.1488 li
67.7473 11.3074 li
67.8267 11.4977 li
67.8744 11.6721 li
67.8903 11.8465 li
67.8426 12.1796 li
67.7632 12.3381 li
67.6679 12.4809 li
67.5567 12.6077 li
67.4137 12.7029 li
67.2389 12.7821 li
67.0483 12.798 li
66.9689 12.7821 li
66.8736 12.7504 li
66.7782 12.7029 li
66.6829 12.6236 li
66.6194 12.5443 li
66.5558 12.4333 li
66.5241 12.354 li
66.5082 12.2747 li
66.5082 12.1796 li
66.5399 11.9734 li
66.667 11.8307 li
66.8259 11.7355 li
67.0006 11.7038 li
67.0642 11.7197 li
67.1277 11.7355 li
67.1913 11.7831 li
67.2548 11.8307 li
67.3025 11.8941 li
67.3501 11.9575 li
67.3819 12.0368 li
67.3978 12.1161 li
67.4137 12.1954 li
67.4137 12.2747 li
67.3978 12.354 li
67.366 12.4174 li
67.4296 12.4016 li
67.509 12.354 li
67.5725 12.2906 li
67.6361 12.2113 li
67.6996 12.132 li
67.7314 12.0368 li
67.7632 11.9417 li
67.7791 11.8465 li
67.7632 11.6721 li
67.7155 11.4977 li
67.6361 11.3391 li
67.5408 11.2122 li
67.4137 11.1012 li
67.2707 11.0219 li
67.096 10.9902 li
66.9212 11.0061 li
65.9204 11.2439 li
65.9681 11.5928 li
65.9522 11.8941 li
65.9045 12.1796 li
65.8251 12.4333 li
65.698 12.6711 li
65.5391 12.8773 li
65.2373 13.131 li
64.8878 13.3213 li
64.5065 13.4323 li
64.0935 13.464 li
63.744 13.4323 li
63.3945 13.3372 li
63.0768 13.1945 li
62.775 13.02 li
62.489 12.8139 li
62.2507 12.6077 li
62.0283 12.4174 li
61.8536 12.2588 li
61.4882 12.3698 li
61.1387 12.465 li
60.7574 12.5284 li
60.5509 12.5443 li
60.3126 12.5443 li
60.0585 12.5284 li
59.8043 12.465 li
59.5501 12.3698 li
59.3118 12.2588 li
59.1053 12.132 li
58.9306 12.0051 li
58.8511 11.9417 li
58.8035 11.8941 li
58.7717 11.8465 li
58.7399 11.799 li
58.7558 11.7514 li
58.7876 11.7038 li
58.8352 11.6562 li
58.8988 11.5928 li
59.0576 11.466 li
59.2642 11.3549 li
59.5183 11.2281 li
59.7884 11.1329 li
60.0902 11.0695 li
60.408 11.0378 li
60.7892 11.0695 li
61.1546 11.1488 li
61.4882 11.2915 li
61.9807 11.5928 li
62.4572 11.9893 li
63.3469 11.7514 li
63.331 11.7038 li
63.3151 11.6404 li
63.2992 11.5135 li
63.2992 11.3549 li
63.2992 11.2915 li
63.3151 11.2281 li
63.3628 11.0378 li
63.4263 10.8475 li
63.5216 10.6731 li
63.6646 10.5303 li
63.8234 10.4035 li
64.0141 10.3083 li
64.2524 10.2449 li
64.5065 10.229 li
cp
gsave
[.015886 0 0 .0158578 65.7298 11.3074 ]ct
@
grestore newpath
59.8043 17.9201 mo
59.5978 17.9043 li
59.423 17.8726 li
59.3277 17.8091 li
59.3277 17.714 li
59.3595 17.5554 li
59.4389 17.3651 li
59.566 17.1589 li
59.709 16.937 li
59.8996 16.715 li
60.1379 16.5088 li
60.3921 16.3344 li
60.7257 16.1599 li
61.0911 16.0489 li
61.4564 16.0013 li
62.0283 16.0172 li
62.632 16.1282 li
63.2992 15.478 li
63.2516 15.4463 li
63.2198 15.3987 li
63.1245 15.2877 li
63.0609 15.1609 li
63.0291 15.0975 li
62.9974 15.034 li
62.9338 14.8438 li
62.9021 14.6534 li
62.9179 14.4631 li
62.9497 14.257 li
63.0291 14.0667 li
63.1562 13.8923 li
63.3151 13.7178 li
63.5375 13.5751 li
63.6805 13.5117 li
63.8552 13.4482 li
64.0617 13.4165 li
64.2682 13.4007 li
64.5065 13.4165 li
64.729 13.4641 li
64.9672 13.5434 li
65.1738 13.6861 li
65.9204 12.9725 li
66.111 12.8298 li
66.3175 12.7664 li
66.5082 12.7664 li
66.6988 12.814 li
66.8736 12.8932 li
67.0483 13.0201 li
67.1754 13.1469 li
67.2707 13.2897 li
67.3343 13.4324 li
67.3978 13.6068 li
67.3978 13.9398 li
67.366 14.1143 li
67.2866 14.2728 li
67.1754 14.4156 li
67.0324 14.5266 li
66.9689 14.5583 li
66.9053 14.5742 li
66.8418 14.59 li
66.7306 14.59 li
66.6194 14.5742 li
66.5241 14.5266 li
66.4129 14.4631 li
66.3493 14.4156 li
66.2858 14.3521 li
66.2381 14.2728 li
66.1746 14.0667 li
66.2063 13.8923 li
66.2858 13.7337 li
66.4287 13.6227 li
66.4923 13.5909 li
66.5558 13.5751 li
66.6353 13.5751 li
66.7465 13.6068 li
66.8577 13.6544 li
66.9212 13.702 li
66.9848 13.7654 li
67.0324 13.8289 li
67.0801 13.8923 li
67.096 13.9716 li
67.096 14.0508 li
67.1277 14.0191 li
67.1595 13.9716 li
67.1913 13.924 li
67.223 13.8289 li
67.2389 13.7337 li
67.2389 13.6227 li
67.2389 13.5275 li
67.2072 13.4324 li
67.1595 13.3372 li
67.0642 13.2104 li
66.953 13.0835 li
66.81 12.9883 li
66.6512 12.9091 li
66.4923 12.8774 li
66.3175 12.8932 li
66.1587 12.9408 li
66.0157 13.0518 li
65.2691 13.7654 li
65.555 14.1619 li
65.7298 14.5742 li
65.7933 14.9706 li
65.7457 15.3512 li
65.6186 15.7159 li
65.412 16.0648 li
65.1261 16.3502 li
64.7925 16.5881 li
64.4748 16.7308 li
64.1253 16.826 li
63.7758 16.8577 li
63.4263 16.8577 li
63.0927 16.826 li
62.775 16.7784 li
62.489 16.715 li
62.2507 16.6515 li
61.9807 16.937 li
61.7265 17.1907 li
61.4405 17.4444 li
61.0593 17.6823 li
60.8369 17.7774 li
60.5668 17.8567 li
60.3126 17.9043 li
60.0426 17.9201 li
cp
60.6145 16.4929 mo
60.4238 16.5722 li
60.1697 16.7625 li
60.0426 16.8735 li
59.9155 16.9846 li
59.8202 17.1114 li
59.7566 17.2224 li
59.7249 17.3017 li
59.709 17.3651 li
59.7249 17.4285 li
59.7566 17.4603 li
59.8202 17.492 li
59.8996 17.5396 li
60.0585 17.5871 li
60.2491 17.603 li
60.4556 17.6188 li
60.678 17.603 li
60.9004 17.5396 li
61.1069 17.4444 li
61.2976 17.3334 li
61.4564 17.2383 li
61.7106 17.0321 li
61.8218 16.9211 li
61.9171 16.826 li
62.0283 16.7308 li
62.1236 16.6198 li
61.9489 16.5881 li
61.7424 16.5405 li
61.2817 16.4612 li
60.821 16.4612 li
cp
62.775 16.1599 mo
62.8226 16.1758 li
62.8862 16.1917 li
62.9656 16.2075 li
63.2674 16.2709 li
63.6487 16.3344 li
64.0458 16.3661 li
64.443 16.3344 li
64.6177 16.2868 li
64.7766 16.2075 li
64.9831 16.0648 li
65.1738 15.9062 li
65.3485 15.7001 li
65.4756 15.478 li
65.555 15.2402 li
65.6027 14.9865 li
65.5709 14.7169 li
65.4915 14.4314 li
65.4597 14.3839 li
65.4279 14.3204 li
65.3803 14.2411 li
65.3326 14.1619 li
65.2214 14.0032 li
65.1738 13.9398 li
65.1261 13.8923 li
63.8076 15.1609 li
64.0141 15.3353 li
64.2206 15.3987 li
64.4271 15.3829 li
64.6495 15.2877 li
64.7607 15.2084 li
64.8401 15.1292 li
64.9037 15.0499 li
64.9672 14.9548 li
65.0149 14.8438 li
65.0467 14.7327 li
65.0626 14.6217 li
65.0943 14.4949 li
65.0943 14.5583 li
65.1102 14.6376 li
65.1102 14.7169 li
65.0467 14.9865 li
64.8878 15.2877 li
64.7607 15.4305 li
64.6019 15.5573 li
64.3 15.7159 li
63.9982 15.7794 li
63.7917 15.7794 li
63.601 15.7001 li
63.4104 15.5732 li
cp
64.1253 13.6068 mo
63.9188 13.6703 li
63.744 13.7654 li
63.5693 13.9081 li
63.5057 13.9716 li
63.474 14.035 li
63.4422 14.1143 li
63.4104 14.257 li
63.4104 14.4156 li
63.4422 14.5742 li
63.5057 14.7327 li
63.7281 15.0816 li
65.0467 13.813 li
64.8719 13.702 li
64.6972 13.6385 li
64.5065 13.5909 li
64.3159 13.5909 li
cp
f
60.821 16.4612 mo
60.6145 16.4929 li
60.4238 16.5722 li
60.1697 16.7625 li
60.0426 16.8735 li
59.9155 16.9845 li
59.8202 17.1114 li
59.7566 17.2224 li
59.7249 17.3016 li
59.709 17.3651 li
59.7249 17.4285 li
59.7566 17.4602 li
59.8202 17.4919 li
59.8996 17.5395 li
60.0585 17.5871 li
60.2491 17.6029 li
60.4556 17.6188 li
60.678 17.6029 li
60.9004 17.5395 li
61.1069 17.4444 li
61.2976 17.3334 li
61.4564 17.2382 li
61.7106 17.0321 li
61.8218 16.9211 li
61.9171 16.8259 li
62.0283 16.7308 li
62.1236 16.6198 li
61.9489 16.588 li
61.7424 16.5405 li
61.2817 16.4612 li
60.821 16.4612 li
cp
65.1261 13.8922 mo
63.8076 15.1608 li
64.0141 15.3353 li
64.2206 15.3987 li
64.4271 15.3829 li
64.6495 15.2877 li
64.7607 15.2084 li
64.8401 15.1291 li
64.9037 15.0498 li
64.9672 14.9547 li
65.0149 14.8437 li
65.0467 14.7327 li
65.0626 14.6217 li
65.0943 14.4948 li
65.0943 14.5582 li
65.1102 14.6375 li
65.1102 14.7168 li
65.0467 14.9864 li
64.8878 15.2877 li
64.7607 15.4304 li
64.6019 15.5573 li
64.3 15.7159 li
63.9982 15.7793 li
63.7917 15.7793 li
63.601 15.7 li
63.4104 15.5731 li
62.775 16.1599 li
62.8226 16.1757 li
62.8862 16.1916 li
62.9656 16.2075 li
63.2674 16.2709 li
63.6487 16.3343 li
64.0459 16.366 li
64.443 16.3343 li
64.6177 16.2867 li
64.7766 16.2075 li
64.9831 16.0647 li
65.1738 15.9062 li
65.3485 15.7 li
65.4756 15.478 li
65.555 15.2401 li
65.6027 14.9864 li
65.5709 14.7168 li
65.4915 14.4314 li
65.4597 14.3838 li
65.4279 14.3204 li
65.3803 14.2411 li
65.3326 14.1618 li
65.2214 14.0032 li
65.1738 13.9398 li
65.1261 13.8922 li
cp
64.3159 13.5909 mo
64.1253 13.6068 li
63.9188 13.6702 li
63.744 13.7654 li
63.5693 13.9081 li
63.5057 13.9715 li
63.474 14.0349 li
63.4422 14.1142 li
63.4104 14.2569 li
63.4104 14.4155 li
63.4422 14.5741 li
63.5057 14.7327 li
63.7281 15.0816 li
65.0467 13.8129 li
64.8719 13.7019 li
64.6972 13.6385 li
64.5065 13.5909 li
64.3159 13.5909 li
cp
66.3176 12.7663 mo
66.5082 12.7663 li
66.6988 12.8139 li
66.8736 12.8932 li
67.0483 13.02 li
67.1754 13.1469 li
67.2707 13.2896 li
67.3343 13.4323 li
67.3978 13.6068 li
67.3978 13.9398 li
67.366 14.1142 li
67.2866 14.2728 li
67.1754 14.4155 li
67.0324 14.5265 li
66.9689 14.5582 li
66.9053 14.5741 li
66.8418 14.59 li
66.7306 14.59 li
66.6194 14.5741 li
66.5241 14.5265 li
66.4129 14.4631 li
66.3493 14.4155 li
66.2858 14.3521 li
66.2381 14.2728 li
66.1746 14.0667 li
66.2063 13.8922 li
66.2858 13.7336 li
66.4287 13.6226 li
66.4923 13.5909 li
66.5558 13.5751 li
66.6353 13.5751 li
66.7465 13.6068 li
66.8577 13.6544 li
66.9212 13.7019 li
66.9848 13.7654 li
67.0324 13.8288 li
67.0801 13.8922 li
67.096 13.9715 li
67.096 14.0508 li
67.1277 14.0191 li
67.1595 13.9715 li
67.1913 13.9239 li
67.2231 13.8288 li
67.2389 13.7336 li
67.2389 13.6226 li
67.2389 13.5275 li
67.2072 13.4323 li
67.1595 13.3372 li
67.0642 13.2103 li
66.953 13.0835 li
66.81 12.9883 li
66.6512 12.909 li
66.4923 12.8773 li
66.3176 12.8932 li
66.1587 12.9407 li
66.0157 13.0518 li
65.2691 13.7654 li
65.555 14.1618 li
65.7298 14.5741 li
65.7933 14.9705 li
65.7457 15.3511 li
65.6186 15.7159 li
65.412 16.0647 li
65.1261 16.3502 li
64.7925 16.588 li
64.4748 16.7308 li
64.1253 16.8259 li
63.7758 16.8576 li
63.4263 16.8576 li
63.0927 16.8259 li
62.775 16.7783 li
62.489 16.7149 li
62.2507 16.6515 li
61.9807 16.9369 li
61.7265 17.1906 li
61.4405 17.4444 li
61.0593 17.6822 li
60.8369 17.7774 li
60.5668 17.8567 li
60.3126 17.9042 li
60.0426 17.9201 li
59.8043 17.9201 li
59.5978 17.9042 li
59.423 17.8725 li
59.3277 17.8091 li
59.3277 17.7139 li
59.3595 17.5554 li
59.4389 17.3651 li
59.566 17.1589 li
59.709 16.9369 li
59.8996 16.7149 li
60.1379 16.5088 li
60.3921 16.3343 li
60.7257 16.1599 li
61.0911 16.0489 li
61.4564 16.0013 li
62.0283 16.0172 li
62.632 16.1282 li
63.2992 15.478 li
63.2516 15.4463 li
63.2198 15.3987 li
63.1245 15.2877 li
63.0609 15.1608 li
63.0291 15.0974 li
62.9974 15.034 li
62.9338 14.8437 li
62.9021 14.6534 li
62.9179 14.4631 li
62.9497 14.2569 li
63.0291 14.0667 li
63.1562 13.8922 li
63.3151 13.7178 li
63.5375 13.5751 li
63.6805 13.5116 li
63.8552 13.4482 li
64.0617 13.4165 li
64.2683 13.4006 li
64.5065 13.4165 li
64.729 13.4641 li
64.9672 13.5433 li
65.1738 13.6861 li
65.9204 12.9725 li
66.111 12.8297 li
66.3176 12.7663 li
cp
gsave
[.015886 0 0 .0158578 60.821 16.4612 ]ct
@
grestore newpath
62.8544 22.725 mo
62.8226 22.6933 li
62.7909 22.6457 li
62.775 22.5823 li
62.7432 22.4871 li
62.7273 22.281 li
62.7273 22.0431 li
62.7432 21.7736 li
62.7909 21.4881 li
62.8862 21.2026 li
63.0291 20.9172 li
63.2357 20.6 li
63.4898 20.3305 li
63.7758 20.0926 li
64.1094 19.9023 li
64.4748 19.7437 li
64.8719 19.6169 li
65.1102 18.7288 li
65.0626 18.713 li
64.999 18.6971 li
64.8719 18.6495 li
64.7448 18.5703 li
64.6813 18.5386 li
64.6336 18.491 li
64.4907 18.3641 li
64.3636 18.2055 li
64.2682 18.0311 li
64.2047 17.8408 li
64.1729 17.6346 li
64.1888 17.4285 li
64.2524 17.1906 li
64.3636 16.9528 li
64.4589 16.8259 li
64.586 16.699 li
64.7448 16.5563 li
64.9196 16.4453 li
65.1261 16.3343 li
65.3485 16.255 li
65.5868 16.2233 li
65.841 16.2233 li
66.1269 15.2401 li
66.2222 15.034 li
66.3652 14.8754 li
66.5399 14.7803 li
66.7306 14.7168 li
66.9212 14.701 li
67.1277 14.7327 li
67.3025 14.7803 li
67.4613 14.8437 li
67.5884 14.9388 li
67.7155 15.0657 li
67.8267 15.1926 li
67.9062 15.3511 li
67.9538 15.5097 li
67.9697 15.6841 li
67.9538 15.8745 li
67.8744 16.0489 li
67.8108 16.1282 li
67.7314 16.1916 li
67.652 16.2391 li
67.5408 16.2709 li
67.4296 16.3026 li
67.3025 16.3026 li
67.1754 16.2709 li
67.0642 16.2075 li
66.9053 16.0806 li
66.8259 15.9061 li
66.8259 15.7159 li
66.8894 15.5573 li
66.9371 15.4938 li
66.9848 15.4463 li
67.0483 15.4146 li
67.1754 15.3829 li
67.2866 15.3829 li
67.366 15.3829 li
67.4454 15.3987 li
67.5249 15.4304 li
67.5884 15.478 li
67.652 15.5256 li
67.6837 15.589 li
67.6996 15.5414 li
67.7155 15.4938 li
67.6996 15.4304 li
67.6837 15.3353 li
67.652 15.2401 li
67.6043 15.1608 li
67.5408 15.0815 li
67.4772 15.0023 li
67.3978 14.9388 li
67.2389 14.8754 li
67.0801 14.8278 li
66.9053 14.812 li
66.7306 14.8278 li
66.5717 14.8912 li
66.4446 14.9705 li
66.3175 15.0974 li
66.254 15.2719 li
65.9522 16.255 li
66.2699 16.3819 li
66.5399 16.5405 li
66.7624 16.7308 li
67.0165 17.0479 li
67.1754 17.3968 li
67.2548 17.7773 li
67.2389 18.1738 li
67.1436 18.5703 li
66.9689 18.9509 li
66.7624 19.2363 li
66.5082 19.4742 li
66.2222 19.6803 li
65.9204 19.8547 li
65.6027 19.9974 li
65.3008 20.1085 li
65.0308 20.2036 li
64.8084 20.267 li
64.7131 20.6318 li
64.6178 20.9965 li
64.4907 21.3454 li
64.3953 21.5356 li
64.2841 21.7418 li
64.1412 21.948 li
63.9505 22.1382 li
63.5216 22.4713 li
63.3151 22.5823 li
63.1245 22.6774 li
62.9656 22.725 li
cp
64.4907 20.3622 mo
64.3 20.4256 li
63.8552 20.5842 li
63.6487 20.6952 li
63.4581 20.8221 li
63.2992 20.9489 li
63.1721 21.1075 li
63.045 21.3929 li
62.9497 21.7101 li
62.9179 21.8687 li
62.9179 22.0114 li
62.9338 22.0907 li
62.9497 22.1541 li
62.9815 22.2017 li
63.045 22.2017 li
63.1086 22.2175 li
63.2039 22.2017 li
63.3628 22.17 li
63.5375 22.0907 li
63.9029 21.8687 li
64.0776 21.7101 li
64.2047 21.5198 li
64.3159 21.3454 li
64.3953 21.171 li
64.5065 20.8696 li
64.6019 20.5842 li
64.6813 20.2988 li
cp
64.999 19.5851 mo
65.0467 19.5693 li
65.1102 19.5535 li
65.1897 19.5217 li
65.4915 19.4266 li
65.841 19.2997 li
66.2063 19.1253 li
66.5241 18.9033 li
66.667 18.7606 li
66.7624 18.6179 li
66.8736 18.3958 li
66.953 18.158 li
67.0006 17.9042 li
67.0006 17.6505 li
66.953 17.3968 li
66.8577 17.1431 li
66.6988 16.921 li
66.4923 16.7308 li
66.4446 16.699 li
66.3811 16.6673 li
66.3017 16.6198 li
66.2222 16.5722 li
66.0475 16.4929 li
65.9681 16.4612 li
65.9045 16.4453 li
65.3962 18.2055 li
65.5709 18.2372 li
65.7457 18.2372 li
65.8727 18.2055 li
66.0475 18.0787 li
66.1905 17.8884 li
66.2381 17.7773 li
66.2858 17.6664 li
66.2858 17.5554 li
66.2858 17.4443 li
66.2858 17.3334 li
66.254 17.2224 li
66.2222 17.0955 li
66.1746 16.9845 li
66.2381 17.0638 li
66.3017 17.1589 li
66.3493 17.2858 li
66.3811 17.4285 li
66.397 17.5871 li
66.397 17.7615 li
66.3493 17.9518 li
66.2699 18.1421 li
66.0951 18.4276 li
65.8727 18.6495 li
65.698 18.7288 li
65.4915 18.7764 li
65.2532 18.7606 li
cp
65.3962 16.4294 mo
65.2214 16.4929 li
65.0467 16.588 li
64.8878 16.699 li
64.7607 16.8417 li
64.6495 17.032 li
64.5542 17.2224 li
64.5383 17.3175 li
64.5383 17.3968 li
64.5542 17.4761 li
64.6019 17.6188 li
64.6813 17.7457 li
64.7448 17.825 li
64.8401 17.9042 li
64.9355 17.9835 li
65.0943 18.0787 li
65.285 18.158 li
65.7933 16.4136 li
65.5868 16.4136 li
cp
f
64.6813 20.2988 mo
64.4907 20.3622 li
64.3 20.4256 li
63.8552 20.5842 li
63.6487 20.6952 li
63.4581 20.8221 li
63.2992 20.9489 li
63.1721 21.1075 li
63.045 21.393 li
62.9497 21.7101 li
62.9179 21.8687 li
62.9179 22.0114 li
62.9338 22.0907 li
62.9497 22.1541 li
62.9815 22.2017 li
63.045 22.2017 li
63.1086 22.2176 li
63.2039 22.2017 li
63.3628 22.17 li
63.5375 22.0907 li
63.9029 21.8687 li
64.0776 21.7101 li
64.2047 21.5198 li
64.3159 21.3454 li
64.3953 21.1709 li
64.5065 20.8696 li
64.6019 20.5842 li
64.6813 20.2988 li
cp
65.9045 16.4453 mo
65.3962 18.2055 li
65.5709 18.2373 li
65.7457 18.2373 li
65.8727 18.2055 li
66.0475 18.0787 li
66.1905 17.8884 li
66.2381 17.7774 li
66.2858 17.6664 li
66.2858 17.5554 li
66.2858 17.4444 li
66.2858 17.3334 li
66.254 17.2224 li
66.2222 17.0955 li
66.1746 16.9845 li
66.2381 17.0638 li
66.3017 17.1589 li
66.3493 17.2858 li
66.3811 17.4285 li
66.397 17.5871 li
66.397 17.7615 li
66.3493 17.9518 li
66.2699 18.1421 li
66.0951 18.4275 li
65.8727 18.6496 li
65.698 18.7288 li
65.4915 18.7764 li
65.2532 18.7606 li
64.999 19.5852 li
65.0467 19.5693 li
65.1102 19.5534 li
65.1896 19.5217 li
65.4915 19.4266 li
65.841 19.2997 li
66.2064 19.1253 li
66.5241 18.9033 li
66.667 18.7606 li
66.7624 18.6178 li
66.8736 18.3958 li
66.953 18.158 li
67.0006 17.9042 li
67.0006 17.6505 li
66.953 17.3968 li
66.8577 17.1431 li
66.6988 16.9211 li
66.4923 16.7308 li
66.4446 16.699 li
66.3811 16.6673 li
66.3017 16.6198 li
66.2222 16.5722 li
66.0475 16.4929 li
65.9681 16.4612 li
65.9045 16.4453 li
cp
65.5868 16.4136 mo
65.3962 16.4295 li
65.2214 16.4929 li
65.0467 16.588 li
64.8878 16.699 li
64.7607 16.8418 li
64.6495 17.0321 li
64.5542 17.2224 li
64.5383 17.3175 li
64.5383 17.3968 li
64.5542 17.4761 li
64.6019 17.6188 li
64.6813 17.7457 li
64.7448 17.8249 li
64.8402 17.9042 li
64.9355 17.9835 li
65.0943 18.0787 li
65.285 18.158 li
65.7933 16.4136 li
65.5868 16.4136 li
cp
66.9212 14.701 mo
67.1277 14.7327 li
67.3025 14.7803 li
67.4613 14.8437 li
67.5884 14.9388 li
67.7155 15.0657 li
67.8267 15.1926 li
67.9062 15.3511 li
67.9538 15.5097 li
67.9697 15.6841 li
67.9538 15.8744 li
67.8744 16.0489 li
67.8108 16.1282 li
67.7314 16.1916 li
67.652 16.2392 li
67.5408 16.2709 li
67.4296 16.3026 li
67.3025 16.3026 li
67.1754 16.2709 li
67.0642 16.2075 li
66.9053 16.0806 li
66.8259 15.9062 li
66.8259 15.7159 li
66.8895 15.5573 li
66.9371 15.4939 li
66.9848 15.4463 li
67.0483 15.4146 li
67.1754 15.3828 li
67.2866 15.3828 li
67.366 15.3828 li
67.4455 15.3987 li
67.5249 15.4304 li
67.5884 15.478 li
67.652 15.5256 li
67.6837 15.589 li
67.6996 15.5414 li
67.7155 15.4939 li
67.6996 15.4304 li
67.6837 15.3353 li
67.652 15.2401 li
67.6043 15.1608 li
67.5408 15.0816 li
67.4772 15.0023 li
67.3978 14.9388 li
67.2389 14.8754 li
67.0801 14.8278 li
66.9053 14.812 li
66.7306 14.8278 li
66.5717 14.8913 li
66.4446 14.9705 li
66.3176 15.0974 li
66.254 15.2718 li
65.9522 16.255 li
66.2699 16.3819 li
66.54 16.5405 li
66.7624 16.7308 li
67.0165 17.0479 li
67.1754 17.3968 li
67.2548 17.7774 li
67.2389 18.1738 li
67.1436 18.5703 li
66.9689 18.9509 li
66.7624 19.2363 li
66.5082 19.4742 li
66.2222 19.6803 li
65.9204 19.8547 li
65.6027 19.9975 li
65.3008 20.1085 li
65.0308 20.2036 li
64.8084 20.267 li
64.7131 20.6318 li
64.6178 20.9965 li
64.4907 21.3454 li
64.3953 21.5357 li
64.2841 21.7418 li
64.1412 21.948 li
63.9505 22.1383 li
63.5216 22.4713 li
63.3151 22.5823 li
63.1245 22.6774 li
62.9656 22.725 li
62.8544 22.725 li
62.8226 22.6933 li
62.7909 22.6457 li
62.775 22.5823 li
62.7432 22.4871 li
62.7273 22.281 li
62.7273 22.0431 li
62.7432 21.7735 li
62.7909 21.4881 li
62.8862 21.2027 li
63.0292 20.9172 li
63.2357 20.6001 li
63.4898 20.3305 li
63.7758 20.0926 li
64.1094 19.9023 li
64.4748 19.7437 li
64.8719 19.6169 li
65.1102 18.7288 li
65.0626 18.713 li
64.999 18.6971 li
64.8719 18.6496 li
64.7448 18.5703 li
64.6813 18.5385 li
64.6336 18.491 li
64.4907 18.3641 li
64.3636 18.2055 li
64.2683 18.0311 li
64.2047 17.8408 li
64.1729 17.6347 li
64.1888 17.4285 li
64.2524 17.1906 li
64.3636 16.9528 li
64.4589 16.8259 li
64.586 16.699 li
64.7448 16.5563 li
64.9196 16.4453 li
65.1261 16.3343 li
65.3485 16.255 li
65.5868 16.2233 li
65.841 16.2233 li
66.1269 15.2401 li
66.2222 15.034 li
66.3652 14.8754 li
66.54 14.7803 li
66.7306 14.7168 li
66.9212 14.701 li
cp
gsave
[.015886 0 0 .0158578 64.6813 20.2988 ]ct
@
grestore newpath
68.3192 25.2147 mo
68.2715 25.183 li
68.208 25.1354 li
68.1603 25.072 li
68.0332 24.9134 li
67.9062 24.7072 li
67.795 24.4535 li
67.6996 24.184 li
67.6202 23.8826 li
67.6043 23.5655 li
67.6202 23.2007 li
67.7155 22.8361 li
67.8426 22.4871 li
68.1444 21.9955 li
68.5416 21.5198 li
68.3192 20.6318 li
68.2715 20.6476 li
68.208 20.6635 li
68.065 20.6794 li
67.922 20.6794 li
67.8426 20.6794 li
67.7791 20.6635 li
67.5884 20.6318 li
67.4137 20.5525 li
67.2389 20.4573 li
67.0801 20.3305 li
66.953 20.1561 li
66.8577 19.9658 li
66.7941 19.7438 li
66.7783 19.4742 li
66.7941 19.3156 li
66.8418 19.1412 li
67.0006 18.7447 li
67.1277 18.5544 li
67.2866 18.38 li
67.4772 18.2214 li
67.6996 18.1104 li
67.4454 17.1114 li
67.4296 16.8735 li
67.4613 16.6674 li
67.5725 16.4929 li
67.6996 16.3502 li
67.8744 16.2392 li
68.0491 16.1599 li
68.2397 16.1123 li
68.4145 16.0965 li
68.7322 16.1599 li
68.8911 16.2233 li
69.034 16.3185 li
69.1611 16.4294 li
69.2723 16.5722 li
69.3359 16.7466 li
69.3677 16.9369 li
69.3518 17.032 li
69.32 17.1273 li
69.2565 17.2224 li
69.1929 17.3016 li
69.0976 17.381 li
69.0023 17.4285 li
68.9229 17.4602 li
68.8275 17.4761 li
68.7481 17.4919 li
68.5416 17.4444 li
68.3827 17.3334 li
68.3033 17.1748 li
68.2715 17.0004 li
68.2715 16.9369 li
68.3033 16.8576 li
68.3351 16.7942 li
68.3986 16.7466 li
68.4463 16.6832 li
68.5257 16.6515 li
68.5892 16.6039 li
68.6687 16.5881 li
68.7481 16.5722 li
68.8275 16.5722 li
68.907 16.5881 li
68.9705 16.6356 li
68.9546 16.5563 li
68.907 16.4929 li
68.8434 16.4136 li
68.764 16.3502 li
68.6846 16.3026 li
68.5892 16.2551 li
68.4939 16.2233 li
68.3986 16.2233 li
68.2239 16.2392 li
68.065 16.2867 li
67.9062 16.3502 li
67.7632 16.4612 li
67.652 16.5722 li
67.5884 16.7308 li
67.5408 16.8893 li
67.5725 17.0638 li
67.8108 18.0628 li
68.1444 18.0311 li
68.4463 18.0311 li
68.7322 18.0787 li
69.0023 18.1738 li
69.2247 18.3007 li
69.4312 18.4593 li
69.6854 18.7447 li
69.876 19.0936 li
69.9872 19.4901 li
70.0349 19.8865 li
70.0031 20.2512 li
69.8919 20.5842 li
69.7489 20.9014 li
69.5742 21.2027 li
69.3835 21.4881 li
69.177 21.726 li
68.9864 21.948 li
68.8275 22.1224 li
68.9229 22.4871 li
69.0182 22.8519 li
69.0817 23.2166 li
69.0976 23.4386 li
69.1135 23.6606 li
69.0817 23.9144 li
69.0182 24.1681 li
68.9229 24.4377 li
68.8116 24.6755 li
68.6846 24.8817 li
68.5734 25.0561 li
68.5098 25.1196 li
68.4463 25.1671 li
68.3986 25.2147 li
68.351 25.2306 li
cp
68.5892 22.3444 mo
68.4463 22.503 li
68.1603 22.8677 li
67.922 23.2642 li
67.8585 23.4703 li
67.8267 23.6606 li
67.8585 23.9778 li
67.9379 24.3108 li
68.065 24.5645 li
68.1127 24.6279 li
68.1603 24.6755 li
68.208 24.7072 li
68.2715 24.6914 li
68.3192 24.6438 li
68.3986 24.5963 li
68.5257 24.4852 li
68.6369 24.3425 li
68.7481 24.1681 li
68.8434 23.9619 li
68.907 23.7399 li
68.9388 23.5179 li
68.9229 23.2959 li
68.907 23.1056 li
68.8593 22.7885 li
68.7958 22.503 li
68.7163 22.2176 li
cp
68.4145 18.6179 mo
68.4781 18.6495 li
68.5575 18.6813 li
68.6687 18.7764 li
68.764 18.8716 li
68.8593 19.0143 li
68.9388 19.157 li
69.0023 19.3473 li
69.034 19.5535 li
69.0182 19.8865 li
68.9388 20.1877 li
68.8275 20.3464 li
68.6687 20.4891 li
68.4622 20.5842 li
68.6528 21.4406 li
68.6846 21.393 li
68.7322 21.3454 li
68.7799 21.282 li
68.8911 21.171 li
69.0023 21.0599 li
69.2406 20.7587 li
69.463 20.4257 li
69.6218 20.0768 li
69.6695 19.9023 li
69.6854 19.712 li
69.6695 19.4742 li
69.6218 19.2205 li
69.5265 18.9826 li
69.3994 18.7606 li
69.2406 18.5544 li
69.034 18.3959 li
68.7958 18.2849 li
68.5098 18.2214 li
68.4463 18.2214 li
68.3827 18.2214 li
68.2874 18.2214 li
68.1921 18.2214 li
68.0015 18.2373 li
67.922 18.2531 li
67.8585 18.269 li
68.3033 20.045 li
68.4781 19.9816 li
68.6051 19.9023 li
68.7163 19.7913 li
68.7958 19.601 li
68.8275 19.3632 li
68.8275 19.2839 li
68.8116 19.2046 li
68.7958 19.1253 li
68.7481 19.0302 li
68.6846 18.935 li
68.621 18.8398 li
68.5416 18.7606 li
68.4622 18.6813 li
68.351 18.5861 li
cp
67.5725 18.38 mo
67.4137 18.5068 li
67.2866 18.6495 li
67.1754 18.8082 li
67.1118 18.9826 li
67.0642 19.1887 li
67.0483 19.3949 li
67.0801 19.6169 li
67.1118 19.6962 li
67.1595 19.7596 li
67.2072 19.8389 li
67.2707 19.9023 li
67.3502 19.9499 li
67.4454 19.9975 li
67.6043 20.045 li
67.7791 20.0768 li
67.9697 20.0768 li
68.1762 20.0609 li
67.7473 18.2849 li
cp
f
68.7163 22.2175 mo
68.5892 22.3444 li
68.4463 22.503 li
68.1603 22.8677 li
67.922 23.2641 li
67.8585 23.4703 li
67.8267 23.6606 li
67.8585 23.9777 li
67.9379 24.3108 li
68.065 24.5645 li
68.1127 24.6279 li
68.1603 24.6755 li
68.208 24.7072 li
68.2715 24.6913 li
68.3192 24.6438 li
68.3986 24.5962 li
68.5257 24.4852 li
68.6369 24.3425 li
68.7481 24.168 li
68.8434 23.9619 li
68.907 23.7399 li
68.9387 23.5179 li
68.9229 23.2959 li
68.907 23.1056 li
68.8593 22.7884 li
68.7958 22.503 li
68.7163 22.2175 li
cp
67.7473 18.2848 mo
67.5725 18.3799 li
67.4137 18.5068 li
67.2866 18.6495 li
67.1754 18.8081 li
67.1118 18.9825 li
67.0642 19.1887 li
67.0483 19.3948 li
67.0801 19.6168 li
67.1118 19.6961 li
67.1595 19.7596 li
67.2072 19.8389 li
67.2707 19.9023 li
67.3501 19.9499 li
67.4455 19.9974 li
67.6043 20.045 li
67.7791 20.0767 li
67.9697 20.0767 li
68.1762 20.0609 li
67.7473 18.2848 li
cp
68.3827 18.2214 mo
68.2874 18.2214 li
68.1921 18.2214 li
68.0015 18.2372 li
67.922 18.2531 li
67.8585 18.2689 li
68.3033 20.045 li
68.478 19.9816 li
68.6051 19.9023 li
68.7163 19.7913 li
68.7958 19.601 li
68.8275 19.3631 li
68.8275 19.2838 li
68.8117 19.2045 li
68.7958 19.1253 li
68.7481 19.0301 li
68.6846 18.935 li
68.621 18.8398 li
68.5416 18.7605 li
68.4622 18.6812 li
68.351 18.5861 li
68.4145 18.6178 li
68.478 18.6495 li
68.5575 18.6812 li
68.6687 18.7764 li
68.764 18.8715 li
68.8593 19.0143 li
68.9387 19.157 li
69.0023 19.3473 li
69.0341 19.5534 li
69.0182 19.8864 li
68.9387 20.1877 li
68.8275 20.3463 li
68.6687 20.489 li
68.4622 20.5842 li
68.6528 21.4405 li
68.6846 21.3929 li
68.7322 21.3453 li
68.7799 21.2819 li
68.8911 21.1709 li
69.0023 21.0599 li
69.2406 20.7586 li
69.463 20.4256 li
69.6218 20.0767 li
69.6695 19.9023 li
69.6854 19.712 li
69.6695 19.4741 li
69.6218 19.2204 li
69.5265 18.9825 li
69.3994 18.7605 li
69.2406 18.5544 li
69.0341 18.3958 li
68.7958 18.2848 li
68.5098 18.2214 li
68.4463 18.2214 li
68.3827 18.2214 li
cp
68.4145 16.0964 mo
68.7322 16.1598 li
68.8911 16.2233 li
69.0341 16.3184 li
69.1611 16.4294 li
69.2723 16.5722 li
69.3359 16.7466 li
69.3677 16.9369 li
69.3518 17.032 li
69.32 17.1272 li
69.2565 17.2223 li
69.1929 17.3016 li
69.0976 17.3809 li
69.0023 17.4285 li
68.9229 17.4602 li
68.8275 17.476 li
68.7481 17.4919 li
68.5416 17.4443 li
68.3827 17.3333 li
68.3033 17.1747 li
68.2715 17.0003 li
68.2715 16.9369 li
68.3033 16.8576 li
68.3351 16.7942 li
68.3986 16.7466 li
68.4463 16.6832 li
68.5257 16.6514 li
68.5892 16.6039 li
68.6687 16.588 li
68.7481 16.5722 li
68.8275 16.5722 li
68.907 16.588 li
68.9705 16.6356 li
68.9546 16.5563 li
68.907 16.4929 li
68.8434 16.4136 li
68.764 16.3501 li
68.6846 16.3026 li
68.5892 16.255 li
68.4939 16.2233 li
68.3986 16.2233 li
68.2239 16.2391 li
68.065 16.2867 li
67.9062 16.3501 li
67.7632 16.4611 li
67.652 16.5722 li
67.5884 16.7307 li
67.5408 16.8893 li
67.5725 17.0637 li
67.8108 18.0628 li
68.1444 18.0311 li
68.4463 18.0311 li
68.7322 18.0786 li
69.0023 18.1738 li
69.2247 18.3007 li
69.4312 18.4592 li
69.6854 18.7447 li
69.876 19.0935 li
69.9872 19.49 li
70.0349 19.8864 li
70.0031 20.2512 li
69.8919 20.5842 li
69.7489 20.9013 li
69.5742 21.2026 li
69.3835 21.4881 li
69.177 21.7259 li
68.9864 21.9479 li
68.8275 22.1224 li
68.9229 22.4871 li
69.0182 22.8518 li
69.0817 23.2166 li
69.0976 23.4386 li
69.1135 23.6606 li
69.0817 23.9143 li
69.0182 24.168 li
68.9229 24.4376 li
68.8117 24.6755 li
68.6846 24.8816 li
68.5734 25.0561 li
68.5098 25.1195 li
68.4463 25.1671 li
68.3986 25.2147 li
68.351 25.2305 li
68.3192 25.2147 li
68.2715 25.1829 li
68.208 25.1354 li
68.1603 25.0719 li
68.0332 24.9134 li
67.9062 24.7072 li
67.7949 24.4535 li
67.6996 24.1839 li
67.6202 23.8826 li
67.6043 23.5654 li
67.6202 23.2007 li
67.7155 22.836 li
67.8426 22.4871 li
68.1444 21.9955 li
68.5416 21.5198 li
68.3192 20.6317 li
68.2715 20.6476 li
68.208 20.6635 li
68.065 20.6793 li
67.922 20.6793 li
67.8426 20.6793 li
67.7791 20.6635 li
67.5884 20.6317 li
67.4137 20.5525 li
67.2389 20.4573 li
67.0801 20.3305 li
66.953 20.156 li
66.8577 19.9657 li
66.7941 19.7437 li
66.7782 19.4741 li
66.7941 19.3155 li
66.8418 19.1411 li
67.0006 18.7447 li
67.1277 18.5544 li
67.2866 18.3799 li
67.4772 18.2214 li
67.6996 18.1104 li
67.4455 17.1113 li
67.4296 16.8734 li
67.4613 16.6673 li
67.5725 16.4929 li
67.6996 16.3501 li
67.8744 16.2391 li
68.0491 16.1598 li
68.2398 16.1123 li
68.4145 16.0964 li
cp
gsave
[.015886 0 0 .0158578 68.7163 22.2175 ]ct
@
grestore newpath
74.1335 24.6121 mo
73.9428 24.5328 li
73.7204 24.4218 li
73.5139 24.2632 li
73.2756 24.0729 li
73.0691 23.8509 li
72.8943 23.5972 li
72.7196 23.2483 li
72.6243 22.8995 li
72.5607 22.5189 li
72.5766 21.948 li
72.6878 21.3454 li
72.0365 20.6952 li
72.0047 20.7269 li
71.9571 20.7745 li
71.8459 20.8538 li
71.7188 20.9331 li
71.6552 20.9648 li
71.6076 20.9807 li
71.417 21.0441 li
71.2104 21.0758 li
71.0198 21.0758 li
70.8292 21.0282 li
70.6227 20.949 li
70.4479 20.838 li
70.2732 20.6635 li
70.1302 20.4415 li
70.0666 20.2988 li
70.019 20.1243 li
69.9713 19.934 li
69.9554 19.712 li
69.9713 19.4901 li
70.019 19.2521 li
70.1143 19.0302 li
70.2414 18.8082 li
69.5265 18.0628 li
69.3835 17.8725 li
69.32 17.6823 li
69.32 17.4761 li
69.3677 17.2858 li
69.463 17.1113 li
69.5742 16.9528 li
69.7171 16.8101 li
69.8601 16.7149 li
70.0031 16.6515 li
70.162 16.6039 li
70.5115 16.5881 li
70.6862 16.6198 li
70.8451 16.699 li
70.988 16.8101 li
71.0992 16.9686 li
71.1151 17.0162 li
71.1469 17.0797 li
71.1469 17.1431 li
71.1469 17.2541 li
71.131 17.3651 li
71.0833 17.4761 li
71.0357 17.5712 li
70.9721 17.6346 li
70.9086 17.6981 li
70.8292 17.7457 li
70.6385 17.8091 li
70.4479 17.7932 li
70.289 17.6981 li
70.1778 17.5554 li
70.1461 17.5078 li
70.1461 17.4285 li
70.1461 17.3492 li
70.1778 17.2382 li
70.2255 17.1272 li
70.2732 17.0638 li
70.3208 17.0004 li
70.3844 16.9528 li
70.4638 16.9211 li
70.5273 16.8893 li
70.6068 16.8893 li
70.575 16.8576 li
70.5273 16.8259 li
70.4797 16.7942 li
70.3844 16.7625 li
70.289 16.7466 li
70.1937 16.7466 li
70.0825 16.7625 li
69.9872 16.7783 li
69.9078 16.8259 li
69.7648 16.9211 li
69.6377 17.0479 li
69.5424 17.1906 li
69.4789 17.3492 li
69.4471 17.5078 li
69.4471 17.6664 li
69.4947 17.825 li
69.6059 17.9677 li
70.3208 18.713 li
70.718 18.4276 li
71.131 18.269 li
71.5282 18.2056 li
71.9253 18.2372 li
72.2907 18.3641 li
72.6243 18.5703 li
72.9261 18.8557 li
73.1644 19.1887 li
73.3074 19.5059 li
73.3868 19.8547 li
73.4186 20.2036 li
73.4186 20.5525 li
73.3868 20.9014 li
73.3392 21.2185 li
73.2756 21.4881 li
73.228 21.726 li
73.498 21.9955 li
73.7522 22.2493 li
74.0064 22.5506 li
74.2447 22.9153 li
74.3559 23.1532 li
74.4194 23.4069 li
74.4671 23.6765 li
74.4988 23.9302 li
74.4988 24.1681 li
74.4671 24.3901 li
74.4353 24.5486 li
74.3876 24.6438 li
74.2764 24.6597 li
cp
73.1485 22.0273 mo
73.1009 22.2493 li
73.0373 22.7092 li
73.0214 23.169 li
73.0691 23.3752 li
73.1485 23.5496 li
73.3233 23.8033 li
73.4345 23.9461 li
73.5616 24.0571 li
73.6728 24.1522 li
73.784 24.2156 li
73.8634 24.2474 li
73.9269 24.2632 li
73.9905 24.2632 li
74.0223 24.2156 li
74.0699 24.1522 li
74.1017 24.0729 li
74.1493 23.9144 li
74.1811 23.7399 li
74.1811 23.5338 li
74.1652 23.3118 li
74.1176 23.0898 li
74.0223 22.8677 li
73.9111 22.6933 li
73.7999 22.5347 li
73.5933 22.281 li
73.498 22.17 li
73.4027 22.059 li
73.2915 21.9639 li
73.1803 21.8528 li
cp
71.1945 18.8875 mo
71.274 18.8875 li
71.544 18.935 li
71.8459 19.1094 li
71.9888 19.2363 li
72.1159 19.3949 li
72.2748 19.6962 li
72.3542 19.9816 li
72.3383 20.1877 li
72.2748 20.3781 li
72.1477 20.5842 li
72.7355 21.2185 li
72.7355 21.171 li
72.7514 21.0917 li
72.7831 21.0124 li
72.8467 20.7111 li
72.9102 20.3463 li
72.9261 19.934 li
72.8943 19.5535 li
72.8467 19.3632 li
72.7831 19.2046 li
72.6402 18.9984 li
72.4654 18.8082 li
72.2589 18.6495 li
72.0524 18.5227 li
71.7982 18.4276 li
71.544 18.3958 li
71.274 18.4117 li
71.0039 18.5068 li
70.9563 18.5227 li
70.8768 18.5703 li
70.8133 18.602 li
70.7339 18.6654 li
70.575 18.7606 li
70.5115 18.824 li
70.4638 18.8557 li
71.7347 20.1877 li
71.8935 19.9816 li
71.9571 19.7596 li
71.9412 19.5535 li
71.8459 19.3314 li
71.7823 19.2363 li
71.7029 19.1412 li
71.6076 19.0777 li
71.5123 19.0302 li
71.417 18.9825 li
71.3057 18.9509 li
71.1787 18.9191 li
71.0516 18.9033 li
71.1151 18.8875 li
cp
70.2732 19.1094 mo
70.1937 19.2997 li
70.1461 19.4901 li
70.1461 19.6803 li
70.1778 19.8706 li
70.2255 20.0609 li
70.3367 20.2354 li
70.4638 20.4098 li
70.5273 20.4732 li
70.6068 20.5208 li
70.6862 20.5525 li
70.8292 20.5684 li
70.9721 20.5684 li
71.131 20.5366 li
71.3057 20.4732 li
71.6394 20.2512 li
70.3844 18.9509 li
cp
f
73.1803 21.8528 mo
73.1485 22.0273 li
73.1009 22.2493 li
73.0373 22.7092 li
73.0214 23.169 li
73.0691 23.3752 li
73.1485 23.5496 li
73.3233 23.8034 li
73.4345 23.9461 li
73.5616 24.0571 li
73.6728 24.1522 li
73.784 24.2157 li
73.8634 24.2474 li
73.9269 24.2632 li
73.9905 24.2632 li
74.0223 24.2157 li
74.0699 24.1522 li
74.1017 24.0729 li
74.1493 23.9144 li
74.1811 23.7399 li
74.1811 23.5338 li
74.1652 23.3118 li
74.1176 23.0898 li
74.0223 22.8677 li
73.9111 22.6933 li
73.7999 22.5347 li
73.5933 22.281 li
73.498 22.17 li
73.4027 22.059 li
73.2915 21.9638 li
73.1803 21.8528 li
cp
70.3844 18.9509 mo
70.2732 19.1094 li
70.1937 19.2997 li
70.1461 19.49 li
70.1461 19.6803 li
70.1778 19.8706 li
70.2255 20.0609 li
70.3367 20.2353 li
70.4638 20.4098 li
70.5273 20.4732 li
70.6068 20.5208 li
70.6862 20.5525 li
70.8292 20.5684 li
70.9721 20.5684 li
71.131 20.5366 li
71.3058 20.4732 li
71.6394 20.2512 li
70.3844 18.9509 li
cp
71.544 18.3958 mo
71.274 18.4117 li
71.0039 18.5068 li
70.9563 18.5227 li
70.8768 18.5703 li
70.8133 18.602 li
70.7339 18.6654 li
70.575 18.7606 li
70.5115 18.824 li
70.4638 18.8557 li
71.7347 20.1878 li
71.8935 19.9816 li
71.9571 19.7596 li
71.9412 19.5535 li
71.8459 19.3315 li
71.7823 19.2363 li
71.7029 19.1412 li
71.6076 19.0777 li
71.5123 19.0302 li
71.417 18.9826 li
71.3058 18.9509 li
71.1787 18.9191 li
71.0516 18.9033 li
71.1151 18.8874 li
71.1945 18.8874 li
71.274 18.8874 li
71.544 18.935 li
71.8459 19.1094 li
71.9889 19.2363 li
72.1159 19.3949 li
72.2748 19.6962 li
72.3542 19.9816 li
72.3383 20.1878 li
72.2748 20.3781 li
72.1477 20.5842 li
72.7355 21.2185 li
72.7355 21.171 li
72.7514 21.0917 li
72.7831 21.0124 li
72.8467 20.7111 li
72.9102 20.3464 li
72.9261 19.934 li
72.8944 19.5535 li
72.8467 19.3632 li
72.7831 19.2046 li
72.6402 18.9984 li
72.4654 18.8081 li
72.2589 18.6496 li
72.0524 18.5227 li
71.7982 18.4276 li
71.544 18.3958 li
cp
70.5115 16.5881 mo
70.6862 16.6198 li
70.8451 16.6991 li
70.988 16.8101 li
71.0992 16.9686 li
71.1151 17.0162 li
71.1469 17.0796 li
71.1469 17.1431 li
71.1469 17.2541 li
71.131 17.3651 li
71.0834 17.4761 li
71.0357 17.5712 li
70.9721 17.6347 li
70.9086 17.6981 li
70.8292 17.7457 li
70.6385 17.8091 li
70.4479 17.7932 li
70.289 17.6981 li
70.1778 17.5554 li
70.1461 17.5078 li
70.1461 17.4285 li
70.1461 17.3492 li
70.1778 17.2382 li
70.2255 17.1272 li
70.2732 17.0638 li
70.3208 17.0004 li
70.3844 16.9528 li
70.4638 16.9211 li
70.5273 16.8894 li
70.6068 16.8894 li
70.575 16.8576 li
70.5273 16.8259 li
70.4797 16.7942 li
70.3844 16.7625 li
70.289 16.7466 li
70.1937 16.7466 li
70.0825 16.7625 li
69.9872 16.7783 li
69.9078 16.8259 li
69.7648 16.9211 li
69.6377 17.0479 li
69.5424 17.1906 li
69.4789 17.3492 li
69.4471 17.5078 li
69.4471 17.6664 li
69.4948 17.825 li
69.6059 17.9677 li
70.3208 18.713 li
70.718 18.4276 li
71.131 18.269 li
71.5282 18.2055 li
71.9253 18.2373 li
72.2907 18.3641 li
72.6243 18.5703 li
72.9261 18.8557 li
73.1644 19.1887 li
73.3074 19.5059 li
73.3868 19.8548 li
73.4186 20.2036 li
73.4186 20.5525 li
73.3868 20.9014 li
73.3392 21.2185 li
73.2756 21.4881 li
73.228 21.726 li
73.498 21.9956 li
73.7522 22.2493 li
74.0064 22.5506 li
74.2447 22.9153 li
74.3559 23.1532 li
74.4194 23.4069 li
74.4671 23.6765 li
74.4988 23.9302 li
74.4988 24.1681 li
74.4671 24.3901 li
74.4353 24.5487 li
74.3876 24.6438 li
74.2764 24.6597 li
74.1335 24.6121 li
73.9428 24.5328 li
73.7204 24.4218 li
73.5139 24.2632 li
73.2756 24.0729 li
73.0691 23.8509 li
72.8944 23.5972 li
72.7196 23.2483 li
72.6243 22.8995 li
72.5607 22.5189 li
72.5766 21.948 li
72.6878 21.3454 li
72.0365 20.6952 li
72.0047 20.7269 li
71.9571 20.7745 li
71.8459 20.8538 li
71.7188 20.9331 li
71.6552 20.9648 li
71.6076 20.9807 li
71.417 21.0441 li
71.2104 21.0758 li
71.0198 21.0758 li
70.8292 21.0282 li
70.6227 20.9489 li
70.4479 20.8379 li
70.2732 20.6635 li
70.1302 20.4415 li
70.0666 20.2988 li
70.019 20.1243 li
69.9713 19.934 li
69.9554 19.712 li
69.9713 19.49 li
70.019 19.2522 li
70.1143 19.0302 li
70.2414 18.8081 li
69.5265 18.0628 li
69.3835 17.8725 li
69.32 17.6822 li
69.32 17.4761 li
69.3677 17.2858 li
69.463 17.1114 li
69.5742 16.9528 li
69.7172 16.8101 li
69.8601 16.7149 li
70.0031 16.6515 li
70.162 16.6039 li
70.5115 16.5881 li
cp
gsave
[.015886 0 0 .0158578 73.1803 21.8528 ]ct
@
grestore newpath
78.6292 21.2661 mo
78.3591 21.2344 li
78.0732 21.1868 li
77.7714 21.0917 li
77.4854 20.9648 li
77.1677 20.7428 li
76.8976 20.4891 li
76.6752 20.2036 li
76.4846 19.8706 li
76.3098 19.5059 li
76.1827 19.1253 li
75.2931 18.8716 li
75.2931 18.9191 li
75.2614 18.9825 li
75.2137 19.1094 li
75.1343 19.2363 li
75.1025 19.2997 li
75.0707 19.3473 li
74.9278 19.49 li
74.7848 19.6169 li
74.61 19.712 li
74.4194 19.7755 li
74.2129 19.8072 li
73.9905 19.7913 li
73.7681 19.7279 li
73.5298 19.6169 li
73.4027 19.5217 li
73.2597 19.4107 li
73.1326 19.2521 li
73.0055 19.0618 li
72.9102 18.8716 li
72.8308 18.6337 li
72.7831 18.3958 li
72.799 18.1421 li
71.7982 17.8566 li
71.5917 17.7615 li
71.4328 17.6188 li
71.3375 17.4443 li
71.274 17.2699 li
71.274 17.0638 li
71.2899 16.8735 li
71.3375 16.6832 li
71.417 16.5246 li
71.5123 16.3978 li
71.6235 16.2709 li
71.7664 16.1599 li
71.9094 16.0806 li
72.0842 16.033 li
72.2589 16.0172 li
72.4336 16.0489 li
72.6084 16.1282 li
72.6878 16.1757 li
72.7514 16.255 li
72.799 16.3502 li
72.8467 16.4453 li
72.8626 16.5721 li
72.8626 16.6832 li
72.8308 16.8101 li
72.7831 16.9369 li
72.6402 17.0796 li
72.4654 17.1589 li
72.2907 17.1589 li
72.1159 17.0955 li
72.0683 17.0638 li
72.0206 17.0003 li
71.9889 16.9369 li
71.9571 16.8259 li
71.9412 16.699 li
71.9412 16.6198 li
71.973 16.5405 li
71.9889 16.4612 li
72.0365 16.3978 li
72.0842 16.3343 li
72.1636 16.3026 li
72.1159 16.2867 li
72.0524 16.2867 li
72.0047 16.2867 li
71.9094 16.3026 li
71.8141 16.3343 li
71.7188 16.3819 li
71.6394 16.4453 li
71.5599 16.5087 li
71.5123 16.588 li
71.4328 16.7466 li
71.3852 16.921 li
71.3852 17.0955 li
71.4011 17.2541 li
71.4487 17.4127 li
71.544 17.5554 li
71.6711 17.6664 li
71.83 17.7457 li
72.8149 18.0311 li
72.942 17.7139 li
73.1009 17.4443 li
73.2915 17.2224 li
73.6092 16.9686 li
73.9587 16.8101 li
74.34 16.7466 li
74.7371 16.7466 li
75.1343 16.8417 li
75.5155 17.0162 li
75.8015 17.2224 li
76.0398 17.4761 li
76.2463 17.7773 li
76.421 18.0787 li
76.564 18.3799 li
76.6752 18.6813 li
76.7705 18.9509 li
76.8341 19.1887 li
77.2153 19.2839 li
77.5648 19.379 li
77.9302 19.5059 li
78.1208 19.5851 li
78.3273 19.712 li
78.5339 19.8547 li
78.7245 20.0292 li
79.0422 20.4573 li
79.1693 20.6635 li
79.2488 20.8696 li
79.2964 21.0282 li
79.3123 21.1392 li
79.2805 21.171 li
79.217 21.1868 li
79.1534 21.2185 li
79.074 21.2344 li
78.8675 21.2661 li
cp
76.9294 19.49 mo
76.9929 19.6962 li
77.1677 20.1243 li
77.263 20.3304 li
77.3901 20.5208 li
77.5331 20.6793 li
77.6919 20.8062 li
77.9779 20.933 li
78.2956 21.0282 li
78.4386 21.0599 li
78.5815 21.0599 li
78.661 21.0441 li
78.7245 21.0282 li
78.7722 20.9965 li
78.7881 20.9489 li
78.7881 20.8696 li
78.7722 20.7745 li
78.7404 20.6159 li
78.6769 20.4415 li
78.4544 20.0767 li
78.2956 19.9182 li
78.105 19.7755 li
77.9143 19.6803 li
77.7396 19.601 li
77.4377 19.4741 li
77.1518 19.3948 li
76.8658 19.3156 li
cp
72.9738 18.3958 mo
73.0055 18.5861 li
73.0532 18.7764 li
73.1485 18.935 li
73.2597 19.0936 li
73.4186 19.2363 li
73.5933 19.3473 li
73.7999 19.4266 li
73.8793 19.4424 li
73.9587 19.4424 li
74.054 19.4266 li
74.1811 19.379 li
74.3082 19.2997 li
74.3876 19.2363 li
74.467 19.157 li
74.5465 19.0618 li
74.6418 18.8874 li
74.7371 18.6971 li
72.9738 18.1897 li
cp
74.34 17.6029 mo
74.5147 17.6346 li
74.7212 17.7139 li
75.0072 17.8884 li
75.2137 18.1104 li
75.309 18.2848 li
75.3408 18.491 li
75.3249 18.7288 li
76.151 18.9825 li
76.1351 18.935 li
76.1192 18.8716 li
76.1033 18.7922 li
76.008 18.491 li
75.865 18.1421 li
75.6903 17.7773 li
75.4679 17.4602 li
75.3408 17.3334 li
75.1978 17.2224 li
74.9595 17.1113 li
74.7212 17.032 li
74.467 17.0003 li
74.2129 17.0003 li
73.9587 17.032 li
73.7204 17.1272 li
73.498 17.2858 li
73.2915 17.5078 li
73.2597 17.5554 li
73.228 17.6188 li
73.1803 17.6822 li
73.1485 17.7773 li
73.0691 17.9518 li
73.0373 18.0153 li
73.0055 18.0787 li
74.7689 18.5861 li
74.8166 18.4117 li
74.8166 18.2531 li
74.7689 18.1104 li
74.6418 17.9359 li
74.4512 17.7932 li
74.34 17.7457 li
74.2288 17.7139 li
74.1176 17.6981 li
74.0064 17.6981 li
73.8952 17.7139 li
73.784 17.7298 li
73.6728 17.7773 li
73.5457 17.8091 li
73.6251 17.7457 li
73.7363 17.6981 li
73.8475 17.6346 li
73.9905 17.6029 li
74.1652 17.5871 li
cp
f
76.8659 19.3156 mo
76.9294 19.49 li
76.9929 19.6961 li
77.1677 20.1243 li
77.263 20.3305 li
77.3901 20.5207 li
77.5331 20.6793 li
77.6919 20.8062 li
77.9779 20.933 li
78.2956 21.0282 li
78.4386 21.0599 li
78.5815 21.0599 li
78.661 21.0441 li
78.7245 21.0282 li
78.7722 20.9965 li
78.7881 20.9489 li
78.7881 20.8696 li
78.7722 20.7745 li
78.7404 20.6159 li
78.6768 20.4415 li
78.4544 20.0767 li
78.2956 19.9181 li
78.105 19.7754 li
77.9143 19.6803 li
77.7396 19.601 li
77.4377 19.4741 li
77.1518 19.3948 li
76.8659 19.3156 li
cp
72.9738 18.1896 mo
72.9738 18.3958 li
73.0056 18.5861 li
73.0532 18.7764 li
73.1485 18.935 li
73.2597 19.0935 li
73.4186 19.2363 li
73.5933 19.3473 li
73.7999 19.4266 li
73.8793 19.4424 li
73.9587 19.4424 li
74.054 19.4266 li
74.1811 19.379 li
74.3082 19.2997 li
74.3876 19.2363 li
74.4671 19.157 li
74.5465 19.0618 li
74.6418 18.8874 li
74.7371 18.6971 li
72.9738 18.1896 li
cp
74.2129 17.0003 mo
73.9587 17.032 li
73.7204 17.1272 li
73.498 17.2858 li
73.2915 17.5078 li
73.2597 17.5553 li
73.228 17.6188 li
73.1803 17.6822 li
73.1485 17.7773 li
73.0691 17.9518 li
73.0373 18.0152 li
73.0056 18.0786 li
74.7689 18.5861 li
74.8166 18.4117 li
74.8166 18.2531 li
74.7689 18.1104 li
74.6418 17.9359 li
74.4512 17.7932 li
74.34 17.7456 li
74.2288 17.7139 li
74.1176 17.6981 li
74.0064 17.6981 li
73.8952 17.7139 li
73.784 17.7298 li
73.6728 17.7773 li
73.5457 17.8091 li
73.6251 17.7456 li
73.7363 17.6981 li
73.8475 17.6346 li
73.9905 17.6029 li
74.1652 17.5871 li
74.34 17.6029 li
74.5147 17.6346 li
74.7212 17.7139 li
75.0072 17.8883 li
75.2137 18.1104 li
75.309 18.2848 li
75.3408 18.4909 li
75.3249 18.7288 li
76.151 18.9825 li
76.1351 18.935 li
76.1192 18.8715 li
76.1033 18.7922 li
76.008 18.4909 li
75.865 18.1421 li
75.6903 17.7773 li
75.4679 17.4602 li
75.3408 17.3333 li
75.1978 17.2223 li
74.9595 17.1113 li
74.7212 17.032 li
74.4671 17.0003 li
74.2129 17.0003 li
cp
72.2589 16.0171 mo
72.4337 16.0488 li
72.6084 16.1281 li
72.6878 16.1757 li
72.7514 16.255 li
72.799 16.3501 li
72.8467 16.4453 li
72.8626 16.5722 li
72.8626 16.6832 li
72.8308 16.81 li
72.7831 16.9369 li
72.6402 17.0796 li
72.4654 17.1589 li
72.2907 17.1589 li
72.1159 17.0955 li
72.0683 17.0637 li
72.0206 17.0003 li
71.9888 16.9369 li
71.9571 16.8259 li
71.9412 16.699 li
71.9412 16.6197 li
71.973 16.5404 li
71.9888 16.4611 li
72.0365 16.3977 li
72.0842 16.3343 li
72.1636 16.3026 li
72.1159 16.2867 li
72.0524 16.2867 li
72.0047 16.2867 li
71.9094 16.3026 li
71.8141 16.3343 li
71.7188 16.3819 li
71.6394 16.4453 li
71.5599 16.5087 li
71.5123 16.588 li
71.4328 16.7466 li
71.3852 16.921 li
71.3852 17.0955 li
71.4011 17.254 li
71.4487 17.4126 li
71.544 17.5553 li
71.6711 17.6663 li
71.83 17.7456 li
72.8149 18.0311 li
72.942 17.7139 li
73.1009 17.4443 li
73.2915 17.2223 li
73.6092 16.9686 li
73.9587 16.81 li
74.34 16.7466 li
74.7371 16.7466 li
75.1343 16.8417 li
75.5155 17.0162 li
75.8015 17.2223 li
76.0398 17.476 li
76.2463 17.7773 li
76.421 18.0786 li
76.564 18.3799 li
76.6752 18.6812 li
76.7705 18.9508 li
76.8341 19.1887 li
77.2153 19.2838 li
77.5648 19.379 li
77.9302 19.5058 li
78.1208 19.5851 li
78.3274 19.712 li
78.5339 19.8547 li
78.7245 20.0292 li
79.0422 20.4573 li
79.1693 20.6635 li
79.2487 20.8696 li
79.2964 21.0282 li
79.3123 21.1392 li
79.2805 21.1709 li
79.217 21.1868 li
79.1534 21.2185 li
79.074 21.2343 li
78.8675 21.2661 li
78.6292 21.2661 li
78.3591 21.2343 li
78.0732 21.1868 li
77.7713 21.0916 li
77.4854 20.9648 li
77.1677 20.7428 li
76.8976 20.489 li
76.6752 20.2036 li
76.4846 19.8706 li
76.3098 19.5058 li
76.1827 19.1253 li
75.2931 18.8715 li
75.2931 18.9191 li
75.2614 18.9825 li
75.2137 19.1094 li
75.1343 19.2363 li
75.1025 19.2997 li
75.0707 19.3473 li
74.9278 19.49 li
74.7848 19.6168 li
74.61 19.712 li
74.4194 19.7754 li
74.2129 19.8071 li
73.9905 19.7913 li
73.7681 19.7279 li
73.5298 19.6168 li
73.4027 19.5217 li
73.2597 19.4107 li
73.1326 19.2521 li
73.0056 19.0618 li
72.9102 18.8715 li
72.8308 18.6337 li
72.7831 18.3958 li
72.799 18.1421 li
71.7982 17.8566 li
71.5917 17.7615 li
71.4328 17.6188 li
71.3375 17.4443 li
71.274 17.2699 li
71.274 17.0637 li
71.2899 16.8734 li
71.3375 16.6832 li
71.417 16.5246 li
71.5123 16.3977 li
71.6235 16.2709 li
71.7664 16.1598 li
71.9094 16.0806 li
72.0842 16.033 li
72.2589 16.0171 li
cp
gsave
[.015886 0 0 .0158578 76.8659 19.3156 ]ct
@
grestore newpath
75.8968 17.1906 mo
75.7062 17.1589 li
75.3249 16.9845 li
75.1343 16.8735 li
74.9595 16.7149 li
74.8007 16.5247 li
74.6736 16.2867 li
73.6728 16.5405 li
73.4504 16.5722 li
73.2438 16.5247 li
73.0691 16.4294 li
72.9261 16.2867 li
72.8149 16.1282 li
72.7355 15.9379 li
72.6878 15.7476 li
72.6719 15.589 li
72.7196 15.256 li
72.7832 15.0974 li
72.8785 14.9547 li
73.0055 14.8278 li
73.1485 14.7168 li
73.3074 14.6534 li
73.498 14.6375 li
73.5933 14.6375 li
73.6886 14.6851 li
73.784 14.7327 li
73.8634 14.812 li
73.9428 14.8912 li
74.0064 15.0023 li
74.0381 15.0815 li
74.054 15.1608 li
74.054 15.256 li
74.0064 15.4622 li
73.8952 15.6049 li
73.7363 15.7 li
73.5616 15.7318 li
73.498 15.7159 li
73.4345 15.7 li
73.3709 15.6525 li
73.3074 15.6049 li
73.2597 15.5414 li
73.2121 15.478 li
73.1803 15.3987 li
73.1485 15.3194 li
73.1485 15.2402 li
73.1485 15.1608 li
73.1644 15.0815 li
73.1962 15.0181 li
73.1326 15.034 li
73.0532 15.0815 li
72.9897 15.145 li
72.9261 15.2243 li
72.8626 15.3036 li
72.8149 15.3987 li
72.799 15.4938 li
72.7832 15.589 li
72.799 15.7634 li
72.8467 15.9379 li
72.9261 16.0965 li
73.0214 16.2233 li
73.1485 16.3344 li
73.2915 16.4136 li
73.4504 16.4453 li
73.641 16.4294 li
74.6418 16.1757 li
74.5941 15.8427 li
74.5941 15.5414 li
74.6418 15.256 li
74.7371 14.9864 li
74.8642 14.7644 li
75.0231 14.5582 li
75.309 14.3045 li
75.6585 14.1143 li
76.0557 14.0032 li
76.4687 13.9715 li
76.8182 14.0032 li
77.1518 14.0984 li
77.4854 14.2411 li
77.7873 14.4155 li
78.0573 14.6217 li
78.3115 14.812 li
78.518 15.0181 li
78.6927 15.1767 li
79.074 15.0657 li
79.4235 14.9706 li
79.8048 14.9071 li
80.0113 14.8912 li
80.2496 14.8912 li
80.4879 14.9071 li
80.7579 14.9706 li
81.0121 15.0657 li
81.2504 15.1767 li
81.4569 15.3036 li
81.6317 15.4304 li
81.6952 15.478 li
81.7587 15.5414 li
81.7905 15.589 li
81.8223 15.6366 li
81.8064 15.6841 li
81.7746 15.7318 li
81.727 15.7793 li
81.6634 15.8427 li
81.4887 15.9696 li
81.2822 16.0806 li
81.0439 16.1916 li
80.7579 16.3026 li
80.4561 16.366 li
80.1543 16.3978 li
79.773 16.366 li
79.4076 16.2867 li
79.0581 16.144 li
78.5657 15.8427 li
78.105 15.4463 li
77.2154 15.6841 li
77.2312 15.7318 li
77.2312 15.7952 li
77.2471 15.922 li
77.263 16.0806 li
77.2471 16.144 li
77.2471 16.2075 li
77.1995 16.3978 li
77.1359 16.5881 li
77.0247 16.7625 li
76.8976 16.9052 li
76.7388 17.032 li
76.5322 17.1272 li
76.3098 17.1906 li
76.0398 17.2065 li
cp
74.8642 16.2392 mo
74.9595 16.4294 li
75.0707 16.5722 li
75.2137 16.7149 li
75.3726 16.8101 li
75.5632 16.8893 li
75.7538 16.9211 li
75.9603 16.9369 li
76.1827 16.9052 li
76.2622 16.8735 li
76.3416 16.8418 li
76.4052 16.7783 li
76.4687 16.7149 li
76.5164 16.6356 li
76.564 16.5405 li
76.6276 16.3819 li
76.6435 16.2075 li
76.6593 16.0172 li
76.6276 15.811 li
cp
79.6936 15.0815 mo
79.36 15.1292 li
79.074 15.1926 li
78.7881 15.2719 li
78.931 15.3987 li
79.0899 15.5414 li
79.4553 15.8268 li
79.8524 16.0648 li
80.043 16.1282 li
80.2496 16.1599 li
80.5514 16.1282 li
80.885 16.0489 li
81.1551 15.9379 li
81.2186 15.8903 li
81.2504 15.8268 li
81.2822 15.7793 li
81.2663 15.7318 li
81.2345 15.6683 li
81.171 15.589 li
81.0598 15.478 li
80.9168 15.3511 li
80.742 15.2402 li
80.5355 15.145 li
80.329 15.0815 li
80.0907 15.0657 li
79.8683 15.0657 li
cp
76.0398 14.3204 mo
75.7856 14.368 li
75.5473 14.4631 li
75.3249 14.59 li
75.1343 14.7485 li
74.9595 14.9547 li
74.8483 15.2084 li
74.7848 15.4938 li
74.7848 15.5414 li
74.7848 15.6207 li
74.7848 15.7 li
74.7848 15.7952 li
74.8007 15.9855 li
74.8166 16.0648 li
74.8324 16.1282 li
76.6117 15.7 li
76.5481 15.5256 li
76.4687 15.3829 li
76.3734 15.2877 li
76.1669 15.1926 li
75.9445 15.1608 li
75.8491 15.1767 li
75.7697 15.1926 li
75.7062 15.2084 li
75.595 15.2402 li
75.4997 15.3036 li
75.4043 15.367 li
75.3249 15.4463 li
75.2455 15.5414 li
75.166 15.6366 li
75.1819 15.5731 li
75.2137 15.5097 li
75.2614 15.4304 li
75.3408 15.3353 li
75.452 15.2243 li
75.5791 15.1292 li
75.7379 15.0499 li
75.9127 14.9864 li
76.1192 14.9706 li
76.4687 14.9706 li
76.7546 15.0657 li
76.9135 15.1767 li
77.0565 15.3353 li
77.1677 15.5414 li
78.0096 15.3511 li
77.9779 15.3194 li
77.9143 15.2719 li
77.8667 15.2084 li
77.7555 15.1133 li
77.6284 15.0023 li
77.3424 14.7644 li
77.0088 14.5424 li
76.6435 14.368 li
76.4687 14.3204 li
76.294 14.3045 li
cp
f
76.6276 15.811 mo
74.8642 16.2391 li
74.9595 16.4294 li
75.0707 16.5721 li
75.2137 16.7149 li
75.3726 16.81 li
75.5632 16.8893 li
75.7538 16.921 li
75.9604 16.9369 li
76.1828 16.9052 li
76.2622 16.8734 li
76.3416 16.8417 li
76.4052 16.7783 li
76.4687 16.7149 li
76.5164 16.6356 li
76.564 16.5404 li
76.6276 16.3819 li
76.6434 16.2074 li
76.6593 16.0171 li
76.6276 15.811 li
cp
80.0907 15.0657 mo
79.8683 15.0657 li
79.6936 15.0815 li
79.36 15.1291 li
79.074 15.1925 li
78.7881 15.2718 li
78.931 15.3987 li
79.0899 15.5414 li
79.4553 15.8268 li
79.8524 16.0647 li
80.0431 16.1281 li
80.2496 16.1598 li
80.5514 16.1281 li
80.885 16.0488 li
81.1551 15.9378 li
81.2186 15.8903 li
81.2504 15.8268 li
81.2822 15.7793 li
81.2663 15.7317 li
81.2345 15.6683 li
81.171 15.589 li
81.0598 15.478 li
80.9168 15.3511 li
80.742 15.2401 li
80.5355 15.1449 li
80.329 15.0815 li
80.0907 15.0657 li
cp
76.294 14.3045 mo
76.0398 14.3203 li
75.7856 14.3679 li
75.5473 14.4631 li
75.3249 14.5899 li
75.1343 14.7485 li
74.9595 14.9547 li
74.8483 15.2084 li
74.7848 15.4938 li
74.7848 15.5414 li
74.7848 15.6207 li
74.7848 15.7 li
74.7848 15.7951 li
74.8007 15.9854 li
74.8166 16.0647 li
74.8324 16.1281 li
76.6117 15.7 li
76.5481 15.5255 li
76.4687 15.3828 li
76.3734 15.2877 li
76.1669 15.1925 li
75.9445 15.1608 li
75.8491 15.1767 li
75.7697 15.1925 li
75.7062 15.2084 li
75.595 15.2401 li
75.4997 15.3035 li
75.4043 15.367 li
75.3249 15.4462 li
75.2455 15.5414 li
75.166 15.6365 li
75.1819 15.5731 li
75.2137 15.5097 li
75.2614 15.4304 li
75.3408 15.3352 li
75.452 15.2242 li
75.5791 15.1291 li
75.7379 15.0498 li
75.9127 14.9864 li
76.1192 14.9705 li
76.4687 14.9705 li
76.7546 15.0657 li
76.9135 15.1767 li
77.0565 15.3352 li
77.1677 15.5414 li
78.0096 15.3511 li
77.9779 15.3194 li
77.9143 15.2718 li
77.8667 15.2084 li
77.7555 15.1132 li
77.6284 15.0022 li
77.3424 14.7644 li
77.0088 14.5423 li
76.6434 14.3679 li
76.4687 14.3203 li
76.294 14.3045 li
cp
76.4687 13.9715 mo
76.8182 14.0032 li
77.1518 14.0983 li
77.4854 14.2411 li
77.7872 14.4155 li
78.0573 14.6216 li
78.3115 14.8119 li
78.518 15.0181 li
78.6927 15.1767 li
79.074 15.0657 li
79.4235 14.9705 li
79.8048 14.9071 li
80.0113 14.8912 li
80.2496 14.8912 li
80.4879 14.9071 li
80.7579 14.9705 li
81.0121 15.0657 li
81.2504 15.1767 li
81.4569 15.3035 li
81.6317 15.4304 li
81.6952 15.478 li
81.7587 15.5414 li
81.7905 15.589 li
81.8223 15.6365 li
81.8064 15.6841 li
81.7746 15.7317 li
81.727 15.7793 li
81.6634 15.8427 li
81.4887 15.9696 li
81.2822 16.0806 li
81.0439 16.1916 li
80.7579 16.3026 li
80.4561 16.366 li
80.1543 16.3977 li
79.773 16.366 li
79.4076 16.2867 li
79.0581 16.144 li
78.5657 15.8427 li
78.105 15.4462 li
77.2153 15.6841 li
77.2312 15.7317 li
77.2312 15.7951 li
77.2471 15.922 li
77.263 16.0806 li
77.2471 16.144 li
77.2471 16.2074 li
77.1995 16.3977 li
77.1359 16.588 li
77.0247 16.7624 li
76.8976 16.9052 li
76.7388 17.032 li
76.5322 17.1272 li
76.3098 17.1906 li
76.0398 17.2065 li
75.8968 17.1906 li
75.7062 17.1589 li
75.3249 16.9845 li
75.1343 16.8734 li
74.9595 16.7149 li
74.8007 16.5246 li
74.6736 16.2867 li
73.6728 16.5404 li
73.4504 16.5721 li
73.2438 16.5246 li
73.0691 16.4294 li
72.9261 16.2867 li
72.8149 16.1281 li
72.7355 15.9378 li
72.6878 15.7475 li
72.6719 15.589 li
72.7196 15.256 li
72.7831 15.0974 li
72.8785 14.9547 li
73.0056 14.8278 li
73.1485 14.7168 li
73.3074 14.6534 li
73.498 14.6375 li
73.5933 14.6375 li
73.6887 14.6851 li
73.784 14.7326 li
73.8634 14.8119 li
73.9428 14.8912 li
74.0064 15.0022 li
74.0381 15.0815 li
74.054 15.1608 li
74.054 15.256 li
74.0064 15.4621 li
73.8952 15.6048 li
73.7363 15.7 li
73.5616 15.7317 li
73.498 15.7158 li
73.4345 15.7 li
73.3709 15.6524 li
73.3074 15.6048 li
73.2597 15.5414 li
73.2121 15.478 li
73.1803 15.3987 li
73.1485 15.3194 li
73.1485 15.2401 li
73.1485 15.1608 li
73.1644 15.0815 li
73.1962 15.0181 li
73.1326 15.0339 li
73.0532 15.0815 li
72.9897 15.1449 li
72.9261 15.2242 li
72.8626 15.3035 li
72.8149 15.3987 li
72.799 15.4938 li
72.7831 15.589 li
72.799 15.7634 li
72.8467 15.9378 li
72.9261 16.0964 li
73.0214 16.2233 li
73.1485 16.3343 li
73.2915 16.4136 li
73.4504 16.4453 li
73.641 16.4294 li
74.6418 16.1757 li
74.5942 15.8427 li
74.5942 15.5414 li
74.6418 15.256 li
74.7371 14.9864 li
74.8642 14.7644 li
75.0231 14.5582 li
75.309 14.3045 li
75.6585 14.1142 li
76.0557 14.0032 li
76.4687 13.9715 li
cp
gsave
[.015886 0 0 .0158578 76.6276 15.811 ]ct
@
grestore newpath
74.054 14.6693 mo
73.8634 14.6217 li
73.6728 14.5424 li
73.5139 14.4155 li
73.3868 14.2728 li
73.2915 14.146 li
73.2121 13.9874 li
73.1644 13.8288 li
73.1485 13.4799 li
73.1962 13.3214 li
73.2597 13.1628 li
73.3709 13.0201 li
73.5298 12.9091 li
73.5933 12.8773 li
73.641 12.8615 li
73.7204 12.8456 li
73.8157 12.8456 li
73.9269 12.8615 li
74.0381 12.9091 li
74.1493 12.9725 li
74.2129 13.0201 li
74.2606 13.0835 li
74.3241 13.1628 li
74.3876 13.3531 li
74.3559 13.5434 li
74.2606 13.702 li
74.1335 13.813 li
74.0699 13.8447 li
74.0064 13.8605 li
73.9269 13.8605 li
73.7999 13.8288 li
73.7045 13.7654 li
73.6251 13.7336 li
73.5774 13.6702 li
73.5139 13.6068 li
73.4821 13.5434 li
73.4662 13.4641 li
73.4662 13.3848 li
73.4186 13.4165 li
73.3868 13.4641 li
73.3709 13.5117 li
73.3392 13.6068 li
73.3233 13.702 li
73.3233 13.7971 li
73.3233 13.9081 li
73.355 14.0032 li
73.3868 14.0984 li
73.4821 14.2252 li
73.6092 14.3521 li
73.7522 14.4473 li
73.9111 14.5266 li
74.0699 14.5583 li
74.2288 14.5424 li
74.4035 14.4948 li
74.5465 14.3839 li
75.2931 13.6702 li
75.0072 13.2738 li
74.8325 12.8615 li
74.7689 12.465 li
74.8007 12.0686 li
74.9278 11.7197 li
75.1502 11.3708 li
75.4202 11.0854 li
75.7697 10.8475 li
76.0874 10.7048 li
76.4211 10.6097 li
76.7864 10.5779 li
77.1359 10.5779 li
77.4695 10.6097 li
77.7872 10.6572 li
78.0732 10.7207 li
78.2956 10.7682 li
78.5657 10.4987 li
78.8357 10.2449 li
79.1217 9.99121 li
79.5029 9.75336 li
79.7253 9.6582 li
79.9795 9.57892 li
80.2496 9.53137 li
80.5196 9.5155 li
80.7579 9.5155 li
80.9644 9.53137 li
81.1233 9.56305 li
81.2345 9.62646 li
81.2345 9.72162 li
81.2027 9.88025 li
81.1233 10.0705 li
80.9962 10.2767 li
80.8374 10.4987 li
80.6467 10.7207 li
80.4243 10.9268 li
80.1701 11.1013 li
79.8207 11.2757 li
79.4711 11.3867 li
79.1058 11.4343 li
78.518 11.4185 li
77.9143 11.3074 li
77.263 11.9576 li
77.2948 11.9893 li
77.3424 12.0369 li
77.4219 12.1479 li
77.5013 12.2748 li
77.5331 12.3382 li
77.5648 12.4016 li
77.6125 12.576 li
77.6443 12.7822 li
77.6443 12.9725 li
77.6125 13.1786 li
77.5331 13.3689 li
77.406 13.5434 li
77.2471 13.7178 li
77.0247 13.8605 li
76.8817 13.924 li
76.707 13.9874 li
76.5005 14.0191 li
76.2781 14.035 li
76.0557 14.0191 li
75.8174 13.9716 li
75.595 13.8922 li
75.3726 13.7495 li
74.6418 14.4631 li
74.4512 14.6058 li
74.2447 14.6693 li
cp
75.5155 13.6227 mo
75.6903 13.7336 li
75.865 13.7971 li
76.0557 13.8447 li
76.2463 13.8447 li
76.4369 13.8288 li
76.6276 13.7654 li
76.8182 13.6702 li
76.9929 13.5275 li
77.0406 13.4641 li
77.0883 13.4006 li
77.12 13.3055 li
77.1518 13.1786 li
77.1359 13.0201 li
77.1041 12.8615 li
77.0406 12.7029 li
76.8341 12.354 li
cp
76.1192 11.1013 mo
75.9445 11.1489 li
75.7856 11.2281 li
75.5791 11.3708 li
75.3885 11.5294 li
75.2137 11.7356 li
75.0866 11.9576 li
75.0072 12.1954 li
74.9595 12.4492 li
74.9754 12.7188 li
75.0707 13.0042 li
75.1025 13.0518 li
75.1343 13.1152 li
75.1819 13.1945 li
75.2296 13.2738 li
75.3408 13.4324 li
75.3885 13.4958 li
75.4361 13.5434 li
76.7546 12.2589 li
76.5481 12.1003 li
76.3416 12.0369 li
76.1192 12.0527 li
75.9127 12.1479 li
75.8015 12.2272 li
75.722 12.3065 li
75.6426 12.3857 li
75.595 12.4809 li
75.5473 12.5919 li
75.5155 12.7029 li
75.4838 12.8139 li
75.4679 12.9407 li
75.452 12.8773 li
75.452 12.798 li
75.452 12.7188 li
75.5155 12.4492 li
75.6744 12.1479 li
75.8015 12.0052 li
75.9604 11.8783 li
76.2622 11.7197 li
76.564 11.6563 li
76.7546 11.6563 li
76.9612 11.7356 li
77.1518 11.8624 li
77.7872 11.2757 li
77.7396 11.2598 li
77.676 11.244 li
77.5966 11.2281 li
77.2789 11.1489 li
76.9135 11.1013 li
76.5164 11.0695 li
cp
79.8842 9.83264 mo
79.6618 9.88025 li
79.4553 9.99121 li
79.2646 10.1022 li
79.1058 10.1974 li
78.8516 10.4035 li
78.7404 10.4987 li
78.6451 10.6097 li
78.5339 10.7048 li
78.4227 10.8159 li
78.6133 10.8475 li
78.8198 10.8951 li
79.2805 10.9744 li
79.7412 10.9744 li
79.9477 10.9427 li
80.1384 10.8634 li
80.3925 10.6731 li
80.5196 10.5621 li
80.6308 10.4511 li
80.7261 10.3242 li
80.8056 10.2132 li
80.8374 10.134 li
80.8532 10.0705 li
80.8374 10.0071 li
80.8056 9.97534 li
80.742 9.94366 li
80.6467 9.89606 li
80.5038 9.84851 li
80.3131 9.81677 li
80.1066 9.81677 li
cp
f
76.8341 12.354 mo
75.5155 13.6226 li
75.6903 13.7336 li
75.865 13.7971 li
76.0557 13.8446 li
76.2463 13.8446 li
76.4369 13.8288 li
76.6276 13.7653 li
76.8182 13.6702 li
76.9929 13.5275 li
77.0406 13.464 li
77.0883 13.4006 li
77.12 13.3055 li
77.1518 13.1786 li
77.1359 13.02 li
77.1041 12.8615 li
77.0406 12.7029 li
76.8341 12.354 li
cp
76.5164 11.0695 mo
76.1192 11.1012 li
75.9445 11.1488 li
75.7856 11.2281 li
75.5791 11.3708 li
75.3885 11.5294 li
75.2137 11.7355 li
75.0866 11.9576 li
75.0072 12.1954 li
74.9595 12.4492 li
74.9754 12.7187 li
75.0707 13.0042 li
75.1025 13.0517 li
75.1343 13.1152 li
75.1819 13.1945 li
75.2296 13.2738 li
75.3408 13.4323 li
75.3885 13.4958 li
75.4361 13.5433 li
76.7546 12.2589 li
76.5481 12.1003 li
76.3416 12.0368 li
76.1192 12.0527 li
75.9127 12.1479 li
75.8015 12.2271 li
75.7221 12.3064 li
75.6426 12.3857 li
75.595 12.4809 li
75.5473 12.5919 li
75.5155 12.7029 li
75.4838 12.8139 li
75.4679 12.9407 li
75.452 12.8773 li
75.452 12.798 li
75.452 12.7187 li
75.5155 12.4492 li
75.6744 12.1479 li
75.8015 12.0051 li
75.9604 11.8783 li
76.2622 11.7197 li
76.564 11.6563 li
76.7546 11.6563 li
76.9612 11.7355 li
77.1518 11.8624 li
77.7872 11.2757 li
77.7396 11.2598 li
77.676 11.244 li
77.5966 11.2281 li
77.2789 11.1488 li
76.9135 11.1012 li
76.5164 11.0695 li
cp
80.1066 9.81676 mo
79.8842 9.83261 li
79.6618 9.88019 li
79.4553 9.99119 li
79.2646 10.1022 li
79.1058 10.1973 li
78.8516 10.4035 li
78.7404 10.4986 li
78.6451 10.6096 li
78.5339 10.7048 li
78.4227 10.8158 li
78.6133 10.8475 li
78.8198 10.8951 li
79.2805 10.9744 li
79.7412 10.9744 li
79.9477 10.9427 li
80.1384 10.8634 li
80.3925 10.6731 li
80.5196 10.5621 li
80.6308 10.4511 li
80.7262 10.3242 li
80.8056 10.2132 li
80.8373 10.1339 li
80.8532 10.0705 li
80.8373 10.007 li
80.8056 9.97533 li
80.742 9.94362 li
80.6467 9.89604 li
80.5037 9.84847 li
80.3131 9.81676 li
80.1066 9.81676 li
cp
80.5196 9.51546 mo
80.7579 9.51546 li
80.9644 9.53131 li
81.1233 9.56303 li
81.2345 9.62646 li
81.2345 9.72161 li
81.2027 9.88019 li
81.1233 10.0705 li
80.9962 10.2766 li
80.8373 10.4986 li
80.6467 10.7206 li
80.4243 10.9268 li
80.1701 11.1012 li
79.8206 11.2757 li
79.4712 11.3867 li
79.1058 11.4343 li
78.518 11.4184 li
77.9143 11.3074 li
77.263 11.9576 li
77.2948 11.9893 li
77.3424 12.0368 li
77.4219 12.1479 li
77.5013 12.2747 li
77.5331 12.3381 li
77.5648 12.4016 li
77.6125 12.576 li
77.6443 12.7822 li
77.6443 12.9725 li
77.6125 13.1786 li
77.5331 13.3689 li
77.406 13.5433 li
77.2471 13.7178 li
77.0247 13.8605 li
76.8817 13.9239 li
76.707 13.9874 li
76.5005 14.0191 li
76.2781 14.0349 li
76.0557 14.0191 li
75.8174 13.9715 li
75.595 13.8922 li
75.3726 13.7495 li
74.6418 14.4631 li
74.4512 14.6058 li
74.2447 14.6692 li
74.054 14.6692 li
73.8634 14.6217 li
73.6728 14.5424 li
73.5139 14.4155 li
73.3868 14.2728 li
73.2915 14.1459 li
73.2121 13.9874 li
73.1644 13.8288 li
73.1485 13.4799 li
73.1962 13.3213 li
73.2597 13.1628 li
73.3709 13.02 li
73.5298 12.909 li
73.5933 12.8773 li
73.641 12.8615 li
73.7204 12.8456 li
73.8157 12.8456 li
73.9269 12.8615 li
74.0381 12.909 li
74.1493 12.9725 li
74.2129 13.02 li
74.2606 13.0835 li
74.3241 13.1628 li
74.3876 13.353 li
74.3559 13.5433 li
74.2606 13.7019 li
74.1335 13.8129 li
74.0699 13.8446 li
74.0064 13.8605 li
73.9269 13.8605 li
73.7999 13.8288 li
73.7045 13.7653 li
73.6251 13.7336 li
73.5775 13.6702 li
73.5139 13.6068 li
73.4821 13.5433 li
73.4662 13.464 li
73.4662 13.3848 li
73.4186 13.4165 li
73.3868 13.464 li
73.3709 13.5116 li
73.3392 13.6068 li
73.3233 13.7019 li
73.3233 13.7971 li
73.3233 13.9081 li
73.355 14.0032 li
73.3868 14.0984 li
73.4821 14.2252 li
73.6092 14.3521 li
73.7522 14.4472 li
73.9111 14.5265 li
74.0699 14.5582 li
74.2288 14.5424 li
74.4035 14.4948 li
74.5465 14.3838 li
75.2931 13.6702 li
75.0072 13.2738 li
74.8324 12.8615 li
74.7689 12.465 li
74.8007 12.0686 li
74.9278 11.7197 li
75.1502 11.3708 li
75.4202 11.0854 li
75.7697 10.8475 li
76.0874 10.7048 li
76.421 10.6096 li
76.7864 10.5779 li
77.1359 10.5779 li
77.4695 10.6096 li
77.7872 10.6572 li
78.0732 10.7206 li
78.2956 10.7682 li
78.5657 10.4986 li
78.8357 10.2449 li
79.1217 9.99119 li
79.5029 9.75332 li
79.7253 9.65818 li
79.9795 9.57889 li
80.2496 9.53131 li
80.5196 9.51546 li
cp
gsave
[.015886 0 0 .0158578 76.8341 12.354 ]ct
@
grestore newpath
73.4345 12.7029 mo
73.2438 12.6553 li
73.1009 12.5919 li
72.9579 12.4968 li
72.8308 12.3699 li
72.7355 12.243 li
72.6561 12.0844 li
72.6084 11.91 li
72.5925 11.7356 li
72.6084 11.5612 li
72.6878 11.3867 li
72.7355 11.3074 li
72.8149 11.244 li
72.9103 11.1964 li
73.0214 11.1647 li
73.1326 11.133 li
73.2597 11.133 li
73.3709 11.1647 li
73.498 11.2123 li
73.6569 11.355 li
73.7204 11.5294 li
73.7204 11.7197 li
73.6728 11.8783 li
73.6251 11.9417 li
73.5774 11.9734 li
73.498 12.021 li
73.3868 12.0527 li
73.2597 12.0527 li
73.1803 12.0527 li
73.1009 12.0369 li
73.0373 12.0052 li
72.9579 11.9576 li
72.9103 11.91 li
72.8626 11.8466 li
72.8467 11.8942 li
72.8467 11.9417 li
72.8467 12.0052 li
72.8785 12.1003 li
72.9103 12.1796 li
72.9579 12.2748 li
73.0056 12.354 li
73.085 12.4333 li
73.1644 12.4968 li
73.3233 12.5602 li
73.4821 12.6078 li
73.6569 12.6236 li
73.8316 12.5919 li
73.9746 12.5443 li
74.1176 12.465 li
74.2288 12.3382 li
74.3082 12.1638 li
74.5942 11.1805 li
74.2923 11.0537 li
74.0223 10.8951 li
73.7999 10.7048 li
73.5457 10.3877 li
73.3868 10.0388 li
73.3074 9.6582 li
73.3233 9.26178 li
73.4186 8.8653 li
73.5933 8.48474 li
73.784 8.19928 li
74.054 7.96143 li
74.34 7.75525 li
74.6418 7.58087 li
74.9436 7.43811 li
75.2455 7.32709 li
75.5314 7.23193 li
75.7538 7.16852 li
75.8491 6.80377 li
75.9445 6.43909 li
76.0715 6.07434 li
76.1669 5.88403 li
76.2781 5.69379 li
76.421 5.48761 li
76.6117 5.2973 li
77.0406 4.96429 li
77.2471 4.85327 li
77.4377 4.75818 li
77.5966 4.71057 li
77.7078 4.6947 li
77.7396 4.74231 li
77.7714 4.78986 li
77.7873 4.85327 li
77.8031 4.94843 li
77.8349 5.13873 li
77.8349 5.39246 li
77.819 5.66205 li
77.7555 5.94745 li
77.676 6.23291 li
77.5331 6.51837 li
77.3265 6.83551 li
77.0724 7.1051 li
76.7706 7.34296 li
76.4528 7.53326 li
76.0874 7.69183 li
75.6903 7.81873 li
75.452 8.70673 li
75.4997 8.7226 li
75.5473 8.73846 li
75.6903 8.78601 li
75.8174 8.8653 li
75.865 8.89703 li
75.9286 8.94458 li
76.0715 9.07147 li
76.1987 9.23004 li
76.294 9.40448 li
76.3575 9.59479 li
76.3893 9.8009 li
76.3734 10.0071 li
76.3098 10.2449 li
76.1828 10.4828 li
76.1033 10.6097 li
75.9762 10.7366 li
75.8174 10.8793 li
75.6426 10.9903 li
75.4361 11.1013 li
75.2137 11.1805 li
74.9754 11.2123 li
74.7212 11.1964 li
74.4353 12.1954 li
74.34 12.4016 li
74.197 12.5602 li
74.0223 12.6553 li
73.8316 12.7188 li
73.641 12.7346 li
cp
74.7689 11.022 mo
74.9595 11.022 li
75.166 11.0061 li
75.3408 10.9427 li
75.5155 10.8475 li
75.6744 10.7366 li
75.8015 10.5938 li
75.9127 10.4035 li
75.9921 10.2132 li
76.008 10.1181 li
76.008 10.0388 li
76.008 9.95953 li
75.9604 9.81677 li
75.8809 9.68994 li
75.8015 9.61066 li
75.7221 9.53137 li
75.6268 9.45209 li
75.4679 9.35687 li
75.2773 9.27765 li
cp
75.5155 7.86627 mo
75.4361 7.88214 li
75.3567 7.91388 li
75.0707 8.00897 li
74.7054 8.13586 li
74.3559 8.3103 li
74.0223 8.53229 li
73.8952 8.67505 li
73.7999 8.81775 li
73.6887 9.03973 li
73.6092 9.27765 li
73.5616 9.53137 li
73.5616 9.78503 li
73.6092 10.0388 li
73.7045 10.2925 li
73.8475 10.5145 li
74.0699 10.7048 li
74.1176 10.7366 li
74.1811 10.7682 li
74.2605 10.8159 li
74.34 10.8634 li
74.5147 10.9427 li
74.5942 10.9744 li
74.6577 10.9903 li
75.166 9.23004 li
74.9754 9.19836 li
74.8166 9.19836 li
74.6736 9.23004 li
74.5147 9.35687 li
74.3717 9.54718 li
74.3082 9.6582 li
74.2764 9.76923 li
74.2605 9.88025 li
74.2605 9.99121 li
74.2764 10.1022 li
74.3082 10.2132 li
74.34 10.3401 li
74.3876 10.4511 li
74.3241 10.3718 li
74.2605 10.2767 li
74.2129 10.1498 li
74.1811 10.0071 li
74.1652 9.84851 li
74.1652 9.67407 li
74.2129 9.48376 li
74.2764 9.29346 li
74.4671 8.99219 li
74.6895 8.78601 li
74.8642 8.70673 li
75.0707 8.65918 li
75.2931 8.67505 li
75.5632 7.8504 li
cp
77.3583 5.23389 mo
77.1995 5.26563 li
77.0247 5.34491 li
76.6593 5.56689 li
76.4846 5.72546 li
76.3575 5.91577 li
76.2463 6.09021 li
76.1669 6.26465 li
76.0398 6.56592 li
75.9604 6.85138 li
75.8809 7.13684 li
76.0557 7.07336 li
76.2622 7.00995 li
76.707 6.85138 li
76.9135 6.74036 li
77.1041 6.61353 li
77.263 6.48663 li
77.3742 6.32806 li
77.5172 6.04266 li
77.6125 5.70959 li
77.6284 5.56689 li
77.6443 5.42419 li
77.6284 5.34491 li
77.5966 5.28143 li
77.5648 5.23389 li
77.5172 5.21802 li
77.4377 5.21802 li
cp
f
75.2773 9.27759 mo
74.7689 11.0219 li
74.9595 11.0219 li
75.166 11.0061 li
75.3408 10.9427 li
75.5155 10.8475 li
75.6744 10.7365 li
75.8015 10.5938 li
75.9127 10.4035 li
75.9921 10.2132 li
76.008 10.1181 li
76.008 10.0388 li
76.008 9.95947 li
75.9604 9.81675 li
75.8809 9.68989 li
75.8015 9.6106 li
75.7221 9.53131 li
75.6267 9.45202 li
75.4679 9.35688 li
75.2773 9.27759 li
cp
75.5632 7.85039 mo
75.5155 7.86624 li
75.4361 7.8821 li
75.3567 7.91382 li
75.0707 8.00896 li
74.7054 8.13583 li
74.3559 8.31026 li
74.0223 8.53227 li
73.8952 8.67499 li
73.7999 8.81771 li
73.6887 9.03972 li
73.6092 9.27759 li
73.5616 9.53131 li
73.5616 9.78504 li
73.6092 10.0388 li
73.7045 10.2925 li
73.8475 10.5145 li
74.0699 10.7048 li
74.1176 10.7365 li
74.1811 10.7682 li
74.2605 10.8158 li
74.34 10.8634 li
74.5147 10.9427 li
74.5941 10.9744 li
74.6577 10.9902 li
75.166 9.23001 li
74.9754 9.1983 li
74.8166 9.1983 li
74.6736 9.23001 li
74.5147 9.35688 li
74.3717 9.54717 li
74.3082 9.65817 li
74.2764 9.76918 li
74.2605 9.88018 li
74.2605 9.99119 li
74.2764 10.1022 li
74.3082 10.2132 li
74.34 10.3401 li
74.3876 10.4511 li
74.3241 10.3718 li
74.2605 10.2766 li
74.2129 10.1498 li
74.1811 10.007 li
74.1652 9.84847 li
74.1652 9.67403 li
74.2129 9.48374 li
74.2764 9.29345 li
74.4671 8.99215 li
74.6895 8.786 li
74.8642 8.70671 li
75.0707 8.65913 li
75.2931 8.67499 li
75.5632 7.85039 li
cp
77.4377 5.21799 mo
77.3583 5.23385 li
77.1995 5.26556 li
77.0247 5.34485 li
76.6593 5.56686 li
76.4846 5.72544 li
76.3575 5.91573 li
76.2463 6.09017 li
76.1669 6.26461 li
76.0398 6.5659 li
75.9604 6.85134 li
75.8809 7.13678 li
76.0557 7.07335 li
76.2622 7.00992 li
76.707 6.85134 li
76.9135 6.74034 li
77.1041 6.61348 li
77.263 6.48661 li
77.3742 6.32804 li
77.5172 6.0426 li
77.6125 5.70958 li
77.6284 5.56686 li
77.6443 5.42414 li
77.6284 5.34485 li
77.5966 5.28142 li
77.5648 5.23385 li
77.5172 5.21799 li
77.4377 5.21799 li
cp
77.7078 4.69468 mo
77.7396 4.74226 li
77.7713 4.78983 li
77.7872 4.85326 li
77.8031 4.94841 li
77.8349 5.1387 li
77.8349 5.39243 li
77.819 5.66201 li
77.7555 5.94745 li
77.676 6.23289 li
77.5331 6.51833 li
77.3265 6.83549 li
77.0724 7.10507 li
76.7705 7.34294 li
76.4528 7.53323 li
76.0874 7.69181 li
75.6903 7.81867 li
75.452 8.70671 li
75.4996 8.72256 li
75.5473 8.73842 li
75.6903 8.786 li
75.8174 8.86528 li
75.865 8.897 li
75.9286 8.94457 li
76.0715 9.07144 li
76.1986 9.23001 li
76.294 9.40445 li
76.3575 9.59474 li
76.3893 9.80089 li
76.3734 10.007 li
76.3098 10.2449 li
76.1827 10.4828 li
76.1033 10.6096 li
75.9762 10.7365 li
75.8174 10.8792 li
75.6426 10.9902 li
75.4361 11.1012 li
75.2137 11.1805 li
74.9754 11.2122 li
74.7212 11.1964 li
74.4353 12.1954 li
74.34 12.4016 li
74.197 12.5602 li
74.0223 12.6553 li
73.8316 12.7187 li
73.641 12.7346 li
73.4345 12.7029 li
73.2438 12.6553 li
73.1009 12.5919 li
72.9579 12.4967 li
72.8308 12.3699 li
72.7355 12.243 li
72.6561 12.0844 li
72.6084 11.91 li
72.5925 11.7355 li
72.6084 11.5611 li
72.6878 11.3867 li
72.7355 11.3074 li
72.8149 11.244 li
72.9102 11.1964 li
73.0214 11.1647 li
73.1326 11.1329 li
73.2597 11.1329 li
73.3709 11.1647 li
73.498 11.2122 li
73.6569 11.355 li
73.7204 11.5294 li
73.7204 11.7197 li
73.6728 11.8783 li
73.6251 11.9417 li
73.5774 11.9734 li
73.498 12.021 li
73.3868 12.0527 li
73.2597 12.0527 li
73.1803 12.0527 li
73.1009 12.0368 li
73.0373 12.0051 li
72.9579 11.9576 li
72.9102 11.91 li
72.8626 11.8466 li
72.8467 11.8941 li
72.8467 11.9417 li
72.8467 12.0051 li
72.8785 12.1003 li
72.9102 12.1796 li
72.9579 12.2747 li
73.0056 12.354 li
73.085 12.4333 li
73.1644 12.4967 li
73.3233 12.5602 li
73.4821 12.6077 li
73.6569 12.6236 li
73.8316 12.5919 li
73.9746 12.5443 li
74.1176 12.465 li
74.2288 12.3381 li
74.3082 12.1637 li
74.5941 11.1805 li
74.2923 11.0537 li
74.0223 10.8951 li
73.7999 10.7048 li
73.5457 10.3876 li
73.3868 10.0388 li
73.3074 9.65817 li
73.3233 9.26173 li
73.4186 8.86528 li
73.5933 8.4847 li
73.784 8.19926 li
74.054 7.96139 li
74.34 7.75524 li
74.6418 7.5808 li
74.9436 7.43808 li
75.2455 7.32708 li
75.5314 7.23193 li
75.7538 7.1685 li
75.8491 6.80377 li
75.9445 6.43904 li
76.0715 6.07431 li
76.1669 5.88402 li
76.2781 5.69372 li
76.421 5.48757 li
76.6117 5.29728 li
77.0406 4.96427 li
77.2471 4.85326 li
77.4377 4.75811 li
77.5966 4.71054 li
77.7078 4.69468 li
cp
gsave
[.015886 0 0 .0158578 75.2773 9.27759 ]ct
@
grestore newpath
83.6 23.478 mo
543.55 23.478 li
543.55 6.62799 li
83.6 6.62799 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
.75 lw
1 lc
8 ml
83.6 23.478 mo
543.55 23.478 li
543.55 6.62799 li
83.6 6.62799 li
cp
@
gsave
84 19.4579 mo
543.121 19.4579 li
543.121 10.5779 li
84 10.5779 li
cp
clp
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: PBAAAA+TrajanPro-Bold AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
EKRDSP+TrajanPro-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B6317D0811AE1C7F2F18D1D1275A5EF29106F56D0F58C32FDD
3AAB3ACEC5EFCD5FD566FD5326A4460B77C20A11191084FE32D9425DD47D451D
CC3A2FE034B2460CA70FB18639A85198CA92FB2830087327C6C9179023364751
80DF3889C6AC5CFC4DF9F429CCE39CA6B807A29AFC0E5CC5789F9C4727070D42
011D0E4B50789FF7CD782D3B0D46768AA18EC9C262D102C936ACBA0ADFD7DB36
08061515EC0C2132799572D6C674C84A28B1F9B5274E9D21BE75DBE56E0E4FE3
4B7969214451E3178D33DABF18487CE14421FD7C20A9D1471005AF5B70337C2F
DBD49EC21FA93B7C36552EBD1F259707A7799526EA54B84984F2F69128DA6E0C
EB899024A33E4B060B3C838918562FC587CE41526E09818F9B7A93B8C880CB85
C5ECBB9668D818F759BC8ABA9CFCECABB6083BF61E6EDB6C1B4E962E6C672380
F899A8> |-
/C <1C60D8A8C9B6D5A0DEDEC57B918D61DDFA401F5A49FEA3B89C6864173301
6BDC674395116B42D2387AF24DF2F1DC60C61A5B6585CC0DA86F050A110B506B
B65171C092F0636620BAA275DBDEA04B3E655EC58BDFB8B9B535650BF4DE0E82
1C2ADFD8C9F649E0C395722C228833505318AA21D61F3D55D035246FCF9BC983
692D83F8C9AF492468B91F4CB872C7D1953185BF38A8E7A5B72C7F51E36572D3
718D9C26EEF5DDFAB02F3E79248875F4CA6CC06F7C289C017B388B2CFE4B85A5
1B0090> |-
/D <1C60D8A8C9B5AEADD56FC75D6C909A91873A888DB785DB3FB72A37A42D91
684772622256ABD5268EF0D40FEA1020F6154CAD99CD24A56056CFB7F7D0D857
80F9411E954FB1E826D4391A721AF9077D5FE002AC5CF8129A239A8A051977B0
DE3B3D776459F36F3435258B91D5FCF3CFF859F80391A9FFDB52D4EE1BAA2257
C611B81C5753E6C05E5872B8A6383A15CC4BA04EA40833574734AF4AFFD522E1
F41628731081706594DA73CECEA7FAE2F58F0A28EB9C366608CB43DD4DFA8D7F
5B52B921CDB60F50B20C6D6AB72E3525E683A96530452E99332069C6433FF784
5138579149649DCD1DE2EAE2221A24718E92663920FAA74AFDF5D7695DA9FBC1
5D667AF5CB7B693482F31C3CC4B0E5AD16F6FF87DC01E9248248309DE0F84324
E8DF6BDF53FD481C86AE2D15E7690A15C21ABE554C371AE04F2D8B2886B2EFFC
CB6921BFC8D7F2D41E596D5A91F4DD4B42A2A7C7A0D716479A14ABF010FD7696
08B1AD88F4546AB51F03A4901BC955D846B0B6> |-
/E <1C60D8A8C9B66DDCCE7D8394809968921D769606B41E2425FC9AA1AAC787
FA420E591A30C48CC2916CB9CFA8C97B2DB0202681B13DDBB4D6E5ADAE76F3DB
A0308E9FC54828BBCBA5B48C4CBF3B33650C5FD998497F9694C268923440EA7E
726CE9A605F5BBBC1AFCEB52C6FB49E3930C0096970514B0E830661FB3C29415
EF8A648A8E893273C6091799994997ADF677B517C73ED01CDF6D463F285B3DED
66E8D72854B6700238D3CDD89DA407A1BF2A5A31825568435261DA2F30DAA55C
073368C6BDD587FE90846C39D3E9B012AB3E1A662A8BFEB9DBD6B38E6D3A410D
2857A76E4311F35675A49D61ABD81D416EFFC1A17347CBD1AED991AD4E5BFBFB
5C39F57087E5555A1C16FE737D4735B9A0151AD4D9281ED278E327683D2AF3FA
1AA88D2ED87531AD3F62BB8D5861C91A68CD95C3B19997B26F511715C2343454
B010EED6437008059084679DE8FF33FA83088286A4DF20C6184917D7614BDA4D
FE2D49EB865444AC2B2E02F670FE8D628EC84AA64145A5D8E4412E0DBE2B053C
5372C5A21BB519EC247A39302086C7D84AFB337A9DD83F7F71721D0AFC15DEE5
61112515E6D3C15D92285B0DB6DD76135F9D9C74A5D064B40D4D3512CCE80FE4
82F6034DA7F6C2E7B12389D739DE3B23E896AA6F05E4E36EDC52E7A2173E948D
B27DAC76332BEFA69C206B3E185B6E8612A7C24AC7AD18758C7C1818A8A23934
F20CFA24DCEF596615EC1BAA205CE36852DF465F5DEA8BEDCB8148B9CD477F62
398C99A3B5BC41933CEC3EF1309DCD2F> |-
/F <1C60D8A8C9B663CCD41149D49BA136FE750E6C5CAB5F3C1356BBC1057DB6
70A47A13881EFA217974DC37FF782A8B9C2E7C6555EE68C42C7743A1EE6DD38E
157443E3A3FCD0EF2184552D04AD02E019895D32897F1B260111BCDA2AB068BF
5C7162511474BC169A47560DEE1D5BB3F379AC86F8AA8639D7496D0A3560C08A
C59C5218C620E33F743CB3F1BFA50E805DFA38320B4AB5149D098A38CDB12D83
339AEE8C4AFEF5C7F8577BCA6FF99101BFD638B929BA1674429DCEAB2595CBF2
83CADDDCB608FC530AAB4D32FC62405AB368358A8E69105442D37EB6CB9D38CF
BFF018A7574547BB8067BDC0CFAEDC17E65F4F7F8EF176C2B3C73F0812F3D289
6B30F8FFA0E0BAE937475E0F357E9C75823EE43257902F053D3DD052C548350A
2B41BD013EFFCF32EC8A148C4008D82F6C37B426EDDDFAB39A78B53F65DCAD01
1758A8C75F29CB32DE40B37C108FDED9727BDF606BD1F5E87277363362D7438E
F992679D631DD0962FD9272E83343CBB4E906DDC6087CA996335E23CC2FA4D95
9127C2B32BCE824B3F20236D3B84D85350EDF32870039304CC86C0831E5C52DB
ADBFE79FE110F306D7AB38BC2E568CBCB57B4700080BEF95F6> |-
/H <1C60D8A8C9B5F2782C4892C8276DD48807AB86E9EA800E2E5F4A6EC5B0D4
AFF926D214B5E8B826B81A449E1E2C384EB3928961505BDAB362A7BA1673AAF9
08747EF287D2333E52E4095918209B22F2384A0BB5B15A068E1F1600968619C8
AD3BF20BEFE2C37D8809C9197E97289B8DCDAE69C781C1620C92582322F382E2
5C53F9370F5FBD6FE74016D82D96376C94ABA00833F3B81D384908360F4B5208
00F53CEE81B525846C47C52172D67D817B2564859075A91D94B998E9D5EF6710
F5B248DC98CE8BCBBD855D522B17F0E9EC7634FCCD5206C5A892B746EF30F1B7
82723A816547EAE467235C1F3F025414CB3369873A1CFFDEE0C99FE70E877380
86E8E2D6D2C5C5B8BD2ABE7F9540E4C2327AD59A2814466905F7BE5AAC96FDAE
3D9AE0B5A8D2B5AC02C0C42BE0193F5D83496D5455A8D4943FF8A18890C116B9
A241B1155422E5B3EDEAF9BA01B6350FC02202FABEF2AB07C73514946009C264
887C63EC30A879631229544B3929A8806A32D8B669F098AAB9B31F371AE6918B
D97B99B04DC029A1514436B39C86CFEA41A0EF059D83750781D3AA6C23EB7A0C
9FC8A457F00A06551E566DF36D855139D173B5DF6889ACD3B418FFA4DD2BE2A1
F35E5A497EF7CD61D56CA41D22B4F469D28511271C92EE53C40D31E01BFE972C
D6158432> |-
/I <1C60D8A8C9B77771C05B04C6A1CDBDED73825D1016AD1A9F739BE3AE28A3
2F89A16FA0ADB365C478020BF11BB9ADC332932373DC2832A2FD54E961E2B084
4B0EB81447C317CA2A36F9297140F653C6CF38B651D9BF313FA9254650245A3A
6E604D8E9EFFEAAF12423E3B4CFD19A9AFAFF5FC58BD3FF4189B6F8AF938C510
BD91FB49103F7E5C2AE8440096A8B2CFB59E1B448BD934D6C96663C7ECAD3789
1B4FEEBF9172B6A7CCC0965D9AA12297E39BBF30EB7B8F6243DD70D9185FBD81
8CFC74B60F41E69C4533165A53D5C2FC5A9B44BA5F12F31CB79A71FA4F70F551
E84E63E5837361F7B7736F91> |-
/M <1C60D8A8C9B53502F718845662BEF962BDAAA7644DE772943B9A027E841B
2BB84E55828D36F776CA08F56941B74FE6EB2F42BA305EC107CA50E5CBFF0908
A99F6A15A27638A439DC862613C210F1C5A6389ECB21D3B5FD05D665E1729844
18B42AD449627BDF06AD350AFF71D974198324A903A4264DD8E0104AF41B05ED
4C26D6336B5725E33AD48E31BA08AF7E6B2D772D96CFD91E76A5FA6A187546D5
295667873BBA31D58CE08F48122CF5E77C781E2C8869C9D467E5383489E9F53D
EF78EC36EF23CAF18C7A0287ED7542FADAAE5FB2F88C0BAF43E2F8BFD8AF71BF
C13A799D15983F79C0E7C5CB516BB1140A8FB897F19DD9B0028ED1E4334F1FEF
0ED9448B3C6C212FF5E442EB3458512F12EF943753F7226C22661FB9CBDFB338
15B342DFB4948FF84CE6DC0D> |-
/N <1C60D8A8C9B5D51E1C59E72C182610E44C54205AC7B36B907A5E44739794
B728F1167D2F9F84697EE50B313BC2B81989A775A0D36B2DD0AF2B69011CCE7C
77BADB33CA75C553800B4095B76B6760838B6973158FFD7CD78D230CA0A0D966
EED590CA7F6F6584E7910A6453C58E1D66782E1FACADB08D602963368511C92C
5F81F4DFC14427881E816F76DC1CB015DE8AF778CDC4C950BF7AE4147406B0E8
8CB92BC0BD3DE72028C488D0B82BB4131CF90412A2E23017C4C19922E7456EEF
B5CA409A6AD2AEB4907650381DD8F7C9B779AB712C514BD38834F6DDD846B906
87B1686C03BA04A1888004FFC398DB5DD8187A3A30E57838144E84912F510837
7AF1E689097D437715DFC1129B8AE0EFB38D2208D7DADF960682D1D058CA2337
7D95FEF59C76B35C1A16C2AE4BAB4DD4475366CF2B0A8F424FD2524CE43BF0D1
CAFD421CE2E35B1184FD2664> |-
/O <1C60D8A8C9B5A1283DA9DE0820D5D7AD9508AE2FC2FBE8E1816E90EB7702
EF0D16B049CDD6C1C2364D8EA3AA8B27853DED879C920AAF7CC61E500241716A
1A9BAB4BDC9EA7D7A980F64B04B3930F57B7E52C4F122A8079E820A496F8DCDA
B9AB912F6B6EBF19BD> |-
/R <1C60D8A8C9B6E66E1C110949D9635A10AF5FEF6C72C5938FA84EF1AEDFFB
407976F30ADF68A57DB0B94AB8675CF7AE74874EC6292DC9812412E1FC9EFD2C
A497CC66F198D69ED9D8384329B99E2F409BD24743CDD3905DD1FF1EA38B61C6
86EF21DAC425FF21113953C4B86F5298189607D4AAC01AD9B61F73D45CA159EF
E3D31B320A160110A27649FB2A01ECF734A0F2BADD12430D61C1C1CF4049F08B
1E505A60A3B28A58635B6793262592DE77757F39178F581CED390557538490CE
84C33F343F9474604FEE43920E37E53E0A59ACB09F358DC4FEEC068C331BAAB7
8704D6941546BB5C2106C9D1D3E7D9A0AD172EEE2272591203EDF72CFCFA82D2
11B6BC753EA2D4F150363DF5EF851AE9D4E61369CB4DEC1309CAE4514EF231A5
D96F1E5767B50550C511F59291FC8AE5FED28A6C3E420A4919255C47EB24B551
753F9BADAFBE0DE28259695CABCFD7DC9D551DAB17FB97A4B7B3A27E1D94CE4D
7874CDC781F3C172327BDB88B077168FC806434083E959858797A6511E> |-
/S <1C60D8A8C9B7F51B95A0DFD92CF0B9552EA2D8DB80CD668D35E3A70F4576
D4238E8EEA2F046EF8BC16C7785D1607E04A62100A5AFF084F37B544AFC2004C
0BC4AE1356D2B0EC8700AB99117F620401AEDDDFA69D53F0F4E5314303A9C779
D85053ADE7DEA169C445735EBAC333F65F31A077498B479248885315A58C9DAE
7AD6ABA3F9562E1A36EA3EA3274E191D557F04A6CB9FA3B240660C95B31FD1EC
ACE3874E2F240022DE09CA2256274ED580EE94FBAA5793BD5F9D37682BE7C541
ACC5EE4D95FB35149493D2CCA9BEA729ABD0DCEC9C95E902EA9DD124CA919CBA
F3364C7699DDBE268B46D54393CC359D98EA67700B83CEF348489F1F90A16D> |-
/T <1C60D8A8C9B63B8DE7FFDDFD883E00670DE251215EBB652F92C831349498
B5CB6464515FBA79D194EDD0173A6C8452FF30D4FACCDC487E293D0AE52CC508
9FD0C892B13B9C208948940284065F12C5A8712886ADF51BA9E9DADC8B152D5B
98851A067D0E8EBC653C7D05F0905F75DDB91A899BBE63405604DB7DADC038C0
DD7CAA0A4D643A98807A638FB89F3892969AEE0E23509F6ADD741C90360A0E63
F30043B7613195030D645A1577556FC32C20897861C8C7DDDC2E4FD6517ED767
90A769FA4BD0A6317CD61B743F5AD886897629FA9E1A3F713E9B48F61E935464
F42BAEA06B9FD6B9CD604F5764BEB7F3DE80BC4BE9ABF739FD4668F79B682BAC
816052E85AFA85558707ECA42D91007F00F9DB1A11B458AB1C18F2B963EC9525
B2A4FC9E7AEAC73BB38032EC2CA3B162BDD169379DF78BFE129D3EF25F62EC78
17FF5129> |-
/U <1C60D8A8C9B68968DFDD8E740AEA257F606DE674D1A7490A290838625734
D6888A39F7E17ABBC22B16D3B924987D35CB9E114F5F83DC17DF991715591C7F
2C4C09271B612FA2F9B6AE74DC1DF2E969140F28154F556B3D74119D20843F36
72A3975A7E1616F60C7069F4C2AC0C2678D90E02E622F4B89A27AB7E4407EEC7
24F9890E7B736356D84F1048FB8CB32BCF87D20B0A238B16DE896D5F43370370
38BEEA1EF471525F00F9071B3FBE55F7894691EB268FC18DE533BFE5AFE626F3
1D506DCF1865C4B4AE24F66BEBD0BB7F2B6937953D5096BE0412C7C37DC78855
D0A5F622C6FAC9908372B446B3B6FC7D6EED1FA379EC7005F087BE083197051D
8866304B6CC9870CE00B190FE71BFD34DB949D71AB520645F7386FEB41613F82
CA39D8212E7619194B43E37088B6B2C8DB41DC79> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EKRDSP+TrajanPro-Bold /Encoding get
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
pop
%ADOEndSubsetFont
/EKRDSP+TrajanPro-Bold*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A /.notdef /C /D /E 
/F /.notdef /H /I 3{/.notdef}rp /M /N /O 
2{/.notdef}rp /R /S /T /U 170{/.notdef}rp]
EKRDSP+TrajanPro-Bold nf
EKRDSP+TrajanPro-Bold*1 [6.96 0 0 -6.96 0 0 ]msf
91.2 17.418 mo
(DANISH CENTRE FOR MUSIC )
[6.47979 4.92001 6.60021 3.12014 4.19967 6.72057 2.15762 5.5193 4.44051 6.59952 4.92007 5.28058 
4.55952 2.0407 4.32004 6.47977 5.4003 2.15762 7.2001 5.88124 4.20036 3.11945 5.6404 0 
]xsh
grestore
gsave
84 19.4579 mo
543.121 19.4579 li
543.121 10.5779 li
84 10.5779 li
cp
clp
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: PBAAAA+TrajanPro-Bold AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
EKRDSP+TrajanPro-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/G <1C60D8A8C9B598EEFB2DF9C06FA9B4910048381BBCF85C9D0FA613A4A888
2D5664515F8BE2D4256397688ADC45E558A834803ECBE69E34082BC4293CBE95
9CF57E685F9598A647E37072B80812FC1B71A034F0ABD82BA80DC776F2D1D99D
52D73FA1ED2076DE4119315835775A4FB82F5716DF24A634A206E7C9DB67E4B3
098E2BF87D34D5215E1C637A7C79E74566C1293DB50FF14D72A4959225419F91
70494483AA131CF51306A50F4B45FD30B7B0AACCEE82DEFDE465EA3C71CE9EAB
92E7D86C3BBC90A59942CAF47BF9DF29F71A382F063B4FF5316D705B723018CD
FD1A7D3711ADD4667E0B151306EA12CCE9BF8237E0C8C181FFD3D6056FFB5F24
523E96A716D50C9574F7B900B9B40B74D596> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EKRDSP+TrajanPro-Bold /Encoding get
dup 71 /G put
pop
%ADOEndSubsetFont
/EKRDSP+TrajanPro-Bold*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A /.notdef /C /D /E 
/F /G /H /I 3{/.notdef}rp /M /N /O 
2{/.notdef}rp /R /S /T /U 170{/.notdef}rp]
EKRDSP+TrajanPro-Bold nf
EKRDSP+TrajanPro-Bold*1 [6.96 0 0 -6.96 0 0 ]msf
205.2 17.418 mo
(EDITING)
[4.56021 6.4798 3.11806 5.03978 3.11806 6.71991 0 ]xsh
grestore
gsave
84 19.4579 mo
543.121 19.4579 li
543.121 10.5779 li
84 10.5779 li
cp
clp
.75021 .679683 .670222 .90164 cmyk
EKRDSP+TrajanPro-Bold*1 [6.96 0 0 -6.96 0 0 ]msf
240.36 17.418 mo
(  )
[2.15762 0 ]xsh
grestore
gsave
84 19.4579 mo
543.121 19.4579 li
543.121 10.5779 li
84 10.5779 li
cp
clp
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: PBAAAA+TrajanPro-Bold AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
EKRDSP+TrajanPro-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8707CA086404C32529388F9BE4A5D847A7AE80F65BB4
8760A2E47C9046ADEC4410EE1F3> |-
/slash <1C60D8A8C9B79D2D28CD57DD7AE9E4631B32449A5C091A56909C58DA
3B0C1B22C2EA70E1EFF350E969533DEFF795FC8496B255E95E81A1E78FF1AE98
91C8> |-
/B <1C60D8A8C9B636759898FA4FC9BEB5C0648EBBD1B379DD2E77C89D3C27FF
7208803E7251ADCC2C115098E70A5AA046A9691CC9FB1C0DEBEDEFE223091E21
07DF0436B0FCA8660F83C0B310104B7403071064D1DC8E97F19113D4428F8EE2
10E5475985E1E0DC688052684025BE6E0840027687F8983D980EB6A1BD594A10
8C26CD8353AB896954234A3A314900E7009C6A25E736A2946591B827437C3C65
DA8584448F6B839C0E78D069DC66CA88E980A7879D740C077A6CAC7FDFF10F64
C0D4D290DAD095CFFDCBF6DB0D189BEB940C4A6897356471CD2A770832EBA861
D9E6F1A0DA439920595816E05C96F3789831AC6D384CDD7DB8B1762EC1DD618A
61DF17DA0BAFBA914461BB8A9BF9FDFEA0596C4084429DDD401E0405CC6F4D07
F800CA01E99FF60B79C2CBB658A43C4FDA679C07828D18679BFEDD131B8D4717
67850D11AB4291C774DBBE8880C77D92E7BFABE9A879B51410A1069C9A7BAEFE
D6EEB670A4E6DF6A309794FA86848434BC67AD85A1799B6CFE5843720E273815
0DBCBAE37EA2F32E4EB13E2E7D3AD941385386404D093563C041F9036AD65902
4A1B4408F674BF011D93A75AA5BE0643CB4CF1C9F202FA57EA51E90B35C8F5DB
B9ACD24F2C147C43F844D25D25D9> |-
/K <1C60D8A8C9B6F5769BCBF4C62781455424E738956E373024C7557BCBFCB4
63493EF4D372DFC6EA839BA7755F5B462DAB7331774ADD9117B19C9CAAF7089C
146C2A6D990DD33A9F27EF225557A22353143AC1E9FC199B693AA3ACDD50674C
9C648D18759AADF35228A0968F4CABA62A9AFC924E63E775F31A7432E918A205
99AD6A72FFD808C687C646E8D36401A8C28FB07AB812ECB204C7ED70623A1EE2
8D124843C16E5D2DF344145D6CD10C48355C5336FFDB2F10FFED3C6E5282C6D0
5D2C9F7617683DD6A68C8FAC041C2F0A0C13CA8B3E7DA782DBF878CC063CC519
FE717EADC03355D6476171D68A1EF0F12320B20F43C66BDE5E22A40B706BE95A
89D0363CB1A7B034D054B0EC5EB74646DD1A44F58BC449290AF44C94C2D6D459
776FCF1B8F6CBB7DAD031DC2F662BB1F9A05C2638B958765983743902843DEAD
827ADEF0FE464675C9C760BF314632C3E3910381E0F671F3E8484656766BC5C6
DA2DA58E712399947141ED746F0F0D56CB054FC6934B5CF436882CD5769ECAE1
A7D92E4B26203D3D9628529C8BD17840D3E52D85E8CD39DA12C270F58736D3> |-
/L <1C60D8A8C9B7DE87A3D60DB46F877AC592315853214301CF0A8A7B2D8507
D35A345A806439D0648239CAD749A7CECAC4C52EFDCBB57BB4FE0E911C4AA9A4
A83E1E0502F4DE56DBFD89B6C34960529A8E27B67471F64270E286846BBA1412
BDB5AF89A2BE5E199B33599DCF71FCCD0A9705784F3FD9F75E64FF8D431F59A9
B1A0BF9383D4891B9878B499D8B945B17931BF2E08E6B9E55D6B44259C08979B
72AC1EEAE797529533974CF231EED1156130698D0A93422D89C597FA8FCD71A2
A98F77385EF8CB0EC9E1650C34FF32EC7E13E278F5105877AE28F112FC8D869B
102AA597F652C24D9A771640C30F6B21390B6332E153D3D8A8406E6E9C41FF18
9BE76308BC1A67D933F3D6AE936076B747E33EBA966802CEA2A67EFDD8201B9D
02C30490099DB72859538D7AFD9109512D> |-
/P <1C60D8A8C9B64228BF42DA83AC0EDC62ACE8BFF3C3A98A2269D17DC298E7
184EE1A97CAD8C5AB28966A959CA9A94E51B9AB02E7BB583D2B5CAE7D55C74BF
BA2D904CE684CC8798D6A0D7C4BCF92CDABF939DE2E985C3A5F5072FCBB3B7CC
0BBCAEC8BC9220860A5E601087D7BF5AA8009B78C1734AF5EFADBFE5A30517BD
7B9685F30EC68BE94A39E9A6643E3D4A3A436FF1ADEE79C9EBAB796474870600
7C33AE8DDA4B1081F93E361EF82C605BD384A0EC07E111416F2723D9AFBC98F5
05F5579F6C52E3E8BBFC8DE2F10D91BA92F51B86C8FEFCECF4F82C8CD1CEBBF2
A974C0C1ED9D8634C50415B9550AE57B42344D0AD3C0B275D6FB4C3CECFD2C70
F2E9F61CB67D29698E7CB8EC07614397EE0A15468C5A08FE0ED5B54D1F90EAD6
40228ED8F069462E067E733CD74710B1EDEC081589C599F4220FF703DE5FEBD5
3AA4105A115BDC64D27C27A50C> |-
/W <1C60D8A8C9B54354802C4598A1984154000750FB4EEA1F6E391CF12A37B6
45076FD083240B715D2C41589ECFBB4274FFA160AF480F931593BD62BC60A60E
CB444C29903BDF30487EF0D5A8B841DF3E96B8F8D1C705694BE1AE813602067C
01FE744D54976EF31A0CFE5D8B3033012D5C9B70B71150CA76DD688EDB8953A2
7631F534E460F8826E40F5881E74E041428A3556A7C099B9AA81296F1EC87B16
C4473BE83B3099D18A027C22D0D8A5E4BE02AFDB4CFD18D5873A0F3D29BF7435
FF9CF5E437D0678D5F2DAE98D9651624D5958563F6EF6144631667035835E9AE
6CD864244106CF2A9E138D9C586CA93C6AAFECBFB873D796E988CF97134C4B12
59D6517F707F8FAE2F93D9D04A874145C23300BFA51C64CAEF7C0DFC7EBAE913
D2803511ECDBD9992439E44675C35F42F47AC62236FA84D5335A3A89FA38908B
1E6C731EFECD60F17DE450E1F8C09B30A68EC310> |-
/Y <1C60D8A8C9B653D71C98D29B7E1FDFC8A12557A8DDBA037172B609A19336
D535BF868352FCEC9CF26E678C81F8CB01C17FA3891E19C9375DBF6B8CC06756
3D7357783D30C2D57453FB750A3F96D7A79AF978AB834060DD448F441F46F299
675D285BAF53662A9B82A7238630789AE4F1C383D7F857990B907B4EA7094BC0
39ED6F70CEE113F932EF59DB59FF7180AFF776A38AEFA7EAA345513D88773045
B76B629DF0117172B59FA7B42C9FF2FC4CA2F9CECEEAE30CE23F3FB61692243D
AC083049F7C5B5D327F4E84AFEB53BBA969FC0766C5438085ED59CBCDB9F7A92
0BE1E8B5778534F1909ED6B01A18FF662CE04464BB1F544D5A15B635DEF0AEB9
F13EC1F99FC40CD89FF70F77286E3C41F0952C147CD035FFC22F9EEFBA4BF075
861DBBF19B516305CE7B128107077FB1B586C323F0194FC1B8867D69C2A464A8
FD5134F8D3F322885BDC9E909F103EE57ABA1C961BE3A941F600BBE6004ED860
A206D6FB5CB069> |-
/bar <1C60D8A8C9B7A73DB70BE436C4CF058CDDA6913167E1634348D007B0E4
2653> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EKRDSP+TrajanPro-Bold /Encoding get
dup 46 /period put
dup 47 /slash put
dup 66 /B put
dup 75 /K put
dup 76 /L put
dup 80 /P put
dup 87 /W put
dup 89 /Y put
dup 124 /bar put
pop
%ADOEndSubsetFont
/EKRDSP+TrajanPro-Bold*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /slash 17{/.notdef}rp /A /B 
/C /D /E /F /G /H /I /.notdef 
/K /L /M /N /O /P /.notdef /R 
/S /T /U /.notdef /W /.notdef /Y 34{/.notdef}rp 
/bar 131{/.notdef}rp]
EKRDSP+TrajanPro-Bold nf
EKRDSP+TrajanPro-Bold*1 [6.96 0 0 -6.96 0 0 ]msf
244.56 17.418 mo
(|  THE ROYAL LIBRARY  |  COPENHAGEN  |  WWW.KB.DK/DCM)
[3.48 2.15971 2.03931 5.03976 6.71988 4.43982 2.03931 5.28058 6.59949 4.6806 4.91998 4.19965 
2.03931 4.32004 3.12015 4.92072 5.27991 4.91998 5.27991 4.80029 2.03931 2.03931 3.5997 2.03931 
2.1604 5.51999 6.4798 4.55878 4.43982 6.71991 6.72058 4.91998 6.11993 4.55954 6.60022 2.16043 
2.03928 3.48001 2.1597 2.03931 7.56 7.68039 7.56 1.79987 5.4003 4.92075 1.79984 6.47983 
5.40027 3.8399 6.4798 5.64038 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/EKRDSP+TrajanPro-Bold*1 uf
/EKRDSP+TrajanPro-Bold uf
/PBAAAA+TrajanPro-Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
