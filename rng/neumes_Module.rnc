# **************************************************************

# NAME:     Music Encoding Initiative (MEI) schema component:
#           neumes_Module.rng
# 
# NOTICE:   Copyright (c) 2010 by the Music Encoding Initiative (MEI)
#           Council.
# 
#           Licensed under the Educational Community License, Version
#           2.0 (the "License"); you may not use this file except in
#           compliance with the License. You may obtain a copy of the
#           License at http://www.osedu.org/licenses/ECL-2.0.
# 
#           Unless required by applicable law or agreed to in writing,
#           software distributed under the License is distributed on
#           an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#           KIND, either express or implied. See the License for the
#           specific language governing permissions and limitations
#           under the License.
# 
#           This is a derivative work based on earlier versions of the
#           schema copyright (c) 2001-2006 Perry Roland and the Rector
#           and Visitors of the University of Virginia; licensed under
#           the Educational Community License version 1.0.
# 
# CONTACT:  contact@music-encoding.org 

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
default namespace mei = "http://www.music-encoding.org/ns/mei"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
namespace tei = "http://www.tei-c.org/ns/1.0"
namespace xhtml = "http://www.w3.org/1999/xhtml"
namespace xlink = "http://www.w3.org/1999/xlink"

# Neumes Module

# Declare module attr classes
[
  a:documentation [
    xml:lang = "eng"
    "Analytical domain\x{a}" ~
    "      attributes"
  ]
]
att.ineume.anl &= att.common.anl
[ a:documentation [ xml:lang = "eng" "Gestural domain attributes" ] ]
att.ineume.ges &= empty
[ a:documentation [ xml:lang = "eng" "Logical domain attributes" ] ]
att.ineume.log &=
  [
    a:documentation [
      xml:lang = "eng"
      "provides a subclass or functional label\x{a}" ~
      "          for the neume."
    ]
  ]
  attribute form { data.INEUMEFORM }?,
  [
    a:documentation [
      xml:lang = "eng"
      "records a name of an interrupted\x{a}" ~
      "          neume."
    ]
  ]
  attribute name { data.INEUMENAME }?
[ a:documentation [ xml:lang = "eng" "Visual domain attributes" ] ]
att.ineume.vis &= att.color
[
  a:documentation [
    xml:lang = "eng"
    "Analytical domain\x{a}" ~
    "      attributes"
  ]
]
att.uneume.anl &=
  att.common.anl,
  att.harmonicfunction,
  att.melodicfunction,
  att.intervallicdesc,
  att.solfa
[ a:documentation [ xml:lang = "eng" "Gestural domain attributes" ] ]
att.uneume.ges &= empty
[ a:documentation [ xml:lang = "eng" "Logical domain attributes" ] ]
att.uneume.log &=
  att.event,
  att.syltext,
  [
    a:documentation [
      xml:lang = "eng"
      "provides a subclass or functional label\x{a}" ~
      "          for the neume."
    ]
  ]
  attribute form { data.UNEUMEFORM }?,
  [
    a:documentation [
      xml:lang = "eng"
      "records the name of an uninterrupted\x{a}" ~
      "          neume."
    ]
  ]
  attribute name { data.UNEUMENAME }?
[ a:documentation [ xml:lang = "eng" "Visual domain attributes" ] ]
att.uneume.vis &=
  att.altsym,
  att.color,
  att.relativesize,
  att.visualoffset.ho,
  att.xy,
  att.visibility
# Declare module model classes
model.eventLike.neumes &= (ineume | uneume)*
model.layerPart &= model.syllableLike*
[
  a:documentation [
    xml:lang = "eng"
    "groups elements that modify neume-like\x{a}" ~
    "      features."
  ]
]
model.neumeModifierLike &= empty
[
  a:documentation [
    xml:lang = "eng"
    "groups elements that accommodate neumed\x{a}" ~
    "      text."
  ]
]
model.syllableLike &= syllable
[
  a:documentation [
    xml:lang = "eng"
    "groups elements that may appear as part of\x{a}" ~
    "      content of a syllable."
  ]
]
model.syllablePart &=
  model.sylLike
  | model.eventLike
  | model.eventLike.neumes
  | model.midiLike
  | model.controleventLike
  | model.lyricsLike
  | model.noteModifierLike
  | model.verseLike
# Declare module elements
content.ineume =
  (model.eventLike
   | model.eventLike.neumes
   | model.neumeModifierLike
   | model.appLike
   | model.editLike
   | model.transcriptionLike
   | model.verseLike)*
ineume =
  [
    a:documentation [
      xml:lang = "eng"
      "interrupted neume ― a graphically\x{a}" ~
      "        interrupted neume; that is, a neume which is logically a single entity\x{a}" ~
      "        but is written using multiple signs. The constituent signs may be\x{a}" ~
      "        encoded using ineume and uneume sub-elements."
    ]
  ]
  element ineume { attlist.ineume, content.ineume }
attlist.ineume =
  att.common,
  att.facsimile,
  att.typed,
  att.ineume.log,
  att.ineume.vis,
  att.ineume.ges,
  att.ineume.anl
content.syllable =
  (model.appLike
   | model.divLike
   | model.milestoneLike.music
   | model.scoredefLike
   | model.staffdefLike
   | model.staffgrpLike
   | model.annotLike
   | model.graphicprimitiveLike
   | model.editLike
   | model.transcriptionLike
   | model.syllablePart)*
syllable =
  [
    a:documentation [
      xml:lang = "eng"
      "syllable ― Neume notation can be thought\x{a}" ~
      '        of as "neumed text". Therefore, the syllable element provides high-level\x{a}' ~
      "        organization in this repertoire."
    ]
  ]
  element syllable { attlist.syllable, content.syllable }
attlist.syllable = att.common
content.uneume =
  (model.eventLike
   | model.neumeModifierLike
   | model.appLike
   | model.editLike
   | model.transcriptionLike
   | model.verseLike)*
uneume =
  [
    a:documentation [
      xml:lang = "eng"
      "uninterrupted neume ― A\x{a}" ~
      "        graphically-uninterrupted neume sign. While ineume is allowed as a\x{a}" ~
      "        sub-element of uneume here as part of the model.eventLike.neume class,\x{a}" ~
      "        it is unlikely that an uninterrupted neume containing an interrupted\x{a}" ~
      "        neume is a meaningful construct."
    ]
  ]
  element uneume { attlist.uneume, content.uneume }
attlist.uneume =
  att.common,
  att.facsimile,
  att.typed,
  att.uneume.log,
  att.uneume.vis,
  att.uneume.ges,
  att.uneume.anl
