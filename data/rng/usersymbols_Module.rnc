# **************************************************************

# NAME:     Music Encoding Initiative (MEI) schema component:
#           usersymbols_Module.rng
# 
# NOTICE:   Copyright (c) 2010 by the Music Encoding Initiative (MEI)
#           Council.
# 
#           Licensed under the Educational Community License, Version
#           2.0 (the "License"); you may not use this file except in
#           compliance with the License. You may obtain a copy of the
#           License at http://www.osedu.org/licenses/ECL-2.0.
# 
#           Unless required by applicable law or agreed to in writing,
#           software distributed under the License is distributed on
#           an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#           KIND, either express or implied. See the License for the
#           specific language governing permissions and limitations
#           under the License.
# 
#           This is a derivative work based on earlier versions of the
#           schema copyright (c) 2001-2006 Perry Roland and the Rector
#           and Visitors of the University of Virginia; licensed under
#           the Educational Community License version 1.0.
# 
# CONTACT:  contact@music-encoding.org 

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
default namespace mei = "http://www.music-encoding.org/ns/mei"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
namespace tei = "http://www.tei-c.org/ns/1.0"
namespace xhtml = "http://www.w3.org/1999/xhtml"
namespace xlink = "http://www.w3.org/1999/xlink"

# UserSymbols Module

# Declare module attr classes

# Declare module model classes
[
  a:documentation [
    xml:lang = "eng"
    "groups elements that function as drawing\x{a}" ~
    "      primitives."
  ]
]
model.graphicprimitiveLike &= curve | line | symbol | anchoredtext
[
  a:documentation [
    xml:lang = "eng"
    "groups elements that group symbol\x{a}" ~
    "      definitions."
  ]
]
model.symboltableLike &= symboltable
# Declare module elements
content.anchoredtext =
  (text
   | model.textphraseLike.limited
   | model.editLike
   | model.transcriptionLike)*
anchoredtext =
  [
    a:documentation [
      xml:lang = "eng"
      "anchored text ― Container for text that is\x{a}" ~
      "        fixed to a particular location, regardless of changes made to the layout\x{a}" ~
      "        of the measures around it. This element may be used where semantic\x{a}" ~
      "        markup of the text is neither possible nor desirable, such as in optical\x{a}" ~
      "        music recognition (OMR) applications. The content model here is similar\x{a}" ~
      "        to paragraph without model.textcomponent and <pb>\x{a}" ~
      "        sub-elements. The starting point of the text may be identified in\x{a}" ~
      "        absolute output coordinate terms using the x and y attributes or\x{a}" ~
      "        relative to the location of another element using the startid attribute.\x{a}" ~
      "        The attributes in the att.visualoffset class may be used to record\x{a}" ~
      "        horizontal, vertical, or time offsets from the absolute coordinates or\x{a}" ~
      "        from the location of the referenced element."
    ]
  ]
  element anchoredtext { attlist.anchoredtext, content.anchoredtext }
attlist.anchoredtext =
  att.common.anl,
  att.common,
  att.facsimile,
  att.lang,
  att.startid,
  att.typed,
  att.visualoffset,
  att.xy
content.curve = empty
curve =
  [
    a:documentation [
      xml:lang = "eng"
      "curve ― A curved line that cannot be\x{a}" ~
      "        represented by a more specific element, such as a <slur>.\x{a}" ~
      "        The starting point of the curve may be identified in absolute output\x{a}" ~
      "        coordinate terms using the x1 and y1 attributes or relative to the\x{a}" ~
      "        location of another element using the startid attribute. The attributes\x{a}" ~
      "        in the att.visualoffset class may be used to record horizontal,\x{a}" ~
      "        vertical, or time offsets from the absolute coordinates or from the\x{a}" ~
      "        location of the referenced element. Similarly, the terminal point of the\x{a}" ~
      "        curve may be recorded using either the x2,y2 coordinates or in relation\x{a}" ~
      "        to the location of another element using the endid attribute. Attributes\x{a}" ~
      "        in the att.visualoffset2 class maybe used to record the offsets of the\x{a}" ~
      "        ending point. The bulge attribute or, alternatively, the bezier\x{a}" ~
      "        attribute, describes the shape of the curve. The bulge attribute\x{a}" ~
      "        describes the curve as a set of distance values above or below an\x{a}" ~
      "        imaginary line connecting the endpoints of the curve while the bezier\x{a}" ~
      "        attribute records the placement of Bezier control points as a series of\x{a}" ~
      "        space-separated xy coordinate pairs, eg. 19 45 -32 118. The bulge\x{a}" ~
      "        attribute must contain one or more values of the NUMBER datatype. The\x{a}" ~
      "        rend attribute captures the appearance of the curve."
    ]
  ]
  element curve { attlist.curve, content.curve }
attlist.curve =
  att.common.anl,
  att.color,
  att.common,
  att.facsimile,
  att.startendid,
  att.typed,
  att.visualoffset,
  att.visualoffset2,
  att.xy,
  att.xy2,
  att.curvature,
  att.curverend
content.line = (text | model.textphraseLike.limited)*
line =
  [
    a:documentation [
      xml:lang = "eng"
      "line ― A line that cannot be represented\x{a}" ~
      "        by a more specific element. The starting point of the line may be\x{a}" ~
      "        identified in absolute output coordinate terms using the x1 and y1\x{a}" ~
      "        attributes or relative to the location of another element using the\x{a}" ~
      "        startid attribute. The attributes in the att.visualoffset class may be\x{a}" ~
      "        used to record horizontal, vertical, or time offsets from the absolute\x{a}" ~
      "        coordinates or from the location of the referenced element. Similarly,\x{a}" ~
      "        the terminal point of the line may be recorded using either the x2 and\x{a}" ~
      "        y2 attributes or in relation to the location of another element using\x{a}" ~
      "        the endid attribute. Attributes in the att.visualoffset2 class maybe\x{a}" ~
      "        used to record the offsets of the ending point. Text content of the line\x{a}" ~
      "        element, e.g. 'gliss.', may be rendered with the line. The appearance of\x{a}" ~
      "        the line is captured in the rend attribute."
    ]
  ]
  element line { attlist.line, content.line }
attlist.line =
  att.common.anl,
  att.color,
  att.common,
  att.facsimile,
  att.startendid,
  att.typed,
  att.visualoffset,
  att.visualoffset2,
  att.xy,
  att.xy2,
  att.linerend
content.symbol = empty
symbol =
  [
    a:documentation [
      xml:lang = "eng"
      "symbol ― A reference to a previously\x{a}" ~
      '        defined symbol. The starting point, e.g. "hotspot", of the symbol may be\x{a}' ~
      "        indentified in absolute output coordinate terms using the x and y\x{a}" ~
      "        attributes or relative to another element using the startid attribute.\x{a}" ~
      "        Attributes in the att.visualoffset class may be used to record\x{a}" ~
      "        horizontal, vertical, or time offsets from the absolute coordinates or\x{a}" ~
      "        from the location of the referenced element. The ref attribute must\x{a}" ~
      "        contain the id of a symboldef element. The scale attribute indicates\x{a}" ~
      "        that the printed output must be scaled by the specified\x{a}" ~
      "        percentage."
    ]
  ]
  element symbol { attlist.symbol, content.symbol }
attlist.symbol =
  att.common.anl,
  att.color,
  att.common,
  att.facsimile,
  att.scalable,
  att.startid,
  att.typed,
  att.visualoffset,
  att.xy,
  [
    a:documentation [
      xml:lang = "eng"
      "contains a reference to a\x{a}" ~
      "        previously-declared user-defined symbol."
    ]
  ]
  attribute ref { xsd:IDREF }
content.symboldef = model.graphicprimitiveLike+
symboldef =
  [
    a:documentation [
      xml:lang = "eng"
      "symbol definition ― Declaration of an\x{a}" ~
      "        individual symbol in a symboltable."
    ]
  ]
  element symboldef { attlist.symboldef, content.symboldef }
attlist.symboldef = att.common
content.symboltable = symboldef+
symboltable =
  [
    a:documentation [
      xml:lang = "eng"
      "symbol table ― Contains individual,\x{a}" ~
      "        user-defined symbols. Like a chord table, a symboltable may be shared\x{a}" ~
      "        between mei instances through the use of an external parsed entity\x{a}" ~
      "        containing the symboltable to be shared."
    ]
  ]
  element symboltable { attlist.symboltable, content.symboltable }
attlist.symboltable = att.common
